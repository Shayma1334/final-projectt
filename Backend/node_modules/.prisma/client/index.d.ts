
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Client
 * 
 */
export type Client = $Result.DefaultSelection<Prisma.$ClientPayload>
/**
 * Model Chief
 * 
 */
export type Chief = $Result.DefaultSelection<Prisma.$ChiefPayload>
/**
 * Model DeliveryBoy
 * 
 */
export type DeliveryBoy = $Result.DefaultSelection<Prisma.$DeliveryBoyPayload>
/**
 * Model Dish
 * 
 */
export type Dish = $Result.DefaultSelection<Prisma.$DishPayload>
/**
 * Model Ingredients
 * 
 */
export type Ingredients = $Result.DefaultSelection<Prisma.$IngredientsPayload>
/**
 * Model Order
 * 
 */
export type Order = $Result.DefaultSelection<Prisma.$OrderPayload>
/**
 * Model IngDish
 * 
 */
export type IngDish = $Result.DefaultSelection<Prisma.$IngDishPayload>
/**
 * Model DishRating
 * 
 */
export type DishRating = $Result.DefaultSelection<Prisma.$DishRatingPayload>
/**
 * Model Admin
 * 
 */
export type Admin = $Result.DefaultSelection<Prisma.$AdminPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const OrderStatus: {
  PENDING: 'PENDING',
  PREPARING: 'PREPARING',
  DELIVERING: 'DELIVERING',
  DELIVERED: 'DELIVERED',
  CANCELLED: 'CANCELLED'
};

export type OrderStatus = (typeof OrderStatus)[keyof typeof OrderStatus]

}

export type OrderStatus = $Enums.OrderStatus

export const OrderStatus: typeof $Enums.OrderStatus

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Clients
 * const clients = await prisma.client.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Clients
   * const clients = await prisma.client.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.client`: Exposes CRUD operations for the **Client** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clients
    * const clients = await prisma.client.findMany()
    * ```
    */
  get client(): Prisma.ClientDelegate<ExtArgs>;

  /**
   * `prisma.chief`: Exposes CRUD operations for the **Chief** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chiefs
    * const chiefs = await prisma.chief.findMany()
    * ```
    */
  get chief(): Prisma.ChiefDelegate<ExtArgs>;

  /**
   * `prisma.deliveryBoy`: Exposes CRUD operations for the **DeliveryBoy** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DeliveryBoys
    * const deliveryBoys = await prisma.deliveryBoy.findMany()
    * ```
    */
  get deliveryBoy(): Prisma.DeliveryBoyDelegate<ExtArgs>;

  /**
   * `prisma.dish`: Exposes CRUD operations for the **Dish** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Dishes
    * const dishes = await prisma.dish.findMany()
    * ```
    */
  get dish(): Prisma.DishDelegate<ExtArgs>;

  /**
   * `prisma.ingredients`: Exposes CRUD operations for the **Ingredients** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ingredients
    * const ingredients = await prisma.ingredients.findMany()
    * ```
    */
  get ingredients(): Prisma.IngredientsDelegate<ExtArgs>;

  /**
   * `prisma.order`: Exposes CRUD operations for the **Order** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.order.findMany()
    * ```
    */
  get order(): Prisma.OrderDelegate<ExtArgs>;

  /**
   * `prisma.ingDish`: Exposes CRUD operations for the **IngDish** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more IngDishes
    * const ingDishes = await prisma.ingDish.findMany()
    * ```
    */
  get ingDish(): Prisma.IngDishDelegate<ExtArgs>;

  /**
   * `prisma.dishRating`: Exposes CRUD operations for the **DishRating** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DishRatings
    * const dishRatings = await prisma.dishRating.findMany()
    * ```
    */
  get dishRating(): Prisma.DishRatingDelegate<ExtArgs>;

  /**
   * `prisma.admin`: Exposes CRUD operations for the **Admin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Admins
    * const admins = await prisma.admin.findMany()
    * ```
    */
  get admin(): Prisma.AdminDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.21.1
   * Query Engine version: bf0e5e8a04cada8225617067eaa03d041e2bba36
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Client: 'Client',
    Chief: 'Chief',
    DeliveryBoy: 'DeliveryBoy',
    Dish: 'Dish',
    Ingredients: 'Ingredients',
    Order: 'Order',
    IngDish: 'IngDish',
    DishRating: 'DishRating',
    Admin: 'Admin'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "client" | "chief" | "deliveryBoy" | "dish" | "ingredients" | "order" | "ingDish" | "dishRating" | "admin"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Client: {
        payload: Prisma.$ClientPayload<ExtArgs>
        fields: Prisma.ClientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClientFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClientFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          findFirst: {
            args: Prisma.ClientFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClientFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          findMany: {
            args: Prisma.ClientFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>[]
          }
          create: {
            args: Prisma.ClientCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          createMany: {
            args: Prisma.ClientCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClientCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>[]
          }
          delete: {
            args: Prisma.ClientDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          update: {
            args: Prisma.ClientUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          deleteMany: {
            args: Prisma.ClientDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClientUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ClientUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          aggregate: {
            args: Prisma.ClientAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClient>
          }
          groupBy: {
            args: Prisma.ClientGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClientGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClientCountArgs<ExtArgs>
            result: $Utils.Optional<ClientCountAggregateOutputType> | number
          }
        }
      }
      Chief: {
        payload: Prisma.$ChiefPayload<ExtArgs>
        fields: Prisma.ChiefFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChiefFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChiefPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChiefFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChiefPayload>
          }
          findFirst: {
            args: Prisma.ChiefFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChiefPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChiefFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChiefPayload>
          }
          findMany: {
            args: Prisma.ChiefFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChiefPayload>[]
          }
          create: {
            args: Prisma.ChiefCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChiefPayload>
          }
          createMany: {
            args: Prisma.ChiefCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChiefCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChiefPayload>[]
          }
          delete: {
            args: Prisma.ChiefDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChiefPayload>
          }
          update: {
            args: Prisma.ChiefUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChiefPayload>
          }
          deleteMany: {
            args: Prisma.ChiefDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChiefUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ChiefUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChiefPayload>
          }
          aggregate: {
            args: Prisma.ChiefAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChief>
          }
          groupBy: {
            args: Prisma.ChiefGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChiefGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChiefCountArgs<ExtArgs>
            result: $Utils.Optional<ChiefCountAggregateOutputType> | number
          }
        }
      }
      DeliveryBoy: {
        payload: Prisma.$DeliveryBoyPayload<ExtArgs>
        fields: Prisma.DeliveryBoyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DeliveryBoyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeliveryBoyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DeliveryBoyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeliveryBoyPayload>
          }
          findFirst: {
            args: Prisma.DeliveryBoyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeliveryBoyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DeliveryBoyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeliveryBoyPayload>
          }
          findMany: {
            args: Prisma.DeliveryBoyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeliveryBoyPayload>[]
          }
          create: {
            args: Prisma.DeliveryBoyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeliveryBoyPayload>
          }
          createMany: {
            args: Prisma.DeliveryBoyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DeliveryBoyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeliveryBoyPayload>[]
          }
          delete: {
            args: Prisma.DeliveryBoyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeliveryBoyPayload>
          }
          update: {
            args: Prisma.DeliveryBoyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeliveryBoyPayload>
          }
          deleteMany: {
            args: Prisma.DeliveryBoyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DeliveryBoyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DeliveryBoyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeliveryBoyPayload>
          }
          aggregate: {
            args: Prisma.DeliveryBoyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDeliveryBoy>
          }
          groupBy: {
            args: Prisma.DeliveryBoyGroupByArgs<ExtArgs>
            result: $Utils.Optional<DeliveryBoyGroupByOutputType>[]
          }
          count: {
            args: Prisma.DeliveryBoyCountArgs<ExtArgs>
            result: $Utils.Optional<DeliveryBoyCountAggregateOutputType> | number
          }
        }
      }
      Dish: {
        payload: Prisma.$DishPayload<ExtArgs>
        fields: Prisma.DishFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DishFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DishPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DishFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DishPayload>
          }
          findFirst: {
            args: Prisma.DishFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DishPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DishFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DishPayload>
          }
          findMany: {
            args: Prisma.DishFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DishPayload>[]
          }
          create: {
            args: Prisma.DishCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DishPayload>
          }
          createMany: {
            args: Prisma.DishCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DishCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DishPayload>[]
          }
          delete: {
            args: Prisma.DishDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DishPayload>
          }
          update: {
            args: Prisma.DishUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DishPayload>
          }
          deleteMany: {
            args: Prisma.DishDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DishUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DishUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DishPayload>
          }
          aggregate: {
            args: Prisma.DishAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDish>
          }
          groupBy: {
            args: Prisma.DishGroupByArgs<ExtArgs>
            result: $Utils.Optional<DishGroupByOutputType>[]
          }
          count: {
            args: Prisma.DishCountArgs<ExtArgs>
            result: $Utils.Optional<DishCountAggregateOutputType> | number
          }
        }
      }
      Ingredients: {
        payload: Prisma.$IngredientsPayload<ExtArgs>
        fields: Prisma.IngredientsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.IngredientsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.IngredientsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientsPayload>
          }
          findFirst: {
            args: Prisma.IngredientsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.IngredientsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientsPayload>
          }
          findMany: {
            args: Prisma.IngredientsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientsPayload>[]
          }
          create: {
            args: Prisma.IngredientsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientsPayload>
          }
          createMany: {
            args: Prisma.IngredientsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.IngredientsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientsPayload>[]
          }
          delete: {
            args: Prisma.IngredientsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientsPayload>
          }
          update: {
            args: Prisma.IngredientsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientsPayload>
          }
          deleteMany: {
            args: Prisma.IngredientsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.IngredientsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.IngredientsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientsPayload>
          }
          aggregate: {
            args: Prisma.IngredientsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateIngredients>
          }
          groupBy: {
            args: Prisma.IngredientsGroupByArgs<ExtArgs>
            result: $Utils.Optional<IngredientsGroupByOutputType>[]
          }
          count: {
            args: Prisma.IngredientsCountArgs<ExtArgs>
            result: $Utils.Optional<IngredientsCountAggregateOutputType> | number
          }
        }
      }
      Order: {
        payload: Prisma.$OrderPayload<ExtArgs>
        fields: Prisma.OrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findFirst: {
            args: Prisma.OrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findMany: {
            args: Prisma.OrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          create: {
            args: Prisma.OrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          createMany: {
            args: Prisma.OrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          delete: {
            args: Prisma.OrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          update: {
            args: Prisma.OrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          deleteMany: {
            args: Prisma.OrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          aggregate: {
            args: Prisma.OrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrder>
          }
          groupBy: {
            args: Prisma.OrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderCountArgs<ExtArgs>
            result: $Utils.Optional<OrderCountAggregateOutputType> | number
          }
        }
      }
      IngDish: {
        payload: Prisma.$IngDishPayload<ExtArgs>
        fields: Prisma.IngDishFieldRefs
        operations: {
          findUnique: {
            args: Prisma.IngDishFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngDishPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.IngDishFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngDishPayload>
          }
          findFirst: {
            args: Prisma.IngDishFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngDishPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.IngDishFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngDishPayload>
          }
          findMany: {
            args: Prisma.IngDishFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngDishPayload>[]
          }
          create: {
            args: Prisma.IngDishCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngDishPayload>
          }
          createMany: {
            args: Prisma.IngDishCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.IngDishCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngDishPayload>[]
          }
          delete: {
            args: Prisma.IngDishDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngDishPayload>
          }
          update: {
            args: Prisma.IngDishUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngDishPayload>
          }
          deleteMany: {
            args: Prisma.IngDishDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.IngDishUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.IngDishUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngDishPayload>
          }
          aggregate: {
            args: Prisma.IngDishAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateIngDish>
          }
          groupBy: {
            args: Prisma.IngDishGroupByArgs<ExtArgs>
            result: $Utils.Optional<IngDishGroupByOutputType>[]
          }
          count: {
            args: Prisma.IngDishCountArgs<ExtArgs>
            result: $Utils.Optional<IngDishCountAggregateOutputType> | number
          }
        }
      }
      DishRating: {
        payload: Prisma.$DishRatingPayload<ExtArgs>
        fields: Prisma.DishRatingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DishRatingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DishRatingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DishRatingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DishRatingPayload>
          }
          findFirst: {
            args: Prisma.DishRatingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DishRatingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DishRatingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DishRatingPayload>
          }
          findMany: {
            args: Prisma.DishRatingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DishRatingPayload>[]
          }
          create: {
            args: Prisma.DishRatingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DishRatingPayload>
          }
          createMany: {
            args: Prisma.DishRatingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DishRatingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DishRatingPayload>[]
          }
          delete: {
            args: Prisma.DishRatingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DishRatingPayload>
          }
          update: {
            args: Prisma.DishRatingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DishRatingPayload>
          }
          deleteMany: {
            args: Prisma.DishRatingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DishRatingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DishRatingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DishRatingPayload>
          }
          aggregate: {
            args: Prisma.DishRatingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDishRating>
          }
          groupBy: {
            args: Prisma.DishRatingGroupByArgs<ExtArgs>
            result: $Utils.Optional<DishRatingGroupByOutputType>[]
          }
          count: {
            args: Prisma.DishRatingCountArgs<ExtArgs>
            result: $Utils.Optional<DishRatingCountAggregateOutputType> | number
          }
        }
      }
      Admin: {
        payload: Prisma.$AdminPayload<ExtArgs>
        fields: Prisma.AdminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findFirst: {
            args: Prisma.AdminFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findMany: {
            args: Prisma.AdminFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          create: {
            args: Prisma.AdminCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          createMany: {
            args: Prisma.AdminCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AdminCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          delete: {
            args: Prisma.AdminDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          update: {
            args: Prisma.AdminUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          deleteMany: {
            args: Prisma.AdminDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdminUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AdminUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          aggregate: {
            args: Prisma.AdminAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdmin>
          }
          groupBy: {
            args: Prisma.AdminGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminCountArgs<ExtArgs>
            result: $Utils.Optional<AdminCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ClientCountOutputType
   */

  export type ClientCountOutputType = {
    orders: number
    dishRatings: number
    dishfavorites: number
  }

  export type ClientCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | ClientCountOutputTypeCountOrdersArgs
    dishRatings?: boolean | ClientCountOutputTypeCountDishRatingsArgs
    dishfavorites?: boolean | ClientCountOutputTypeCountDishfavoritesArgs
  }

  // Custom InputTypes
  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientCountOutputType
     */
    select?: ClientCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountDishRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DishRatingWhereInput
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountDishfavoritesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DishWhereInput
  }


  /**
   * Count Type ChiefCountOutputType
   */

  export type ChiefCountOutputType = {
    dishes: number
  }

  export type ChiefCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dishes?: boolean | ChiefCountOutputTypeCountDishesArgs
  }

  // Custom InputTypes
  /**
   * ChiefCountOutputType without action
   */
  export type ChiefCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChiefCountOutputType
     */
    select?: ChiefCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChiefCountOutputType without action
   */
  export type ChiefCountOutputTypeCountDishesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DishWhereInput
  }


  /**
   * Count Type DeliveryBoyCountOutputType
   */

  export type DeliveryBoyCountOutputType = {
    orders: number
  }

  export type DeliveryBoyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | DeliveryBoyCountOutputTypeCountOrdersArgs
  }

  // Custom InputTypes
  /**
   * DeliveryBoyCountOutputType without action
   */
  export type DeliveryBoyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeliveryBoyCountOutputType
     */
    select?: DeliveryBoyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DeliveryBoyCountOutputType without action
   */
  export type DeliveryBoyCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }


  /**
   * Count Type DishCountOutputType
   */

  export type DishCountOutputType = {
    ratings: number
    Orders: number
    dishFavorite: number
    ingDishes: number
  }

  export type DishCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ratings?: boolean | DishCountOutputTypeCountRatingsArgs
    Orders?: boolean | DishCountOutputTypeCountOrdersArgs
    dishFavorite?: boolean | DishCountOutputTypeCountDishFavoriteArgs
    ingDishes?: boolean | DishCountOutputTypeCountIngDishesArgs
  }

  // Custom InputTypes
  /**
   * DishCountOutputType without action
   */
  export type DishCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DishCountOutputType
     */
    select?: DishCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DishCountOutputType without action
   */
  export type DishCountOutputTypeCountRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DishRatingWhereInput
  }

  /**
   * DishCountOutputType without action
   */
  export type DishCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }

  /**
   * DishCountOutputType without action
   */
  export type DishCountOutputTypeCountDishFavoriteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClientWhereInput
  }

  /**
   * DishCountOutputType without action
   */
  export type DishCountOutputTypeCountIngDishesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IngDishWhereInput
  }


  /**
   * Count Type IngredientsCountOutputType
   */

  export type IngredientsCountOutputType = {
    ingDishes: number
  }

  export type IngredientsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ingDishes?: boolean | IngredientsCountOutputTypeCountIngDishesArgs
  }

  // Custom InputTypes
  /**
   * IngredientsCountOutputType without action
   */
  export type IngredientsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IngredientsCountOutputType
     */
    select?: IngredientsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * IngredientsCountOutputType without action
   */
  export type IngredientsCountOutputTypeCountIngDishesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IngDishWhereInput
  }


  /**
   * Count Type OrderCountOutputType
   */

  export type OrderCountOutputType = {
    ingDishes: number
  }

  export type OrderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ingDishes?: boolean | OrderCountOutputTypeCountIngDishesArgs
  }

  // Custom InputTypes
  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderCountOutputType
     */
    select?: OrderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountIngDishesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IngDishWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Client
   */

  export type AggregateClient = {
    _count: ClientCountAggregateOutputType | null
    _avg: ClientAvgAggregateOutputType | null
    _sum: ClientSumAggregateOutputType | null
    _min: ClientMinAggregateOutputType | null
    _max: ClientMaxAggregateOutputType | null
  }

  export type ClientAvgAggregateOutputType = {
    id: number | null
  }

  export type ClientSumAggregateOutputType = {
    id: number | null
  }

  export type ClientMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    phoneNumber: string | null
    address: string | null
    imageUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ClientMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    phoneNumber: string | null
    address: string | null
    imageUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ClientCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    phoneNumber: number
    address: number
    imageUrl: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ClientAvgAggregateInputType = {
    id?: true
  }

  export type ClientSumAggregateInputType = {
    id?: true
  }

  export type ClientMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    phoneNumber?: true
    address?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ClientMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    phoneNumber?: true
    address?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ClientCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    phoneNumber?: true
    address?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ClientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Client to aggregate.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clients
    **/
    _count?: true | ClientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClientAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClientSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClientMaxAggregateInputType
  }

  export type GetClientAggregateType<T extends ClientAggregateArgs> = {
        [P in keyof T & keyof AggregateClient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClient[P]>
      : GetScalarType<T[P], AggregateClient[P]>
  }




  export type ClientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClientWhereInput
    orderBy?: ClientOrderByWithAggregationInput | ClientOrderByWithAggregationInput[]
    by: ClientScalarFieldEnum[] | ClientScalarFieldEnum
    having?: ClientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClientCountAggregateInputType | true
    _avg?: ClientAvgAggregateInputType
    _sum?: ClientSumAggregateInputType
    _min?: ClientMinAggregateInputType
    _max?: ClientMaxAggregateInputType
  }

  export type ClientGroupByOutputType = {
    id: number
    name: string
    email: string
    password: string
    phoneNumber: string
    address: string
    imageUrl: string | null
    createdAt: Date
    updatedAt: Date
    _count: ClientCountAggregateOutputType | null
    _avg: ClientAvgAggregateOutputType | null
    _sum: ClientSumAggregateOutputType | null
    _min: ClientMinAggregateOutputType | null
    _max: ClientMaxAggregateOutputType | null
  }

  type GetClientGroupByPayload<T extends ClientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClientGroupByOutputType[P]>
            : GetScalarType<T[P], ClientGroupByOutputType[P]>
        }
      >
    >


  export type ClientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    phoneNumber?: boolean
    address?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    orders?: boolean | Client$ordersArgs<ExtArgs>
    dishRatings?: boolean | Client$dishRatingsArgs<ExtArgs>
    dishfavorites?: boolean | Client$dishfavoritesArgs<ExtArgs>
    _count?: boolean | ClientCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["client"]>

  export type ClientSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    phoneNumber?: boolean
    address?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["client"]>

  export type ClientSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    phoneNumber?: boolean
    address?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ClientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | Client$ordersArgs<ExtArgs>
    dishRatings?: boolean | Client$dishRatingsArgs<ExtArgs>
    dishfavorites?: boolean | Client$dishfavoritesArgs<ExtArgs>
    _count?: boolean | ClientCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ClientIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ClientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Client"
    objects: {
      orders: Prisma.$OrderPayload<ExtArgs>[]
      dishRatings: Prisma.$DishRatingPayload<ExtArgs>[]
      dishfavorites: Prisma.$DishPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      password: string
      phoneNumber: string
      address: string
      imageUrl: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["client"]>
    composites: {}
  }

  type ClientGetPayload<S extends boolean | null | undefined | ClientDefaultArgs> = $Result.GetResult<Prisma.$ClientPayload, S>

  type ClientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ClientFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ClientCountAggregateInputType | true
    }

  export interface ClientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Client'], meta: { name: 'Client' } }
    /**
     * Find zero or one Client that matches the filter.
     * @param {ClientFindUniqueArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClientFindUniqueArgs>(args: SelectSubset<T, ClientFindUniqueArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Client that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ClientFindUniqueOrThrowArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClientFindUniqueOrThrowArgs>(args: SelectSubset<T, ClientFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Client that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindFirstArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClientFindFirstArgs>(args?: SelectSubset<T, ClientFindFirstArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Client that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindFirstOrThrowArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClientFindFirstOrThrowArgs>(args?: SelectSubset<T, ClientFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Clients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clients
     * const clients = await prisma.client.findMany()
     * 
     * // Get first 10 Clients
     * const clients = await prisma.client.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clientWithIdOnly = await prisma.client.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClientFindManyArgs>(args?: SelectSubset<T, ClientFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Client.
     * @param {ClientCreateArgs} args - Arguments to create a Client.
     * @example
     * // Create one Client
     * const Client = await prisma.client.create({
     *   data: {
     *     // ... data to create a Client
     *   }
     * })
     * 
     */
    create<T extends ClientCreateArgs>(args: SelectSubset<T, ClientCreateArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Clients.
     * @param {ClientCreateManyArgs} args - Arguments to create many Clients.
     * @example
     * // Create many Clients
     * const client = await prisma.client.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClientCreateManyArgs>(args?: SelectSubset<T, ClientCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Clients and returns the data saved in the database.
     * @param {ClientCreateManyAndReturnArgs} args - Arguments to create many Clients.
     * @example
     * // Create many Clients
     * const client = await prisma.client.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Clients and only return the `id`
     * const clientWithIdOnly = await prisma.client.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClientCreateManyAndReturnArgs>(args?: SelectSubset<T, ClientCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Client.
     * @param {ClientDeleteArgs} args - Arguments to delete one Client.
     * @example
     * // Delete one Client
     * const Client = await prisma.client.delete({
     *   where: {
     *     // ... filter to delete one Client
     *   }
     * })
     * 
     */
    delete<T extends ClientDeleteArgs>(args: SelectSubset<T, ClientDeleteArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Client.
     * @param {ClientUpdateArgs} args - Arguments to update one Client.
     * @example
     * // Update one Client
     * const client = await prisma.client.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClientUpdateArgs>(args: SelectSubset<T, ClientUpdateArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Clients.
     * @param {ClientDeleteManyArgs} args - Arguments to filter Clients to delete.
     * @example
     * // Delete a few Clients
     * const { count } = await prisma.client.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClientDeleteManyArgs>(args?: SelectSubset<T, ClientDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clients
     * const client = await prisma.client.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClientUpdateManyArgs>(args: SelectSubset<T, ClientUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Client.
     * @param {ClientUpsertArgs} args - Arguments to update or create a Client.
     * @example
     * // Update or create a Client
     * const client = await prisma.client.upsert({
     *   create: {
     *     // ... data to create a Client
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Client we want to update
     *   }
     * })
     */
    upsert<T extends ClientUpsertArgs>(args: SelectSubset<T, ClientUpsertArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientCountArgs} args - Arguments to filter Clients to count.
     * @example
     * // Count the number of Clients
     * const count = await prisma.client.count({
     *   where: {
     *     // ... the filter for the Clients we want to count
     *   }
     * })
    **/
    count<T extends ClientCountArgs>(
      args?: Subset<T, ClientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Client.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClientAggregateArgs>(args: Subset<T, ClientAggregateArgs>): Prisma.PrismaPromise<GetClientAggregateType<T>>

    /**
     * Group by Client.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClientGroupByArgs['orderBy'] }
        : { orderBy?: ClientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Client model
   */
  readonly fields: ClientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Client.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    orders<T extends Client$ordersArgs<ExtArgs> = {}>(args?: Subset<T, Client$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany"> | Null>
    dishRatings<T extends Client$dishRatingsArgs<ExtArgs> = {}>(args?: Subset<T, Client$dishRatingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DishRatingPayload<ExtArgs>, T, "findMany"> | Null>
    dishfavorites<T extends Client$dishfavoritesArgs<ExtArgs> = {}>(args?: Subset<T, Client$dishfavoritesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DishPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Client model
   */ 
  interface ClientFieldRefs {
    readonly id: FieldRef<"Client", 'Int'>
    readonly name: FieldRef<"Client", 'String'>
    readonly email: FieldRef<"Client", 'String'>
    readonly password: FieldRef<"Client", 'String'>
    readonly phoneNumber: FieldRef<"Client", 'String'>
    readonly address: FieldRef<"Client", 'String'>
    readonly imageUrl: FieldRef<"Client", 'String'>
    readonly createdAt: FieldRef<"Client", 'DateTime'>
    readonly updatedAt: FieldRef<"Client", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Client findUnique
   */
  export type ClientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where: ClientWhereUniqueInput
  }

  /**
   * Client findUniqueOrThrow
   */
  export type ClientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where: ClientWhereUniqueInput
  }

  /**
   * Client findFirst
   */
  export type ClientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clients.
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clients.
     */
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * Client findFirstOrThrow
   */
  export type ClientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clients.
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clients.
     */
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * Client findMany
   */
  export type ClientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Clients to fetch.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clients.
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * Client create
   */
  export type ClientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * The data needed to create a Client.
     */
    data: XOR<ClientCreateInput, ClientUncheckedCreateInput>
  }

  /**
   * Client createMany
   */
  export type ClientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Clients.
     */
    data: ClientCreateManyInput | ClientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Client createManyAndReturn
   */
  export type ClientCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Clients.
     */
    data: ClientCreateManyInput | ClientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Client update
   */
  export type ClientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * The data needed to update a Client.
     */
    data: XOR<ClientUpdateInput, ClientUncheckedUpdateInput>
    /**
     * Choose, which Client to update.
     */
    where: ClientWhereUniqueInput
  }

  /**
   * Client updateMany
   */
  export type ClientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Clients.
     */
    data: XOR<ClientUpdateManyMutationInput, ClientUncheckedUpdateManyInput>
    /**
     * Filter which Clients to update
     */
    where?: ClientWhereInput
  }

  /**
   * Client upsert
   */
  export type ClientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * The filter to search for the Client to update in case it exists.
     */
    where: ClientWhereUniqueInput
    /**
     * In case the Client found by the `where` argument doesn't exist, create a new Client with this data.
     */
    create: XOR<ClientCreateInput, ClientUncheckedCreateInput>
    /**
     * In case the Client was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClientUpdateInput, ClientUncheckedUpdateInput>
  }

  /**
   * Client delete
   */
  export type ClientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter which Client to delete.
     */
    where: ClientWhereUniqueInput
  }

  /**
   * Client deleteMany
   */
  export type ClientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clients to delete
     */
    where?: ClientWhereInput
  }

  /**
   * Client.orders
   */
  export type Client$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Client.dishRatings
   */
  export type Client$dishRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DishRating
     */
    select?: DishRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DishRatingInclude<ExtArgs> | null
    where?: DishRatingWhereInput
    orderBy?: DishRatingOrderByWithRelationInput | DishRatingOrderByWithRelationInput[]
    cursor?: DishRatingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DishRatingScalarFieldEnum | DishRatingScalarFieldEnum[]
  }

  /**
   * Client.dishfavorites
   */
  export type Client$dishfavoritesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dish
     */
    select?: DishSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DishInclude<ExtArgs> | null
    where?: DishWhereInput
    orderBy?: DishOrderByWithRelationInput | DishOrderByWithRelationInput[]
    cursor?: DishWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DishScalarFieldEnum | DishScalarFieldEnum[]
  }

  /**
   * Client without action
   */
  export type ClientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
  }


  /**
   * Model Chief
   */

  export type AggregateChief = {
    _count: ChiefCountAggregateOutputType | null
    _avg: ChiefAvgAggregateOutputType | null
    _sum: ChiefSumAggregateOutputType | null
    _min: ChiefMinAggregateOutputType | null
    _max: ChiefMaxAggregateOutputType | null
  }

  export type ChiefAvgAggregateOutputType = {
    id: number | null
  }

  export type ChiefSumAggregateOutputType = {
    id: number | null
  }

  export type ChiefMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    phoneNumber: string | null
    imageUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChiefMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    phoneNumber: string | null
    imageUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChiefCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    phoneNumber: number
    IDCard: number
    imageUrl: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ChiefAvgAggregateInputType = {
    id?: true
  }

  export type ChiefSumAggregateInputType = {
    id?: true
  }

  export type ChiefMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    phoneNumber?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChiefMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    phoneNumber?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChiefCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    phoneNumber?: true
    IDCard?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ChiefAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Chief to aggregate.
     */
    where?: ChiefWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chiefs to fetch.
     */
    orderBy?: ChiefOrderByWithRelationInput | ChiefOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChiefWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chiefs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chiefs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Chiefs
    **/
    _count?: true | ChiefCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChiefAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChiefSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChiefMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChiefMaxAggregateInputType
  }

  export type GetChiefAggregateType<T extends ChiefAggregateArgs> = {
        [P in keyof T & keyof AggregateChief]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChief[P]>
      : GetScalarType<T[P], AggregateChief[P]>
  }




  export type ChiefGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChiefWhereInput
    orderBy?: ChiefOrderByWithAggregationInput | ChiefOrderByWithAggregationInput[]
    by: ChiefScalarFieldEnum[] | ChiefScalarFieldEnum
    having?: ChiefScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChiefCountAggregateInputType | true
    _avg?: ChiefAvgAggregateInputType
    _sum?: ChiefSumAggregateInputType
    _min?: ChiefMinAggregateInputType
    _max?: ChiefMaxAggregateInputType
  }

  export type ChiefGroupByOutputType = {
    id: number
    name: string
    email: string
    password: string
    phoneNumber: string
    IDCard: string[]
    imageUrl: string | null
    createdAt: Date
    updatedAt: Date
    _count: ChiefCountAggregateOutputType | null
    _avg: ChiefAvgAggregateOutputType | null
    _sum: ChiefSumAggregateOutputType | null
    _min: ChiefMinAggregateOutputType | null
    _max: ChiefMaxAggregateOutputType | null
  }

  type GetChiefGroupByPayload<T extends ChiefGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChiefGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChiefGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChiefGroupByOutputType[P]>
            : GetScalarType<T[P], ChiefGroupByOutputType[P]>
        }
      >
    >


  export type ChiefSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    phoneNumber?: boolean
    IDCard?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    dishes?: boolean | Chief$dishesArgs<ExtArgs>
    _count?: boolean | ChiefCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chief"]>

  export type ChiefSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    phoneNumber?: boolean
    IDCard?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["chief"]>

  export type ChiefSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    phoneNumber?: boolean
    IDCard?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ChiefInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dishes?: boolean | Chief$dishesArgs<ExtArgs>
    _count?: boolean | ChiefCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ChiefIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ChiefPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Chief"
    objects: {
      dishes: Prisma.$DishPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      password: string
      phoneNumber: string
      IDCard: string[]
      imageUrl: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["chief"]>
    composites: {}
  }

  type ChiefGetPayload<S extends boolean | null | undefined | ChiefDefaultArgs> = $Result.GetResult<Prisma.$ChiefPayload, S>

  type ChiefCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ChiefFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ChiefCountAggregateInputType | true
    }

  export interface ChiefDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Chief'], meta: { name: 'Chief' } }
    /**
     * Find zero or one Chief that matches the filter.
     * @param {ChiefFindUniqueArgs} args - Arguments to find a Chief
     * @example
     * // Get one Chief
     * const chief = await prisma.chief.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChiefFindUniqueArgs>(args: SelectSubset<T, ChiefFindUniqueArgs<ExtArgs>>): Prisma__ChiefClient<$Result.GetResult<Prisma.$ChiefPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Chief that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ChiefFindUniqueOrThrowArgs} args - Arguments to find a Chief
     * @example
     * // Get one Chief
     * const chief = await prisma.chief.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChiefFindUniqueOrThrowArgs>(args: SelectSubset<T, ChiefFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChiefClient<$Result.GetResult<Prisma.$ChiefPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Chief that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChiefFindFirstArgs} args - Arguments to find a Chief
     * @example
     * // Get one Chief
     * const chief = await prisma.chief.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChiefFindFirstArgs>(args?: SelectSubset<T, ChiefFindFirstArgs<ExtArgs>>): Prisma__ChiefClient<$Result.GetResult<Prisma.$ChiefPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Chief that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChiefFindFirstOrThrowArgs} args - Arguments to find a Chief
     * @example
     * // Get one Chief
     * const chief = await prisma.chief.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChiefFindFirstOrThrowArgs>(args?: SelectSubset<T, ChiefFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChiefClient<$Result.GetResult<Prisma.$ChiefPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Chiefs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChiefFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chiefs
     * const chiefs = await prisma.chief.findMany()
     * 
     * // Get first 10 Chiefs
     * const chiefs = await prisma.chief.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chiefWithIdOnly = await prisma.chief.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChiefFindManyArgs>(args?: SelectSubset<T, ChiefFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChiefPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Chief.
     * @param {ChiefCreateArgs} args - Arguments to create a Chief.
     * @example
     * // Create one Chief
     * const Chief = await prisma.chief.create({
     *   data: {
     *     // ... data to create a Chief
     *   }
     * })
     * 
     */
    create<T extends ChiefCreateArgs>(args: SelectSubset<T, ChiefCreateArgs<ExtArgs>>): Prisma__ChiefClient<$Result.GetResult<Prisma.$ChiefPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Chiefs.
     * @param {ChiefCreateManyArgs} args - Arguments to create many Chiefs.
     * @example
     * // Create many Chiefs
     * const chief = await prisma.chief.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChiefCreateManyArgs>(args?: SelectSubset<T, ChiefCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Chiefs and returns the data saved in the database.
     * @param {ChiefCreateManyAndReturnArgs} args - Arguments to create many Chiefs.
     * @example
     * // Create many Chiefs
     * const chief = await prisma.chief.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Chiefs and only return the `id`
     * const chiefWithIdOnly = await prisma.chief.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChiefCreateManyAndReturnArgs>(args?: SelectSubset<T, ChiefCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChiefPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Chief.
     * @param {ChiefDeleteArgs} args - Arguments to delete one Chief.
     * @example
     * // Delete one Chief
     * const Chief = await prisma.chief.delete({
     *   where: {
     *     // ... filter to delete one Chief
     *   }
     * })
     * 
     */
    delete<T extends ChiefDeleteArgs>(args: SelectSubset<T, ChiefDeleteArgs<ExtArgs>>): Prisma__ChiefClient<$Result.GetResult<Prisma.$ChiefPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Chief.
     * @param {ChiefUpdateArgs} args - Arguments to update one Chief.
     * @example
     * // Update one Chief
     * const chief = await prisma.chief.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChiefUpdateArgs>(args: SelectSubset<T, ChiefUpdateArgs<ExtArgs>>): Prisma__ChiefClient<$Result.GetResult<Prisma.$ChiefPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Chiefs.
     * @param {ChiefDeleteManyArgs} args - Arguments to filter Chiefs to delete.
     * @example
     * // Delete a few Chiefs
     * const { count } = await prisma.chief.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChiefDeleteManyArgs>(args?: SelectSubset<T, ChiefDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chiefs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChiefUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chiefs
     * const chief = await prisma.chief.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChiefUpdateManyArgs>(args: SelectSubset<T, ChiefUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Chief.
     * @param {ChiefUpsertArgs} args - Arguments to update or create a Chief.
     * @example
     * // Update or create a Chief
     * const chief = await prisma.chief.upsert({
     *   create: {
     *     // ... data to create a Chief
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chief we want to update
     *   }
     * })
     */
    upsert<T extends ChiefUpsertArgs>(args: SelectSubset<T, ChiefUpsertArgs<ExtArgs>>): Prisma__ChiefClient<$Result.GetResult<Prisma.$ChiefPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Chiefs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChiefCountArgs} args - Arguments to filter Chiefs to count.
     * @example
     * // Count the number of Chiefs
     * const count = await prisma.chief.count({
     *   where: {
     *     // ... the filter for the Chiefs we want to count
     *   }
     * })
    **/
    count<T extends ChiefCountArgs>(
      args?: Subset<T, ChiefCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChiefCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chief.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChiefAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChiefAggregateArgs>(args: Subset<T, ChiefAggregateArgs>): Prisma.PrismaPromise<GetChiefAggregateType<T>>

    /**
     * Group by Chief.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChiefGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChiefGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChiefGroupByArgs['orderBy'] }
        : { orderBy?: ChiefGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChiefGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChiefGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Chief model
   */
  readonly fields: ChiefFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Chief.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChiefClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    dishes<T extends Chief$dishesArgs<ExtArgs> = {}>(args?: Subset<T, Chief$dishesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DishPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Chief model
   */ 
  interface ChiefFieldRefs {
    readonly id: FieldRef<"Chief", 'Int'>
    readonly name: FieldRef<"Chief", 'String'>
    readonly email: FieldRef<"Chief", 'String'>
    readonly password: FieldRef<"Chief", 'String'>
    readonly phoneNumber: FieldRef<"Chief", 'String'>
    readonly IDCard: FieldRef<"Chief", 'String[]'>
    readonly imageUrl: FieldRef<"Chief", 'String'>
    readonly createdAt: FieldRef<"Chief", 'DateTime'>
    readonly updatedAt: FieldRef<"Chief", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Chief findUnique
   */
  export type ChiefFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chief
     */
    select?: ChiefSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChiefInclude<ExtArgs> | null
    /**
     * Filter, which Chief to fetch.
     */
    where: ChiefWhereUniqueInput
  }

  /**
   * Chief findUniqueOrThrow
   */
  export type ChiefFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chief
     */
    select?: ChiefSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChiefInclude<ExtArgs> | null
    /**
     * Filter, which Chief to fetch.
     */
    where: ChiefWhereUniqueInput
  }

  /**
   * Chief findFirst
   */
  export type ChiefFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chief
     */
    select?: ChiefSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChiefInclude<ExtArgs> | null
    /**
     * Filter, which Chief to fetch.
     */
    where?: ChiefWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chiefs to fetch.
     */
    orderBy?: ChiefOrderByWithRelationInput | ChiefOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Chiefs.
     */
    cursor?: ChiefWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chiefs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chiefs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Chiefs.
     */
    distinct?: ChiefScalarFieldEnum | ChiefScalarFieldEnum[]
  }

  /**
   * Chief findFirstOrThrow
   */
  export type ChiefFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chief
     */
    select?: ChiefSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChiefInclude<ExtArgs> | null
    /**
     * Filter, which Chief to fetch.
     */
    where?: ChiefWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chiefs to fetch.
     */
    orderBy?: ChiefOrderByWithRelationInput | ChiefOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Chiefs.
     */
    cursor?: ChiefWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chiefs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chiefs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Chiefs.
     */
    distinct?: ChiefScalarFieldEnum | ChiefScalarFieldEnum[]
  }

  /**
   * Chief findMany
   */
  export type ChiefFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chief
     */
    select?: ChiefSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChiefInclude<ExtArgs> | null
    /**
     * Filter, which Chiefs to fetch.
     */
    where?: ChiefWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chiefs to fetch.
     */
    orderBy?: ChiefOrderByWithRelationInput | ChiefOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Chiefs.
     */
    cursor?: ChiefWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chiefs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chiefs.
     */
    skip?: number
    distinct?: ChiefScalarFieldEnum | ChiefScalarFieldEnum[]
  }

  /**
   * Chief create
   */
  export type ChiefCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chief
     */
    select?: ChiefSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChiefInclude<ExtArgs> | null
    /**
     * The data needed to create a Chief.
     */
    data: XOR<ChiefCreateInput, ChiefUncheckedCreateInput>
  }

  /**
   * Chief createMany
   */
  export type ChiefCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Chiefs.
     */
    data: ChiefCreateManyInput | ChiefCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Chief createManyAndReturn
   */
  export type ChiefCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chief
     */
    select?: ChiefSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Chiefs.
     */
    data: ChiefCreateManyInput | ChiefCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Chief update
   */
  export type ChiefUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chief
     */
    select?: ChiefSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChiefInclude<ExtArgs> | null
    /**
     * The data needed to update a Chief.
     */
    data: XOR<ChiefUpdateInput, ChiefUncheckedUpdateInput>
    /**
     * Choose, which Chief to update.
     */
    where: ChiefWhereUniqueInput
  }

  /**
   * Chief updateMany
   */
  export type ChiefUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Chiefs.
     */
    data: XOR<ChiefUpdateManyMutationInput, ChiefUncheckedUpdateManyInput>
    /**
     * Filter which Chiefs to update
     */
    where?: ChiefWhereInput
  }

  /**
   * Chief upsert
   */
  export type ChiefUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chief
     */
    select?: ChiefSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChiefInclude<ExtArgs> | null
    /**
     * The filter to search for the Chief to update in case it exists.
     */
    where: ChiefWhereUniqueInput
    /**
     * In case the Chief found by the `where` argument doesn't exist, create a new Chief with this data.
     */
    create: XOR<ChiefCreateInput, ChiefUncheckedCreateInput>
    /**
     * In case the Chief was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChiefUpdateInput, ChiefUncheckedUpdateInput>
  }

  /**
   * Chief delete
   */
  export type ChiefDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chief
     */
    select?: ChiefSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChiefInclude<ExtArgs> | null
    /**
     * Filter which Chief to delete.
     */
    where: ChiefWhereUniqueInput
  }

  /**
   * Chief deleteMany
   */
  export type ChiefDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Chiefs to delete
     */
    where?: ChiefWhereInput
  }

  /**
   * Chief.dishes
   */
  export type Chief$dishesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dish
     */
    select?: DishSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DishInclude<ExtArgs> | null
    where?: DishWhereInput
    orderBy?: DishOrderByWithRelationInput | DishOrderByWithRelationInput[]
    cursor?: DishWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DishScalarFieldEnum | DishScalarFieldEnum[]
  }

  /**
   * Chief without action
   */
  export type ChiefDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chief
     */
    select?: ChiefSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChiefInclude<ExtArgs> | null
  }


  /**
   * Model DeliveryBoy
   */

  export type AggregateDeliveryBoy = {
    _count: DeliveryBoyCountAggregateOutputType | null
    _avg: DeliveryBoyAvgAggregateOutputType | null
    _sum: DeliveryBoySumAggregateOutputType | null
    _min: DeliveryBoyMinAggregateOutputType | null
    _max: DeliveryBoyMaxAggregateOutputType | null
  }

  export type DeliveryBoyAvgAggregateOutputType = {
    id: number | null
  }

  export type DeliveryBoySumAggregateOutputType = {
    id: number | null
  }

  export type DeliveryBoyMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DeliveryBoyMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DeliveryBoyCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DeliveryBoyAvgAggregateInputType = {
    id?: true
  }

  export type DeliveryBoySumAggregateInputType = {
    id?: true
  }

  export type DeliveryBoyMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DeliveryBoyMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DeliveryBoyCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DeliveryBoyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DeliveryBoy to aggregate.
     */
    where?: DeliveryBoyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeliveryBoys to fetch.
     */
    orderBy?: DeliveryBoyOrderByWithRelationInput | DeliveryBoyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DeliveryBoyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeliveryBoys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeliveryBoys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DeliveryBoys
    **/
    _count?: true | DeliveryBoyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DeliveryBoyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DeliveryBoySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DeliveryBoyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DeliveryBoyMaxAggregateInputType
  }

  export type GetDeliveryBoyAggregateType<T extends DeliveryBoyAggregateArgs> = {
        [P in keyof T & keyof AggregateDeliveryBoy]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDeliveryBoy[P]>
      : GetScalarType<T[P], AggregateDeliveryBoy[P]>
  }




  export type DeliveryBoyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DeliveryBoyWhereInput
    orderBy?: DeliveryBoyOrderByWithAggregationInput | DeliveryBoyOrderByWithAggregationInput[]
    by: DeliveryBoyScalarFieldEnum[] | DeliveryBoyScalarFieldEnum
    having?: DeliveryBoyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DeliveryBoyCountAggregateInputType | true
    _avg?: DeliveryBoyAvgAggregateInputType
    _sum?: DeliveryBoySumAggregateInputType
    _min?: DeliveryBoyMinAggregateInputType
    _max?: DeliveryBoyMaxAggregateInputType
  }

  export type DeliveryBoyGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    _count: DeliveryBoyCountAggregateOutputType | null
    _avg: DeliveryBoyAvgAggregateOutputType | null
    _sum: DeliveryBoySumAggregateOutputType | null
    _min: DeliveryBoyMinAggregateOutputType | null
    _max: DeliveryBoyMaxAggregateOutputType | null
  }

  type GetDeliveryBoyGroupByPayload<T extends DeliveryBoyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DeliveryBoyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DeliveryBoyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DeliveryBoyGroupByOutputType[P]>
            : GetScalarType<T[P], DeliveryBoyGroupByOutputType[P]>
        }
      >
    >


  export type DeliveryBoySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    orders?: boolean | DeliveryBoy$ordersArgs<ExtArgs>
    _count?: boolean | DeliveryBoyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["deliveryBoy"]>

  export type DeliveryBoySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["deliveryBoy"]>

  export type DeliveryBoySelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DeliveryBoyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | DeliveryBoy$ordersArgs<ExtArgs>
    _count?: boolean | DeliveryBoyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DeliveryBoyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $DeliveryBoyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DeliveryBoy"
    objects: {
      orders: Prisma.$OrderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["deliveryBoy"]>
    composites: {}
  }

  type DeliveryBoyGetPayload<S extends boolean | null | undefined | DeliveryBoyDefaultArgs> = $Result.GetResult<Prisma.$DeliveryBoyPayload, S>

  type DeliveryBoyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DeliveryBoyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DeliveryBoyCountAggregateInputType | true
    }

  export interface DeliveryBoyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DeliveryBoy'], meta: { name: 'DeliveryBoy' } }
    /**
     * Find zero or one DeliveryBoy that matches the filter.
     * @param {DeliveryBoyFindUniqueArgs} args - Arguments to find a DeliveryBoy
     * @example
     * // Get one DeliveryBoy
     * const deliveryBoy = await prisma.deliveryBoy.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DeliveryBoyFindUniqueArgs>(args: SelectSubset<T, DeliveryBoyFindUniqueArgs<ExtArgs>>): Prisma__DeliveryBoyClient<$Result.GetResult<Prisma.$DeliveryBoyPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DeliveryBoy that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DeliveryBoyFindUniqueOrThrowArgs} args - Arguments to find a DeliveryBoy
     * @example
     * // Get one DeliveryBoy
     * const deliveryBoy = await prisma.deliveryBoy.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DeliveryBoyFindUniqueOrThrowArgs>(args: SelectSubset<T, DeliveryBoyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DeliveryBoyClient<$Result.GetResult<Prisma.$DeliveryBoyPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DeliveryBoy that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeliveryBoyFindFirstArgs} args - Arguments to find a DeliveryBoy
     * @example
     * // Get one DeliveryBoy
     * const deliveryBoy = await prisma.deliveryBoy.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DeliveryBoyFindFirstArgs>(args?: SelectSubset<T, DeliveryBoyFindFirstArgs<ExtArgs>>): Prisma__DeliveryBoyClient<$Result.GetResult<Prisma.$DeliveryBoyPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DeliveryBoy that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeliveryBoyFindFirstOrThrowArgs} args - Arguments to find a DeliveryBoy
     * @example
     * // Get one DeliveryBoy
     * const deliveryBoy = await prisma.deliveryBoy.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DeliveryBoyFindFirstOrThrowArgs>(args?: SelectSubset<T, DeliveryBoyFindFirstOrThrowArgs<ExtArgs>>): Prisma__DeliveryBoyClient<$Result.GetResult<Prisma.$DeliveryBoyPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DeliveryBoys that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeliveryBoyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DeliveryBoys
     * const deliveryBoys = await prisma.deliveryBoy.findMany()
     * 
     * // Get first 10 DeliveryBoys
     * const deliveryBoys = await prisma.deliveryBoy.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const deliveryBoyWithIdOnly = await prisma.deliveryBoy.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DeliveryBoyFindManyArgs>(args?: SelectSubset<T, DeliveryBoyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DeliveryBoyPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DeliveryBoy.
     * @param {DeliveryBoyCreateArgs} args - Arguments to create a DeliveryBoy.
     * @example
     * // Create one DeliveryBoy
     * const DeliveryBoy = await prisma.deliveryBoy.create({
     *   data: {
     *     // ... data to create a DeliveryBoy
     *   }
     * })
     * 
     */
    create<T extends DeliveryBoyCreateArgs>(args: SelectSubset<T, DeliveryBoyCreateArgs<ExtArgs>>): Prisma__DeliveryBoyClient<$Result.GetResult<Prisma.$DeliveryBoyPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DeliveryBoys.
     * @param {DeliveryBoyCreateManyArgs} args - Arguments to create many DeliveryBoys.
     * @example
     * // Create many DeliveryBoys
     * const deliveryBoy = await prisma.deliveryBoy.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DeliveryBoyCreateManyArgs>(args?: SelectSubset<T, DeliveryBoyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DeliveryBoys and returns the data saved in the database.
     * @param {DeliveryBoyCreateManyAndReturnArgs} args - Arguments to create many DeliveryBoys.
     * @example
     * // Create many DeliveryBoys
     * const deliveryBoy = await prisma.deliveryBoy.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DeliveryBoys and only return the `id`
     * const deliveryBoyWithIdOnly = await prisma.deliveryBoy.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DeliveryBoyCreateManyAndReturnArgs>(args?: SelectSubset<T, DeliveryBoyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DeliveryBoyPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DeliveryBoy.
     * @param {DeliveryBoyDeleteArgs} args - Arguments to delete one DeliveryBoy.
     * @example
     * // Delete one DeliveryBoy
     * const DeliveryBoy = await prisma.deliveryBoy.delete({
     *   where: {
     *     // ... filter to delete one DeliveryBoy
     *   }
     * })
     * 
     */
    delete<T extends DeliveryBoyDeleteArgs>(args: SelectSubset<T, DeliveryBoyDeleteArgs<ExtArgs>>): Prisma__DeliveryBoyClient<$Result.GetResult<Prisma.$DeliveryBoyPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DeliveryBoy.
     * @param {DeliveryBoyUpdateArgs} args - Arguments to update one DeliveryBoy.
     * @example
     * // Update one DeliveryBoy
     * const deliveryBoy = await prisma.deliveryBoy.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DeliveryBoyUpdateArgs>(args: SelectSubset<T, DeliveryBoyUpdateArgs<ExtArgs>>): Prisma__DeliveryBoyClient<$Result.GetResult<Prisma.$DeliveryBoyPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DeliveryBoys.
     * @param {DeliveryBoyDeleteManyArgs} args - Arguments to filter DeliveryBoys to delete.
     * @example
     * // Delete a few DeliveryBoys
     * const { count } = await prisma.deliveryBoy.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DeliveryBoyDeleteManyArgs>(args?: SelectSubset<T, DeliveryBoyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DeliveryBoys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeliveryBoyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DeliveryBoys
     * const deliveryBoy = await prisma.deliveryBoy.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DeliveryBoyUpdateManyArgs>(args: SelectSubset<T, DeliveryBoyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DeliveryBoy.
     * @param {DeliveryBoyUpsertArgs} args - Arguments to update or create a DeliveryBoy.
     * @example
     * // Update or create a DeliveryBoy
     * const deliveryBoy = await prisma.deliveryBoy.upsert({
     *   create: {
     *     // ... data to create a DeliveryBoy
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DeliveryBoy we want to update
     *   }
     * })
     */
    upsert<T extends DeliveryBoyUpsertArgs>(args: SelectSubset<T, DeliveryBoyUpsertArgs<ExtArgs>>): Prisma__DeliveryBoyClient<$Result.GetResult<Prisma.$DeliveryBoyPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DeliveryBoys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeliveryBoyCountArgs} args - Arguments to filter DeliveryBoys to count.
     * @example
     * // Count the number of DeliveryBoys
     * const count = await prisma.deliveryBoy.count({
     *   where: {
     *     // ... the filter for the DeliveryBoys we want to count
     *   }
     * })
    **/
    count<T extends DeliveryBoyCountArgs>(
      args?: Subset<T, DeliveryBoyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DeliveryBoyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DeliveryBoy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeliveryBoyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DeliveryBoyAggregateArgs>(args: Subset<T, DeliveryBoyAggregateArgs>): Prisma.PrismaPromise<GetDeliveryBoyAggregateType<T>>

    /**
     * Group by DeliveryBoy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeliveryBoyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DeliveryBoyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DeliveryBoyGroupByArgs['orderBy'] }
        : { orderBy?: DeliveryBoyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DeliveryBoyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDeliveryBoyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DeliveryBoy model
   */
  readonly fields: DeliveryBoyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DeliveryBoy.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DeliveryBoyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    orders<T extends DeliveryBoy$ordersArgs<ExtArgs> = {}>(args?: Subset<T, DeliveryBoy$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DeliveryBoy model
   */ 
  interface DeliveryBoyFieldRefs {
    readonly id: FieldRef<"DeliveryBoy", 'Int'>
    readonly createdAt: FieldRef<"DeliveryBoy", 'DateTime'>
    readonly updatedAt: FieldRef<"DeliveryBoy", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DeliveryBoy findUnique
   */
  export type DeliveryBoyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeliveryBoy
     */
    select?: DeliveryBoySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeliveryBoyInclude<ExtArgs> | null
    /**
     * Filter, which DeliveryBoy to fetch.
     */
    where: DeliveryBoyWhereUniqueInput
  }

  /**
   * DeliveryBoy findUniqueOrThrow
   */
  export type DeliveryBoyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeliveryBoy
     */
    select?: DeliveryBoySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeliveryBoyInclude<ExtArgs> | null
    /**
     * Filter, which DeliveryBoy to fetch.
     */
    where: DeliveryBoyWhereUniqueInput
  }

  /**
   * DeliveryBoy findFirst
   */
  export type DeliveryBoyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeliveryBoy
     */
    select?: DeliveryBoySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeliveryBoyInclude<ExtArgs> | null
    /**
     * Filter, which DeliveryBoy to fetch.
     */
    where?: DeliveryBoyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeliveryBoys to fetch.
     */
    orderBy?: DeliveryBoyOrderByWithRelationInput | DeliveryBoyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DeliveryBoys.
     */
    cursor?: DeliveryBoyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeliveryBoys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeliveryBoys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DeliveryBoys.
     */
    distinct?: DeliveryBoyScalarFieldEnum | DeliveryBoyScalarFieldEnum[]
  }

  /**
   * DeliveryBoy findFirstOrThrow
   */
  export type DeliveryBoyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeliveryBoy
     */
    select?: DeliveryBoySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeliveryBoyInclude<ExtArgs> | null
    /**
     * Filter, which DeliveryBoy to fetch.
     */
    where?: DeliveryBoyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeliveryBoys to fetch.
     */
    orderBy?: DeliveryBoyOrderByWithRelationInput | DeliveryBoyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DeliveryBoys.
     */
    cursor?: DeliveryBoyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeliveryBoys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeliveryBoys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DeliveryBoys.
     */
    distinct?: DeliveryBoyScalarFieldEnum | DeliveryBoyScalarFieldEnum[]
  }

  /**
   * DeliveryBoy findMany
   */
  export type DeliveryBoyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeliveryBoy
     */
    select?: DeliveryBoySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeliveryBoyInclude<ExtArgs> | null
    /**
     * Filter, which DeliveryBoys to fetch.
     */
    where?: DeliveryBoyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeliveryBoys to fetch.
     */
    orderBy?: DeliveryBoyOrderByWithRelationInput | DeliveryBoyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DeliveryBoys.
     */
    cursor?: DeliveryBoyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeliveryBoys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeliveryBoys.
     */
    skip?: number
    distinct?: DeliveryBoyScalarFieldEnum | DeliveryBoyScalarFieldEnum[]
  }

  /**
   * DeliveryBoy create
   */
  export type DeliveryBoyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeliveryBoy
     */
    select?: DeliveryBoySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeliveryBoyInclude<ExtArgs> | null
    /**
     * The data needed to create a DeliveryBoy.
     */
    data: XOR<DeliveryBoyCreateInput, DeliveryBoyUncheckedCreateInput>
  }

  /**
   * DeliveryBoy createMany
   */
  export type DeliveryBoyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DeliveryBoys.
     */
    data: DeliveryBoyCreateManyInput | DeliveryBoyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DeliveryBoy createManyAndReturn
   */
  export type DeliveryBoyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeliveryBoy
     */
    select?: DeliveryBoySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DeliveryBoys.
     */
    data: DeliveryBoyCreateManyInput | DeliveryBoyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DeliveryBoy update
   */
  export type DeliveryBoyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeliveryBoy
     */
    select?: DeliveryBoySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeliveryBoyInclude<ExtArgs> | null
    /**
     * The data needed to update a DeliveryBoy.
     */
    data: XOR<DeliveryBoyUpdateInput, DeliveryBoyUncheckedUpdateInput>
    /**
     * Choose, which DeliveryBoy to update.
     */
    where: DeliveryBoyWhereUniqueInput
  }

  /**
   * DeliveryBoy updateMany
   */
  export type DeliveryBoyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DeliveryBoys.
     */
    data: XOR<DeliveryBoyUpdateManyMutationInput, DeliveryBoyUncheckedUpdateManyInput>
    /**
     * Filter which DeliveryBoys to update
     */
    where?: DeliveryBoyWhereInput
  }

  /**
   * DeliveryBoy upsert
   */
  export type DeliveryBoyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeliveryBoy
     */
    select?: DeliveryBoySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeliveryBoyInclude<ExtArgs> | null
    /**
     * The filter to search for the DeliveryBoy to update in case it exists.
     */
    where: DeliveryBoyWhereUniqueInput
    /**
     * In case the DeliveryBoy found by the `where` argument doesn't exist, create a new DeliveryBoy with this data.
     */
    create: XOR<DeliveryBoyCreateInput, DeliveryBoyUncheckedCreateInput>
    /**
     * In case the DeliveryBoy was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DeliveryBoyUpdateInput, DeliveryBoyUncheckedUpdateInput>
  }

  /**
   * DeliveryBoy delete
   */
  export type DeliveryBoyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeliveryBoy
     */
    select?: DeliveryBoySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeliveryBoyInclude<ExtArgs> | null
    /**
     * Filter which DeliveryBoy to delete.
     */
    where: DeliveryBoyWhereUniqueInput
  }

  /**
   * DeliveryBoy deleteMany
   */
  export type DeliveryBoyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DeliveryBoys to delete
     */
    where?: DeliveryBoyWhereInput
  }

  /**
   * DeliveryBoy.orders
   */
  export type DeliveryBoy$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * DeliveryBoy without action
   */
  export type DeliveryBoyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeliveryBoy
     */
    select?: DeliveryBoySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeliveryBoyInclude<ExtArgs> | null
  }


  /**
   * Model Dish
   */

  export type AggregateDish = {
    _count: DishCountAggregateOutputType | null
    _avg: DishAvgAggregateOutputType | null
    _sum: DishSumAggregateOutputType | null
    _min: DishMinAggregateOutputType | null
    _max: DishMaxAggregateOutputType | null
  }

  export type DishAvgAggregateOutputType = {
    id: number | null
    price: number | null
    duration: number | null
    ChiefId: number | null
  }

  export type DishSumAggregateOutputType = {
    id: number | null
    price: number | null
    duration: number | null
    ChiefId: number | null
  }

  export type DishMinAggregateOutputType = {
    id: number | null
    title: string | null
    category: string | null
    description: string | null
    price: number | null
    duration: number | null
    ChiefId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DishMaxAggregateOutputType = {
    id: number | null
    title: string | null
    category: string | null
    description: string | null
    price: number | null
    duration: number | null
    ChiefId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DishCountAggregateOutputType = {
    id: number
    title: number
    category: number
    description: number
    price: number
    imageUrl: number
    duration: number
    ChiefId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DishAvgAggregateInputType = {
    id?: true
    price?: true
    duration?: true
    ChiefId?: true
  }

  export type DishSumAggregateInputType = {
    id?: true
    price?: true
    duration?: true
    ChiefId?: true
  }

  export type DishMinAggregateInputType = {
    id?: true
    title?: true
    category?: true
    description?: true
    price?: true
    duration?: true
    ChiefId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DishMaxAggregateInputType = {
    id?: true
    title?: true
    category?: true
    description?: true
    price?: true
    duration?: true
    ChiefId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DishCountAggregateInputType = {
    id?: true
    title?: true
    category?: true
    description?: true
    price?: true
    imageUrl?: true
    duration?: true
    ChiefId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DishAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Dish to aggregate.
     */
    where?: DishWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dishes to fetch.
     */
    orderBy?: DishOrderByWithRelationInput | DishOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DishWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dishes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dishes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Dishes
    **/
    _count?: true | DishCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DishAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DishSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DishMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DishMaxAggregateInputType
  }

  export type GetDishAggregateType<T extends DishAggregateArgs> = {
        [P in keyof T & keyof AggregateDish]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDish[P]>
      : GetScalarType<T[P], AggregateDish[P]>
  }




  export type DishGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DishWhereInput
    orderBy?: DishOrderByWithAggregationInput | DishOrderByWithAggregationInput[]
    by: DishScalarFieldEnum[] | DishScalarFieldEnum
    having?: DishScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DishCountAggregateInputType | true
    _avg?: DishAvgAggregateInputType
    _sum?: DishSumAggregateInputType
    _min?: DishMinAggregateInputType
    _max?: DishMaxAggregateInputType
  }

  export type DishGroupByOutputType = {
    id: number
    title: string
    category: string
    description: string
    price: number
    imageUrl: string[]
    duration: number
    ChiefId: number
    createdAt: Date
    updatedAt: Date
    _count: DishCountAggregateOutputType | null
    _avg: DishAvgAggregateOutputType | null
    _sum: DishSumAggregateOutputType | null
    _min: DishMinAggregateOutputType | null
    _max: DishMaxAggregateOutputType | null
  }

  type GetDishGroupByPayload<T extends DishGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DishGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DishGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DishGroupByOutputType[P]>
            : GetScalarType<T[P], DishGroupByOutputType[P]>
        }
      >
    >


  export type DishSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    category?: boolean
    description?: boolean
    price?: boolean
    imageUrl?: boolean
    duration?: boolean
    ChiefId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Chiefs?: boolean | ChiefDefaultArgs<ExtArgs>
    ratings?: boolean | Dish$ratingsArgs<ExtArgs>
    Orders?: boolean | Dish$OrdersArgs<ExtArgs>
    dishFavorite?: boolean | Dish$dishFavoriteArgs<ExtArgs>
    ingDishes?: boolean | Dish$ingDishesArgs<ExtArgs>
    _count?: boolean | DishCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dish"]>

  export type DishSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    category?: boolean
    description?: boolean
    price?: boolean
    imageUrl?: boolean
    duration?: boolean
    ChiefId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Chiefs?: boolean | ChiefDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dish"]>

  export type DishSelectScalar = {
    id?: boolean
    title?: boolean
    category?: boolean
    description?: boolean
    price?: boolean
    imageUrl?: boolean
    duration?: boolean
    ChiefId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DishInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Chiefs?: boolean | ChiefDefaultArgs<ExtArgs>
    ratings?: boolean | Dish$ratingsArgs<ExtArgs>
    Orders?: boolean | Dish$OrdersArgs<ExtArgs>
    dishFavorite?: boolean | Dish$dishFavoriteArgs<ExtArgs>
    ingDishes?: boolean | Dish$ingDishesArgs<ExtArgs>
    _count?: boolean | DishCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DishIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Chiefs?: boolean | ChiefDefaultArgs<ExtArgs>
  }

  export type $DishPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Dish"
    objects: {
      Chiefs: Prisma.$ChiefPayload<ExtArgs>
      ratings: Prisma.$DishRatingPayload<ExtArgs>[]
      Orders: Prisma.$OrderPayload<ExtArgs>[]
      dishFavorite: Prisma.$ClientPayload<ExtArgs>[]
      ingDishes: Prisma.$IngDishPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      category: string
      description: string
      price: number
      imageUrl: string[]
      duration: number
      ChiefId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["dish"]>
    composites: {}
  }

  type DishGetPayload<S extends boolean | null | undefined | DishDefaultArgs> = $Result.GetResult<Prisma.$DishPayload, S>

  type DishCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DishFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DishCountAggregateInputType | true
    }

  export interface DishDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Dish'], meta: { name: 'Dish' } }
    /**
     * Find zero or one Dish that matches the filter.
     * @param {DishFindUniqueArgs} args - Arguments to find a Dish
     * @example
     * // Get one Dish
     * const dish = await prisma.dish.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DishFindUniqueArgs>(args: SelectSubset<T, DishFindUniqueArgs<ExtArgs>>): Prisma__DishClient<$Result.GetResult<Prisma.$DishPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Dish that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DishFindUniqueOrThrowArgs} args - Arguments to find a Dish
     * @example
     * // Get one Dish
     * const dish = await prisma.dish.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DishFindUniqueOrThrowArgs>(args: SelectSubset<T, DishFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DishClient<$Result.GetResult<Prisma.$DishPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Dish that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DishFindFirstArgs} args - Arguments to find a Dish
     * @example
     * // Get one Dish
     * const dish = await prisma.dish.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DishFindFirstArgs>(args?: SelectSubset<T, DishFindFirstArgs<ExtArgs>>): Prisma__DishClient<$Result.GetResult<Prisma.$DishPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Dish that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DishFindFirstOrThrowArgs} args - Arguments to find a Dish
     * @example
     * // Get one Dish
     * const dish = await prisma.dish.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DishFindFirstOrThrowArgs>(args?: SelectSubset<T, DishFindFirstOrThrowArgs<ExtArgs>>): Prisma__DishClient<$Result.GetResult<Prisma.$DishPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Dishes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DishFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Dishes
     * const dishes = await prisma.dish.findMany()
     * 
     * // Get first 10 Dishes
     * const dishes = await prisma.dish.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dishWithIdOnly = await prisma.dish.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DishFindManyArgs>(args?: SelectSubset<T, DishFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DishPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Dish.
     * @param {DishCreateArgs} args - Arguments to create a Dish.
     * @example
     * // Create one Dish
     * const Dish = await prisma.dish.create({
     *   data: {
     *     // ... data to create a Dish
     *   }
     * })
     * 
     */
    create<T extends DishCreateArgs>(args: SelectSubset<T, DishCreateArgs<ExtArgs>>): Prisma__DishClient<$Result.GetResult<Prisma.$DishPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Dishes.
     * @param {DishCreateManyArgs} args - Arguments to create many Dishes.
     * @example
     * // Create many Dishes
     * const dish = await prisma.dish.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DishCreateManyArgs>(args?: SelectSubset<T, DishCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Dishes and returns the data saved in the database.
     * @param {DishCreateManyAndReturnArgs} args - Arguments to create many Dishes.
     * @example
     * // Create many Dishes
     * const dish = await prisma.dish.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Dishes and only return the `id`
     * const dishWithIdOnly = await prisma.dish.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DishCreateManyAndReturnArgs>(args?: SelectSubset<T, DishCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DishPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Dish.
     * @param {DishDeleteArgs} args - Arguments to delete one Dish.
     * @example
     * // Delete one Dish
     * const Dish = await prisma.dish.delete({
     *   where: {
     *     // ... filter to delete one Dish
     *   }
     * })
     * 
     */
    delete<T extends DishDeleteArgs>(args: SelectSubset<T, DishDeleteArgs<ExtArgs>>): Prisma__DishClient<$Result.GetResult<Prisma.$DishPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Dish.
     * @param {DishUpdateArgs} args - Arguments to update one Dish.
     * @example
     * // Update one Dish
     * const dish = await prisma.dish.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DishUpdateArgs>(args: SelectSubset<T, DishUpdateArgs<ExtArgs>>): Prisma__DishClient<$Result.GetResult<Prisma.$DishPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Dishes.
     * @param {DishDeleteManyArgs} args - Arguments to filter Dishes to delete.
     * @example
     * // Delete a few Dishes
     * const { count } = await prisma.dish.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DishDeleteManyArgs>(args?: SelectSubset<T, DishDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Dishes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DishUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Dishes
     * const dish = await prisma.dish.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DishUpdateManyArgs>(args: SelectSubset<T, DishUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Dish.
     * @param {DishUpsertArgs} args - Arguments to update or create a Dish.
     * @example
     * // Update or create a Dish
     * const dish = await prisma.dish.upsert({
     *   create: {
     *     // ... data to create a Dish
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Dish we want to update
     *   }
     * })
     */
    upsert<T extends DishUpsertArgs>(args: SelectSubset<T, DishUpsertArgs<ExtArgs>>): Prisma__DishClient<$Result.GetResult<Prisma.$DishPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Dishes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DishCountArgs} args - Arguments to filter Dishes to count.
     * @example
     * // Count the number of Dishes
     * const count = await prisma.dish.count({
     *   where: {
     *     // ... the filter for the Dishes we want to count
     *   }
     * })
    **/
    count<T extends DishCountArgs>(
      args?: Subset<T, DishCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DishCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Dish.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DishAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DishAggregateArgs>(args: Subset<T, DishAggregateArgs>): Prisma.PrismaPromise<GetDishAggregateType<T>>

    /**
     * Group by Dish.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DishGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DishGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DishGroupByArgs['orderBy'] }
        : { orderBy?: DishGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DishGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDishGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Dish model
   */
  readonly fields: DishFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Dish.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DishClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Chiefs<T extends ChiefDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChiefDefaultArgs<ExtArgs>>): Prisma__ChiefClient<$Result.GetResult<Prisma.$ChiefPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    ratings<T extends Dish$ratingsArgs<ExtArgs> = {}>(args?: Subset<T, Dish$ratingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DishRatingPayload<ExtArgs>, T, "findMany"> | Null>
    Orders<T extends Dish$OrdersArgs<ExtArgs> = {}>(args?: Subset<T, Dish$OrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany"> | Null>
    dishFavorite<T extends Dish$dishFavoriteArgs<ExtArgs> = {}>(args?: Subset<T, Dish$dishFavoriteArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findMany"> | Null>
    ingDishes<T extends Dish$ingDishesArgs<ExtArgs> = {}>(args?: Subset<T, Dish$ingDishesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IngDishPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Dish model
   */ 
  interface DishFieldRefs {
    readonly id: FieldRef<"Dish", 'Int'>
    readonly title: FieldRef<"Dish", 'String'>
    readonly category: FieldRef<"Dish", 'String'>
    readonly description: FieldRef<"Dish", 'String'>
    readonly price: FieldRef<"Dish", 'Float'>
    readonly imageUrl: FieldRef<"Dish", 'String[]'>
    readonly duration: FieldRef<"Dish", 'Float'>
    readonly ChiefId: FieldRef<"Dish", 'Int'>
    readonly createdAt: FieldRef<"Dish", 'DateTime'>
    readonly updatedAt: FieldRef<"Dish", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Dish findUnique
   */
  export type DishFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dish
     */
    select?: DishSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DishInclude<ExtArgs> | null
    /**
     * Filter, which Dish to fetch.
     */
    where: DishWhereUniqueInput
  }

  /**
   * Dish findUniqueOrThrow
   */
  export type DishFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dish
     */
    select?: DishSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DishInclude<ExtArgs> | null
    /**
     * Filter, which Dish to fetch.
     */
    where: DishWhereUniqueInput
  }

  /**
   * Dish findFirst
   */
  export type DishFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dish
     */
    select?: DishSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DishInclude<ExtArgs> | null
    /**
     * Filter, which Dish to fetch.
     */
    where?: DishWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dishes to fetch.
     */
    orderBy?: DishOrderByWithRelationInput | DishOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Dishes.
     */
    cursor?: DishWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dishes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dishes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Dishes.
     */
    distinct?: DishScalarFieldEnum | DishScalarFieldEnum[]
  }

  /**
   * Dish findFirstOrThrow
   */
  export type DishFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dish
     */
    select?: DishSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DishInclude<ExtArgs> | null
    /**
     * Filter, which Dish to fetch.
     */
    where?: DishWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dishes to fetch.
     */
    orderBy?: DishOrderByWithRelationInput | DishOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Dishes.
     */
    cursor?: DishWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dishes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dishes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Dishes.
     */
    distinct?: DishScalarFieldEnum | DishScalarFieldEnum[]
  }

  /**
   * Dish findMany
   */
  export type DishFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dish
     */
    select?: DishSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DishInclude<ExtArgs> | null
    /**
     * Filter, which Dishes to fetch.
     */
    where?: DishWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dishes to fetch.
     */
    orderBy?: DishOrderByWithRelationInput | DishOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Dishes.
     */
    cursor?: DishWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dishes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dishes.
     */
    skip?: number
    distinct?: DishScalarFieldEnum | DishScalarFieldEnum[]
  }

  /**
   * Dish create
   */
  export type DishCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dish
     */
    select?: DishSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DishInclude<ExtArgs> | null
    /**
     * The data needed to create a Dish.
     */
    data: XOR<DishCreateInput, DishUncheckedCreateInput>
  }

  /**
   * Dish createMany
   */
  export type DishCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Dishes.
     */
    data: DishCreateManyInput | DishCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Dish createManyAndReturn
   */
  export type DishCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dish
     */
    select?: DishSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Dishes.
     */
    data: DishCreateManyInput | DishCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DishIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Dish update
   */
  export type DishUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dish
     */
    select?: DishSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DishInclude<ExtArgs> | null
    /**
     * The data needed to update a Dish.
     */
    data: XOR<DishUpdateInput, DishUncheckedUpdateInput>
    /**
     * Choose, which Dish to update.
     */
    where: DishWhereUniqueInput
  }

  /**
   * Dish updateMany
   */
  export type DishUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Dishes.
     */
    data: XOR<DishUpdateManyMutationInput, DishUncheckedUpdateManyInput>
    /**
     * Filter which Dishes to update
     */
    where?: DishWhereInput
  }

  /**
   * Dish upsert
   */
  export type DishUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dish
     */
    select?: DishSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DishInclude<ExtArgs> | null
    /**
     * The filter to search for the Dish to update in case it exists.
     */
    where: DishWhereUniqueInput
    /**
     * In case the Dish found by the `where` argument doesn't exist, create a new Dish with this data.
     */
    create: XOR<DishCreateInput, DishUncheckedCreateInput>
    /**
     * In case the Dish was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DishUpdateInput, DishUncheckedUpdateInput>
  }

  /**
   * Dish delete
   */
  export type DishDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dish
     */
    select?: DishSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DishInclude<ExtArgs> | null
    /**
     * Filter which Dish to delete.
     */
    where: DishWhereUniqueInput
  }

  /**
   * Dish deleteMany
   */
  export type DishDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Dishes to delete
     */
    where?: DishWhereInput
  }

  /**
   * Dish.ratings
   */
  export type Dish$ratingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DishRating
     */
    select?: DishRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DishRatingInclude<ExtArgs> | null
    where?: DishRatingWhereInput
    orderBy?: DishRatingOrderByWithRelationInput | DishRatingOrderByWithRelationInput[]
    cursor?: DishRatingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DishRatingScalarFieldEnum | DishRatingScalarFieldEnum[]
  }

  /**
   * Dish.Orders
   */
  export type Dish$OrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Dish.dishFavorite
   */
  export type Dish$dishFavoriteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    where?: ClientWhereInput
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    cursor?: ClientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * Dish.ingDishes
   */
  export type Dish$ingDishesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IngDish
     */
    select?: IngDishSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngDishInclude<ExtArgs> | null
    where?: IngDishWhereInput
    orderBy?: IngDishOrderByWithRelationInput | IngDishOrderByWithRelationInput[]
    cursor?: IngDishWhereUniqueInput
    take?: number
    skip?: number
    distinct?: IngDishScalarFieldEnum | IngDishScalarFieldEnum[]
  }

  /**
   * Dish without action
   */
  export type DishDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dish
     */
    select?: DishSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DishInclude<ExtArgs> | null
  }


  /**
   * Model Ingredients
   */

  export type AggregateIngredients = {
    _count: IngredientsCountAggregateOutputType | null
    _avg: IngredientsAvgAggregateOutputType | null
    _sum: IngredientsSumAggregateOutputType | null
    _min: IngredientsMinAggregateOutputType | null
    _max: IngredientsMaxAggregateOutputType | null
  }

  export type IngredientsAvgAggregateOutputType = {
    id: number | null
    price: number | null
  }

  export type IngredientsSumAggregateOutputType = {
    id: number | null
    price: number | null
  }

  export type IngredientsMinAggregateOutputType = {
    id: number | null
    name: string | null
    price: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type IngredientsMaxAggregateOutputType = {
    id: number | null
    name: string | null
    price: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type IngredientsCountAggregateOutputType = {
    id: number
    name: number
    price: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type IngredientsAvgAggregateInputType = {
    id?: true
    price?: true
  }

  export type IngredientsSumAggregateInputType = {
    id?: true
    price?: true
  }

  export type IngredientsMinAggregateInputType = {
    id?: true
    name?: true
    price?: true
    createdAt?: true
    updatedAt?: true
  }

  export type IngredientsMaxAggregateInputType = {
    id?: true
    name?: true
    price?: true
    createdAt?: true
    updatedAt?: true
  }

  export type IngredientsCountAggregateInputType = {
    id?: true
    name?: true
    price?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type IngredientsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ingredients to aggregate.
     */
    where?: IngredientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ingredients to fetch.
     */
    orderBy?: IngredientsOrderByWithRelationInput | IngredientsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: IngredientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ingredients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ingredients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ingredients
    **/
    _count?: true | IngredientsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: IngredientsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: IngredientsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IngredientsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IngredientsMaxAggregateInputType
  }

  export type GetIngredientsAggregateType<T extends IngredientsAggregateArgs> = {
        [P in keyof T & keyof AggregateIngredients]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIngredients[P]>
      : GetScalarType<T[P], AggregateIngredients[P]>
  }




  export type IngredientsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IngredientsWhereInput
    orderBy?: IngredientsOrderByWithAggregationInput | IngredientsOrderByWithAggregationInput[]
    by: IngredientsScalarFieldEnum[] | IngredientsScalarFieldEnum
    having?: IngredientsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IngredientsCountAggregateInputType | true
    _avg?: IngredientsAvgAggregateInputType
    _sum?: IngredientsSumAggregateInputType
    _min?: IngredientsMinAggregateInputType
    _max?: IngredientsMaxAggregateInputType
  }

  export type IngredientsGroupByOutputType = {
    id: number
    name: string
    price: number
    createdAt: Date
    updatedAt: Date
    _count: IngredientsCountAggregateOutputType | null
    _avg: IngredientsAvgAggregateOutputType | null
    _sum: IngredientsSumAggregateOutputType | null
    _min: IngredientsMinAggregateOutputType | null
    _max: IngredientsMaxAggregateOutputType | null
  }

  type GetIngredientsGroupByPayload<T extends IngredientsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<IngredientsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IngredientsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IngredientsGroupByOutputType[P]>
            : GetScalarType<T[P], IngredientsGroupByOutputType[P]>
        }
      >
    >


  export type IngredientsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    price?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ingDishes?: boolean | Ingredients$ingDishesArgs<ExtArgs>
    _count?: boolean | IngredientsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ingredients"]>

  export type IngredientsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    price?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["ingredients"]>

  export type IngredientsSelectScalar = {
    id?: boolean
    name?: boolean
    price?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type IngredientsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ingDishes?: boolean | Ingredients$ingDishesArgs<ExtArgs>
    _count?: boolean | IngredientsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type IngredientsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $IngredientsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Ingredients"
    objects: {
      ingDishes: Prisma.$IngDishPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      price: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["ingredients"]>
    composites: {}
  }

  type IngredientsGetPayload<S extends boolean | null | undefined | IngredientsDefaultArgs> = $Result.GetResult<Prisma.$IngredientsPayload, S>

  type IngredientsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<IngredientsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: IngredientsCountAggregateInputType | true
    }

  export interface IngredientsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Ingredients'], meta: { name: 'Ingredients' } }
    /**
     * Find zero or one Ingredients that matches the filter.
     * @param {IngredientsFindUniqueArgs} args - Arguments to find a Ingredients
     * @example
     * // Get one Ingredients
     * const ingredients = await prisma.ingredients.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends IngredientsFindUniqueArgs>(args: SelectSubset<T, IngredientsFindUniqueArgs<ExtArgs>>): Prisma__IngredientsClient<$Result.GetResult<Prisma.$IngredientsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Ingredients that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {IngredientsFindUniqueOrThrowArgs} args - Arguments to find a Ingredients
     * @example
     * // Get one Ingredients
     * const ingredients = await prisma.ingredients.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends IngredientsFindUniqueOrThrowArgs>(args: SelectSubset<T, IngredientsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__IngredientsClient<$Result.GetResult<Prisma.$IngredientsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Ingredients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientsFindFirstArgs} args - Arguments to find a Ingredients
     * @example
     * // Get one Ingredients
     * const ingredients = await prisma.ingredients.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends IngredientsFindFirstArgs>(args?: SelectSubset<T, IngredientsFindFirstArgs<ExtArgs>>): Prisma__IngredientsClient<$Result.GetResult<Prisma.$IngredientsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Ingredients that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientsFindFirstOrThrowArgs} args - Arguments to find a Ingredients
     * @example
     * // Get one Ingredients
     * const ingredients = await prisma.ingredients.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends IngredientsFindFirstOrThrowArgs>(args?: SelectSubset<T, IngredientsFindFirstOrThrowArgs<ExtArgs>>): Prisma__IngredientsClient<$Result.GetResult<Prisma.$IngredientsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Ingredients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ingredients
     * const ingredients = await prisma.ingredients.findMany()
     * 
     * // Get first 10 Ingredients
     * const ingredients = await prisma.ingredients.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ingredientsWithIdOnly = await prisma.ingredients.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends IngredientsFindManyArgs>(args?: SelectSubset<T, IngredientsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IngredientsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Ingredients.
     * @param {IngredientsCreateArgs} args - Arguments to create a Ingredients.
     * @example
     * // Create one Ingredients
     * const Ingredients = await prisma.ingredients.create({
     *   data: {
     *     // ... data to create a Ingredients
     *   }
     * })
     * 
     */
    create<T extends IngredientsCreateArgs>(args: SelectSubset<T, IngredientsCreateArgs<ExtArgs>>): Prisma__IngredientsClient<$Result.GetResult<Prisma.$IngredientsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Ingredients.
     * @param {IngredientsCreateManyArgs} args - Arguments to create many Ingredients.
     * @example
     * // Create many Ingredients
     * const ingredients = await prisma.ingredients.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends IngredientsCreateManyArgs>(args?: SelectSubset<T, IngredientsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Ingredients and returns the data saved in the database.
     * @param {IngredientsCreateManyAndReturnArgs} args - Arguments to create many Ingredients.
     * @example
     * // Create many Ingredients
     * const ingredients = await prisma.ingredients.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Ingredients and only return the `id`
     * const ingredientsWithIdOnly = await prisma.ingredients.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends IngredientsCreateManyAndReturnArgs>(args?: SelectSubset<T, IngredientsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IngredientsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Ingredients.
     * @param {IngredientsDeleteArgs} args - Arguments to delete one Ingredients.
     * @example
     * // Delete one Ingredients
     * const Ingredients = await prisma.ingredients.delete({
     *   where: {
     *     // ... filter to delete one Ingredients
     *   }
     * })
     * 
     */
    delete<T extends IngredientsDeleteArgs>(args: SelectSubset<T, IngredientsDeleteArgs<ExtArgs>>): Prisma__IngredientsClient<$Result.GetResult<Prisma.$IngredientsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Ingredients.
     * @param {IngredientsUpdateArgs} args - Arguments to update one Ingredients.
     * @example
     * // Update one Ingredients
     * const ingredients = await prisma.ingredients.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends IngredientsUpdateArgs>(args: SelectSubset<T, IngredientsUpdateArgs<ExtArgs>>): Prisma__IngredientsClient<$Result.GetResult<Prisma.$IngredientsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Ingredients.
     * @param {IngredientsDeleteManyArgs} args - Arguments to filter Ingredients to delete.
     * @example
     * // Delete a few Ingredients
     * const { count } = await prisma.ingredients.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends IngredientsDeleteManyArgs>(args?: SelectSubset<T, IngredientsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ingredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ingredients
     * const ingredients = await prisma.ingredients.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends IngredientsUpdateManyArgs>(args: SelectSubset<T, IngredientsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Ingredients.
     * @param {IngredientsUpsertArgs} args - Arguments to update or create a Ingredients.
     * @example
     * // Update or create a Ingredients
     * const ingredients = await prisma.ingredients.upsert({
     *   create: {
     *     // ... data to create a Ingredients
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ingredients we want to update
     *   }
     * })
     */
    upsert<T extends IngredientsUpsertArgs>(args: SelectSubset<T, IngredientsUpsertArgs<ExtArgs>>): Prisma__IngredientsClient<$Result.GetResult<Prisma.$IngredientsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Ingredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientsCountArgs} args - Arguments to filter Ingredients to count.
     * @example
     * // Count the number of Ingredients
     * const count = await prisma.ingredients.count({
     *   where: {
     *     // ... the filter for the Ingredients we want to count
     *   }
     * })
    **/
    count<T extends IngredientsCountArgs>(
      args?: Subset<T, IngredientsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IngredientsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ingredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IngredientsAggregateArgs>(args: Subset<T, IngredientsAggregateArgs>): Prisma.PrismaPromise<GetIngredientsAggregateType<T>>

    /**
     * Group by Ingredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IngredientsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IngredientsGroupByArgs['orderBy'] }
        : { orderBy?: IngredientsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IngredientsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIngredientsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Ingredients model
   */
  readonly fields: IngredientsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Ingredients.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__IngredientsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ingDishes<T extends Ingredients$ingDishesArgs<ExtArgs> = {}>(args?: Subset<T, Ingredients$ingDishesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IngDishPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Ingredients model
   */ 
  interface IngredientsFieldRefs {
    readonly id: FieldRef<"Ingredients", 'Int'>
    readonly name: FieldRef<"Ingredients", 'String'>
    readonly price: FieldRef<"Ingredients", 'Float'>
    readonly createdAt: FieldRef<"Ingredients", 'DateTime'>
    readonly updatedAt: FieldRef<"Ingredients", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Ingredients findUnique
   */
  export type IngredientsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredients
     */
    select?: IngredientsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientsInclude<ExtArgs> | null
    /**
     * Filter, which Ingredients to fetch.
     */
    where: IngredientsWhereUniqueInput
  }

  /**
   * Ingredients findUniqueOrThrow
   */
  export type IngredientsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredients
     */
    select?: IngredientsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientsInclude<ExtArgs> | null
    /**
     * Filter, which Ingredients to fetch.
     */
    where: IngredientsWhereUniqueInput
  }

  /**
   * Ingredients findFirst
   */
  export type IngredientsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredients
     */
    select?: IngredientsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientsInclude<ExtArgs> | null
    /**
     * Filter, which Ingredients to fetch.
     */
    where?: IngredientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ingredients to fetch.
     */
    orderBy?: IngredientsOrderByWithRelationInput | IngredientsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ingredients.
     */
    cursor?: IngredientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ingredients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ingredients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ingredients.
     */
    distinct?: IngredientsScalarFieldEnum | IngredientsScalarFieldEnum[]
  }

  /**
   * Ingredients findFirstOrThrow
   */
  export type IngredientsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredients
     */
    select?: IngredientsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientsInclude<ExtArgs> | null
    /**
     * Filter, which Ingredients to fetch.
     */
    where?: IngredientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ingredients to fetch.
     */
    orderBy?: IngredientsOrderByWithRelationInput | IngredientsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ingredients.
     */
    cursor?: IngredientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ingredients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ingredients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ingredients.
     */
    distinct?: IngredientsScalarFieldEnum | IngredientsScalarFieldEnum[]
  }

  /**
   * Ingredients findMany
   */
  export type IngredientsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredients
     */
    select?: IngredientsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientsInclude<ExtArgs> | null
    /**
     * Filter, which Ingredients to fetch.
     */
    where?: IngredientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ingredients to fetch.
     */
    orderBy?: IngredientsOrderByWithRelationInput | IngredientsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ingredients.
     */
    cursor?: IngredientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ingredients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ingredients.
     */
    skip?: number
    distinct?: IngredientsScalarFieldEnum | IngredientsScalarFieldEnum[]
  }

  /**
   * Ingredients create
   */
  export type IngredientsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredients
     */
    select?: IngredientsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientsInclude<ExtArgs> | null
    /**
     * The data needed to create a Ingredients.
     */
    data: XOR<IngredientsCreateInput, IngredientsUncheckedCreateInput>
  }

  /**
   * Ingredients createMany
   */
  export type IngredientsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Ingredients.
     */
    data: IngredientsCreateManyInput | IngredientsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Ingredients createManyAndReturn
   */
  export type IngredientsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredients
     */
    select?: IngredientsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Ingredients.
     */
    data: IngredientsCreateManyInput | IngredientsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Ingredients update
   */
  export type IngredientsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredients
     */
    select?: IngredientsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientsInclude<ExtArgs> | null
    /**
     * The data needed to update a Ingredients.
     */
    data: XOR<IngredientsUpdateInput, IngredientsUncheckedUpdateInput>
    /**
     * Choose, which Ingredients to update.
     */
    where: IngredientsWhereUniqueInput
  }

  /**
   * Ingredients updateMany
   */
  export type IngredientsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ingredients.
     */
    data: XOR<IngredientsUpdateManyMutationInput, IngredientsUncheckedUpdateManyInput>
    /**
     * Filter which Ingredients to update
     */
    where?: IngredientsWhereInput
  }

  /**
   * Ingredients upsert
   */
  export type IngredientsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredients
     */
    select?: IngredientsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientsInclude<ExtArgs> | null
    /**
     * The filter to search for the Ingredients to update in case it exists.
     */
    where: IngredientsWhereUniqueInput
    /**
     * In case the Ingredients found by the `where` argument doesn't exist, create a new Ingredients with this data.
     */
    create: XOR<IngredientsCreateInput, IngredientsUncheckedCreateInput>
    /**
     * In case the Ingredients was found with the provided `where` argument, update it with this data.
     */
    update: XOR<IngredientsUpdateInput, IngredientsUncheckedUpdateInput>
  }

  /**
   * Ingredients delete
   */
  export type IngredientsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredients
     */
    select?: IngredientsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientsInclude<ExtArgs> | null
    /**
     * Filter which Ingredients to delete.
     */
    where: IngredientsWhereUniqueInput
  }

  /**
   * Ingredients deleteMany
   */
  export type IngredientsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ingredients to delete
     */
    where?: IngredientsWhereInput
  }

  /**
   * Ingredients.ingDishes
   */
  export type Ingredients$ingDishesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IngDish
     */
    select?: IngDishSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngDishInclude<ExtArgs> | null
    where?: IngDishWhereInput
    orderBy?: IngDishOrderByWithRelationInput | IngDishOrderByWithRelationInput[]
    cursor?: IngDishWhereUniqueInput
    take?: number
    skip?: number
    distinct?: IngDishScalarFieldEnum | IngDishScalarFieldEnum[]
  }

  /**
   * Ingredients without action
   */
  export type IngredientsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredients
     */
    select?: IngredientsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientsInclude<ExtArgs> | null
  }


  /**
   * Model Order
   */

  export type AggregateOrder = {
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  export type OrderAvgAggregateOutputType = {
    id: number | null
    totalAmount: number | null
    quantity: number | null
    clientId: number | null
    dishId: number | null
    deliveryBoyId: number | null
  }

  export type OrderSumAggregateOutputType = {
    id: number | null
    totalAmount: number | null
    quantity: number | null
    clientId: number | null
    dishId: number | null
    deliveryBoyId: number | null
  }

  export type OrderMinAggregateOutputType = {
    id: number | null
    totalAmount: number | null
    quantity: number | null
    status: $Enums.OrderStatus | null
    clientId: number | null
    dishId: number | null
    deliveryBoyId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrderMaxAggregateOutputType = {
    id: number | null
    totalAmount: number | null
    quantity: number | null
    status: $Enums.OrderStatus | null
    clientId: number | null
    dishId: number | null
    deliveryBoyId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrderCountAggregateOutputType = {
    id: number
    totalAmount: number
    quantity: number
    status: number
    clientId: number
    dishId: number
    deliveryBoyId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OrderAvgAggregateInputType = {
    id?: true
    totalAmount?: true
    quantity?: true
    clientId?: true
    dishId?: true
    deliveryBoyId?: true
  }

  export type OrderSumAggregateInputType = {
    id?: true
    totalAmount?: true
    quantity?: true
    clientId?: true
    dishId?: true
    deliveryBoyId?: true
  }

  export type OrderMinAggregateInputType = {
    id?: true
    totalAmount?: true
    quantity?: true
    status?: true
    clientId?: true
    dishId?: true
    deliveryBoyId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrderMaxAggregateInputType = {
    id?: true
    totalAmount?: true
    quantity?: true
    status?: true
    clientId?: true
    dishId?: true
    deliveryBoyId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrderCountAggregateInputType = {
    id?: true
    totalAmount?: true
    quantity?: true
    status?: true
    clientId?: true
    dishId?: true
    deliveryBoyId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Order to aggregate.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Orders
    **/
    _count?: true | OrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderMaxAggregateInputType
  }

  export type GetOrderAggregateType<T extends OrderAggregateArgs> = {
        [P in keyof T & keyof AggregateOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrder[P]>
      : GetScalarType<T[P], AggregateOrder[P]>
  }




  export type OrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithAggregationInput | OrderOrderByWithAggregationInput[]
    by: OrderScalarFieldEnum[] | OrderScalarFieldEnum
    having?: OrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderCountAggregateInputType | true
    _avg?: OrderAvgAggregateInputType
    _sum?: OrderSumAggregateInputType
    _min?: OrderMinAggregateInputType
    _max?: OrderMaxAggregateInputType
  }

  export type OrderGroupByOutputType = {
    id: number
    totalAmount: number
    quantity: number
    status: $Enums.OrderStatus
    clientId: number
    dishId: number
    deliveryBoyId: number
    createdAt: Date
    updatedAt: Date
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  type GetOrderGroupByPayload<T extends OrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderGroupByOutputType[P]>
            : GetScalarType<T[P], OrderGroupByOutputType[P]>
        }
      >
    >


  export type OrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    totalAmount?: boolean
    quantity?: boolean
    status?: boolean
    clientId?: boolean
    dishId?: boolean
    deliveryBoyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
    dish?: boolean | DishDefaultArgs<ExtArgs>
    deliveryBoy?: boolean | DeliveryBoyDefaultArgs<ExtArgs>
    ingDishes?: boolean | Order$ingDishesArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    totalAmount?: boolean
    quantity?: boolean
    status?: boolean
    clientId?: boolean
    dishId?: boolean
    deliveryBoyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
    dish?: boolean | DishDefaultArgs<ExtArgs>
    deliveryBoy?: boolean | DeliveryBoyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectScalar = {
    id?: boolean
    totalAmount?: boolean
    quantity?: boolean
    status?: boolean
    clientId?: boolean
    dishId?: boolean
    deliveryBoyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type OrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
    dish?: boolean | DishDefaultArgs<ExtArgs>
    deliveryBoy?: boolean | DeliveryBoyDefaultArgs<ExtArgs>
    ingDishes?: boolean | Order$ingDishesArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OrderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
    dish?: boolean | DishDefaultArgs<ExtArgs>
    deliveryBoy?: boolean | DeliveryBoyDefaultArgs<ExtArgs>
  }

  export type $OrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Order"
    objects: {
      client: Prisma.$ClientPayload<ExtArgs>
      dish: Prisma.$DishPayload<ExtArgs>
      deliveryBoy: Prisma.$DeliveryBoyPayload<ExtArgs>
      ingDishes: Prisma.$IngDishPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      totalAmount: number
      quantity: number
      status: $Enums.OrderStatus
      clientId: number
      dishId: number
      deliveryBoyId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["order"]>
    composites: {}
  }

  type OrderGetPayload<S extends boolean | null | undefined | OrderDefaultArgs> = $Result.GetResult<Prisma.$OrderPayload, S>

  type OrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OrderFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OrderCountAggregateInputType | true
    }

  export interface OrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Order'], meta: { name: 'Order' } }
    /**
     * Find zero or one Order that matches the filter.
     * @param {OrderFindUniqueArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderFindUniqueArgs>(args: SelectSubset<T, OrderFindUniqueArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Order that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OrderFindUniqueOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Order that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderFindFirstArgs>(args?: SelectSubset<T, OrderFindFirstArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Order that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.order.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.order.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderWithIdOnly = await prisma.order.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrderFindManyArgs>(args?: SelectSubset<T, OrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Order.
     * @param {OrderCreateArgs} args - Arguments to create a Order.
     * @example
     * // Create one Order
     * const Order = await prisma.order.create({
     *   data: {
     *     // ... data to create a Order
     *   }
     * })
     * 
     */
    create<T extends OrderCreateArgs>(args: SelectSubset<T, OrderCreateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Orders.
     * @param {OrderCreateManyArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderCreateManyArgs>(args?: SelectSubset<T, OrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Orders and returns the data saved in the database.
     * @param {OrderCreateManyAndReturnArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Orders and only return the `id`
     * const orderWithIdOnly = await prisma.order.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrderCreateManyAndReturnArgs>(args?: SelectSubset<T, OrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Order.
     * @param {OrderDeleteArgs} args - Arguments to delete one Order.
     * @example
     * // Delete one Order
     * const Order = await prisma.order.delete({
     *   where: {
     *     // ... filter to delete one Order
     *   }
     * })
     * 
     */
    delete<T extends OrderDeleteArgs>(args: SelectSubset<T, OrderDeleteArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Order.
     * @param {OrderUpdateArgs} args - Arguments to update one Order.
     * @example
     * // Update one Order
     * const order = await prisma.order.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderUpdateArgs>(args: SelectSubset<T, OrderUpdateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Orders.
     * @param {OrderDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.order.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderDeleteManyArgs>(args?: SelectSubset<T, OrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderUpdateManyArgs>(args: SelectSubset<T, OrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Order.
     * @param {OrderUpsertArgs} args - Arguments to update or create a Order.
     * @example
     * // Update or create a Order
     * const order = await prisma.order.upsert({
     *   create: {
     *     // ... data to create a Order
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order we want to update
     *   }
     * })
     */
    upsert<T extends OrderUpsertArgs>(args: SelectSubset<T, OrderUpsertArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.order.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends OrderCountArgs>(
      args?: Subset<T, OrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderAggregateArgs>(args: Subset<T, OrderAggregateArgs>): Prisma.PrismaPromise<GetOrderAggregateType<T>>

    /**
     * Group by Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderGroupByArgs['orderBy'] }
        : { orderBy?: OrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Order model
   */
  readonly fields: OrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Order.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    client<T extends ClientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClientDefaultArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    dish<T extends DishDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DishDefaultArgs<ExtArgs>>): Prisma__DishClient<$Result.GetResult<Prisma.$DishPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    deliveryBoy<T extends DeliveryBoyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DeliveryBoyDefaultArgs<ExtArgs>>): Prisma__DeliveryBoyClient<$Result.GetResult<Prisma.$DeliveryBoyPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    ingDishes<T extends Order$ingDishesArgs<ExtArgs> = {}>(args?: Subset<T, Order$ingDishesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IngDishPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Order model
   */ 
  interface OrderFieldRefs {
    readonly id: FieldRef<"Order", 'Int'>
    readonly totalAmount: FieldRef<"Order", 'Float'>
    readonly quantity: FieldRef<"Order", 'Int'>
    readonly status: FieldRef<"Order", 'OrderStatus'>
    readonly clientId: FieldRef<"Order", 'Int'>
    readonly dishId: FieldRef<"Order", 'Int'>
    readonly deliveryBoyId: FieldRef<"Order", 'Int'>
    readonly createdAt: FieldRef<"Order", 'DateTime'>
    readonly updatedAt: FieldRef<"Order", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Order findUnique
   */
  export type OrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findUniqueOrThrow
   */
  export type OrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findFirst
   */
  export type OrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findFirstOrThrow
   */
  export type OrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findMany
   */
  export type OrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Orders to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order create
   */
  export type OrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to create a Order.
     */
    data: XOR<OrderCreateInput, OrderUncheckedCreateInput>
  }

  /**
   * Order createMany
   */
  export type OrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Order createManyAndReturn
   */
  export type OrderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Order update
   */
  export type OrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to update a Order.
     */
    data: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
    /**
     * Choose, which Order to update.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order updateMany
   */
  export type OrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Orders.
     */
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     */
    where?: OrderWhereInput
  }

  /**
   * Order upsert
   */
  export type OrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The filter to search for the Order to update in case it exists.
     */
    where: OrderWhereUniqueInput
    /**
     * In case the Order found by the `where` argument doesn't exist, create a new Order with this data.
     */
    create: XOR<OrderCreateInput, OrderUncheckedCreateInput>
    /**
     * In case the Order was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
  }

  /**
   * Order delete
   */
  export type OrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter which Order to delete.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order deleteMany
   */
  export type OrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Orders to delete
     */
    where?: OrderWhereInput
  }

  /**
   * Order.ingDishes
   */
  export type Order$ingDishesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IngDish
     */
    select?: IngDishSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngDishInclude<ExtArgs> | null
    where?: IngDishWhereInput
    orderBy?: IngDishOrderByWithRelationInput | IngDishOrderByWithRelationInput[]
    cursor?: IngDishWhereUniqueInput
    take?: number
    skip?: number
    distinct?: IngDishScalarFieldEnum | IngDishScalarFieldEnum[]
  }

  /**
   * Order without action
   */
  export type OrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
  }


  /**
   * Model IngDish
   */

  export type AggregateIngDish = {
    _count: IngDishCountAggregateOutputType | null
    _avg: IngDishAvgAggregateOutputType | null
    _sum: IngDishSumAggregateOutputType | null
    _min: IngDishMinAggregateOutputType | null
    _max: IngDishMaxAggregateOutputType | null
  }

  export type IngDishAvgAggregateOutputType = {
    id: number | null
    dishId: number | null
    ingredientId: number | null
    orderId: number | null
  }

  export type IngDishSumAggregateOutputType = {
    id: number | null
    dishId: number | null
    ingredientId: number | null
    orderId: number | null
  }

  export type IngDishMinAggregateOutputType = {
    id: number | null
    dishId: number | null
    ingredientId: number | null
    orderId: number | null
    added: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type IngDishMaxAggregateOutputType = {
    id: number | null
    dishId: number | null
    ingredientId: number | null
    orderId: number | null
    added: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type IngDishCountAggregateOutputType = {
    id: number
    dishId: number
    ingredientId: number
    orderId: number
    added: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type IngDishAvgAggregateInputType = {
    id?: true
    dishId?: true
    ingredientId?: true
    orderId?: true
  }

  export type IngDishSumAggregateInputType = {
    id?: true
    dishId?: true
    ingredientId?: true
    orderId?: true
  }

  export type IngDishMinAggregateInputType = {
    id?: true
    dishId?: true
    ingredientId?: true
    orderId?: true
    added?: true
    createdAt?: true
    updatedAt?: true
  }

  export type IngDishMaxAggregateInputType = {
    id?: true
    dishId?: true
    ingredientId?: true
    orderId?: true
    added?: true
    createdAt?: true
    updatedAt?: true
  }

  export type IngDishCountAggregateInputType = {
    id?: true
    dishId?: true
    ingredientId?: true
    orderId?: true
    added?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type IngDishAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which IngDish to aggregate.
     */
    where?: IngDishWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IngDishes to fetch.
     */
    orderBy?: IngDishOrderByWithRelationInput | IngDishOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: IngDishWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IngDishes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IngDishes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned IngDishes
    **/
    _count?: true | IngDishCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: IngDishAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: IngDishSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IngDishMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IngDishMaxAggregateInputType
  }

  export type GetIngDishAggregateType<T extends IngDishAggregateArgs> = {
        [P in keyof T & keyof AggregateIngDish]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIngDish[P]>
      : GetScalarType<T[P], AggregateIngDish[P]>
  }




  export type IngDishGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IngDishWhereInput
    orderBy?: IngDishOrderByWithAggregationInput | IngDishOrderByWithAggregationInput[]
    by: IngDishScalarFieldEnum[] | IngDishScalarFieldEnum
    having?: IngDishScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IngDishCountAggregateInputType | true
    _avg?: IngDishAvgAggregateInputType
    _sum?: IngDishSumAggregateInputType
    _min?: IngDishMinAggregateInputType
    _max?: IngDishMaxAggregateInputType
  }

  export type IngDishGroupByOutputType = {
    id: number
    dishId: number
    ingredientId: number
    orderId: number
    added: boolean
    createdAt: Date
    updatedAt: Date
    _count: IngDishCountAggregateOutputType | null
    _avg: IngDishAvgAggregateOutputType | null
    _sum: IngDishSumAggregateOutputType | null
    _min: IngDishMinAggregateOutputType | null
    _max: IngDishMaxAggregateOutputType | null
  }

  type GetIngDishGroupByPayload<T extends IngDishGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<IngDishGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IngDishGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IngDishGroupByOutputType[P]>
            : GetScalarType<T[P], IngDishGroupByOutputType[P]>
        }
      >
    >


  export type IngDishSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dishId?: boolean
    ingredientId?: boolean
    orderId?: boolean
    added?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    dish?: boolean | DishDefaultArgs<ExtArgs>
    ingredient?: boolean | IngredientsDefaultArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ingDish"]>

  export type IngDishSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dishId?: boolean
    ingredientId?: boolean
    orderId?: boolean
    added?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    dish?: boolean | DishDefaultArgs<ExtArgs>
    ingredient?: boolean | IngredientsDefaultArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ingDish"]>

  export type IngDishSelectScalar = {
    id?: boolean
    dishId?: boolean
    ingredientId?: boolean
    orderId?: boolean
    added?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type IngDishInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dish?: boolean | DishDefaultArgs<ExtArgs>
    ingredient?: boolean | IngredientsDefaultArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }
  export type IngDishIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dish?: boolean | DishDefaultArgs<ExtArgs>
    ingredient?: boolean | IngredientsDefaultArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }

  export type $IngDishPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "IngDish"
    objects: {
      dish: Prisma.$DishPayload<ExtArgs>
      ingredient: Prisma.$IngredientsPayload<ExtArgs>
      order: Prisma.$OrderPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      dishId: number
      ingredientId: number
      orderId: number
      added: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["ingDish"]>
    composites: {}
  }

  type IngDishGetPayload<S extends boolean | null | undefined | IngDishDefaultArgs> = $Result.GetResult<Prisma.$IngDishPayload, S>

  type IngDishCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<IngDishFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: IngDishCountAggregateInputType | true
    }

  export interface IngDishDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['IngDish'], meta: { name: 'IngDish' } }
    /**
     * Find zero or one IngDish that matches the filter.
     * @param {IngDishFindUniqueArgs} args - Arguments to find a IngDish
     * @example
     * // Get one IngDish
     * const ingDish = await prisma.ingDish.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends IngDishFindUniqueArgs>(args: SelectSubset<T, IngDishFindUniqueArgs<ExtArgs>>): Prisma__IngDishClient<$Result.GetResult<Prisma.$IngDishPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one IngDish that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {IngDishFindUniqueOrThrowArgs} args - Arguments to find a IngDish
     * @example
     * // Get one IngDish
     * const ingDish = await prisma.ingDish.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends IngDishFindUniqueOrThrowArgs>(args: SelectSubset<T, IngDishFindUniqueOrThrowArgs<ExtArgs>>): Prisma__IngDishClient<$Result.GetResult<Prisma.$IngDishPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first IngDish that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngDishFindFirstArgs} args - Arguments to find a IngDish
     * @example
     * // Get one IngDish
     * const ingDish = await prisma.ingDish.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends IngDishFindFirstArgs>(args?: SelectSubset<T, IngDishFindFirstArgs<ExtArgs>>): Prisma__IngDishClient<$Result.GetResult<Prisma.$IngDishPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first IngDish that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngDishFindFirstOrThrowArgs} args - Arguments to find a IngDish
     * @example
     * // Get one IngDish
     * const ingDish = await prisma.ingDish.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends IngDishFindFirstOrThrowArgs>(args?: SelectSubset<T, IngDishFindFirstOrThrowArgs<ExtArgs>>): Prisma__IngDishClient<$Result.GetResult<Prisma.$IngDishPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more IngDishes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngDishFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all IngDishes
     * const ingDishes = await prisma.ingDish.findMany()
     * 
     * // Get first 10 IngDishes
     * const ingDishes = await prisma.ingDish.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ingDishWithIdOnly = await prisma.ingDish.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends IngDishFindManyArgs>(args?: SelectSubset<T, IngDishFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IngDishPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a IngDish.
     * @param {IngDishCreateArgs} args - Arguments to create a IngDish.
     * @example
     * // Create one IngDish
     * const IngDish = await prisma.ingDish.create({
     *   data: {
     *     // ... data to create a IngDish
     *   }
     * })
     * 
     */
    create<T extends IngDishCreateArgs>(args: SelectSubset<T, IngDishCreateArgs<ExtArgs>>): Prisma__IngDishClient<$Result.GetResult<Prisma.$IngDishPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many IngDishes.
     * @param {IngDishCreateManyArgs} args - Arguments to create many IngDishes.
     * @example
     * // Create many IngDishes
     * const ingDish = await prisma.ingDish.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends IngDishCreateManyArgs>(args?: SelectSubset<T, IngDishCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many IngDishes and returns the data saved in the database.
     * @param {IngDishCreateManyAndReturnArgs} args - Arguments to create many IngDishes.
     * @example
     * // Create many IngDishes
     * const ingDish = await prisma.ingDish.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many IngDishes and only return the `id`
     * const ingDishWithIdOnly = await prisma.ingDish.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends IngDishCreateManyAndReturnArgs>(args?: SelectSubset<T, IngDishCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IngDishPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a IngDish.
     * @param {IngDishDeleteArgs} args - Arguments to delete one IngDish.
     * @example
     * // Delete one IngDish
     * const IngDish = await prisma.ingDish.delete({
     *   where: {
     *     // ... filter to delete one IngDish
     *   }
     * })
     * 
     */
    delete<T extends IngDishDeleteArgs>(args: SelectSubset<T, IngDishDeleteArgs<ExtArgs>>): Prisma__IngDishClient<$Result.GetResult<Prisma.$IngDishPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one IngDish.
     * @param {IngDishUpdateArgs} args - Arguments to update one IngDish.
     * @example
     * // Update one IngDish
     * const ingDish = await prisma.ingDish.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends IngDishUpdateArgs>(args: SelectSubset<T, IngDishUpdateArgs<ExtArgs>>): Prisma__IngDishClient<$Result.GetResult<Prisma.$IngDishPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more IngDishes.
     * @param {IngDishDeleteManyArgs} args - Arguments to filter IngDishes to delete.
     * @example
     * // Delete a few IngDishes
     * const { count } = await prisma.ingDish.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends IngDishDeleteManyArgs>(args?: SelectSubset<T, IngDishDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more IngDishes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngDishUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many IngDishes
     * const ingDish = await prisma.ingDish.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends IngDishUpdateManyArgs>(args: SelectSubset<T, IngDishUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one IngDish.
     * @param {IngDishUpsertArgs} args - Arguments to update or create a IngDish.
     * @example
     * // Update or create a IngDish
     * const ingDish = await prisma.ingDish.upsert({
     *   create: {
     *     // ... data to create a IngDish
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the IngDish we want to update
     *   }
     * })
     */
    upsert<T extends IngDishUpsertArgs>(args: SelectSubset<T, IngDishUpsertArgs<ExtArgs>>): Prisma__IngDishClient<$Result.GetResult<Prisma.$IngDishPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of IngDishes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngDishCountArgs} args - Arguments to filter IngDishes to count.
     * @example
     * // Count the number of IngDishes
     * const count = await prisma.ingDish.count({
     *   where: {
     *     // ... the filter for the IngDishes we want to count
     *   }
     * })
    **/
    count<T extends IngDishCountArgs>(
      args?: Subset<T, IngDishCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IngDishCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a IngDish.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngDishAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IngDishAggregateArgs>(args: Subset<T, IngDishAggregateArgs>): Prisma.PrismaPromise<GetIngDishAggregateType<T>>

    /**
     * Group by IngDish.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngDishGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IngDishGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IngDishGroupByArgs['orderBy'] }
        : { orderBy?: IngDishGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IngDishGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIngDishGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the IngDish model
   */
  readonly fields: IngDishFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for IngDish.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__IngDishClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    dish<T extends DishDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DishDefaultArgs<ExtArgs>>): Prisma__DishClient<$Result.GetResult<Prisma.$DishPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    ingredient<T extends IngredientsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, IngredientsDefaultArgs<ExtArgs>>): Prisma__IngredientsClient<$Result.GetResult<Prisma.$IngredientsPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    order<T extends OrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderDefaultArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the IngDish model
   */ 
  interface IngDishFieldRefs {
    readonly id: FieldRef<"IngDish", 'Int'>
    readonly dishId: FieldRef<"IngDish", 'Int'>
    readonly ingredientId: FieldRef<"IngDish", 'Int'>
    readonly orderId: FieldRef<"IngDish", 'Int'>
    readonly added: FieldRef<"IngDish", 'Boolean'>
    readonly createdAt: FieldRef<"IngDish", 'DateTime'>
    readonly updatedAt: FieldRef<"IngDish", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * IngDish findUnique
   */
  export type IngDishFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IngDish
     */
    select?: IngDishSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngDishInclude<ExtArgs> | null
    /**
     * Filter, which IngDish to fetch.
     */
    where: IngDishWhereUniqueInput
  }

  /**
   * IngDish findUniqueOrThrow
   */
  export type IngDishFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IngDish
     */
    select?: IngDishSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngDishInclude<ExtArgs> | null
    /**
     * Filter, which IngDish to fetch.
     */
    where: IngDishWhereUniqueInput
  }

  /**
   * IngDish findFirst
   */
  export type IngDishFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IngDish
     */
    select?: IngDishSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngDishInclude<ExtArgs> | null
    /**
     * Filter, which IngDish to fetch.
     */
    where?: IngDishWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IngDishes to fetch.
     */
    orderBy?: IngDishOrderByWithRelationInput | IngDishOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for IngDishes.
     */
    cursor?: IngDishWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IngDishes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IngDishes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of IngDishes.
     */
    distinct?: IngDishScalarFieldEnum | IngDishScalarFieldEnum[]
  }

  /**
   * IngDish findFirstOrThrow
   */
  export type IngDishFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IngDish
     */
    select?: IngDishSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngDishInclude<ExtArgs> | null
    /**
     * Filter, which IngDish to fetch.
     */
    where?: IngDishWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IngDishes to fetch.
     */
    orderBy?: IngDishOrderByWithRelationInput | IngDishOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for IngDishes.
     */
    cursor?: IngDishWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IngDishes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IngDishes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of IngDishes.
     */
    distinct?: IngDishScalarFieldEnum | IngDishScalarFieldEnum[]
  }

  /**
   * IngDish findMany
   */
  export type IngDishFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IngDish
     */
    select?: IngDishSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngDishInclude<ExtArgs> | null
    /**
     * Filter, which IngDishes to fetch.
     */
    where?: IngDishWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IngDishes to fetch.
     */
    orderBy?: IngDishOrderByWithRelationInput | IngDishOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing IngDishes.
     */
    cursor?: IngDishWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IngDishes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IngDishes.
     */
    skip?: number
    distinct?: IngDishScalarFieldEnum | IngDishScalarFieldEnum[]
  }

  /**
   * IngDish create
   */
  export type IngDishCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IngDish
     */
    select?: IngDishSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngDishInclude<ExtArgs> | null
    /**
     * The data needed to create a IngDish.
     */
    data: XOR<IngDishCreateInput, IngDishUncheckedCreateInput>
  }

  /**
   * IngDish createMany
   */
  export type IngDishCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many IngDishes.
     */
    data: IngDishCreateManyInput | IngDishCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * IngDish createManyAndReturn
   */
  export type IngDishCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IngDish
     */
    select?: IngDishSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many IngDishes.
     */
    data: IngDishCreateManyInput | IngDishCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngDishIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * IngDish update
   */
  export type IngDishUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IngDish
     */
    select?: IngDishSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngDishInclude<ExtArgs> | null
    /**
     * The data needed to update a IngDish.
     */
    data: XOR<IngDishUpdateInput, IngDishUncheckedUpdateInput>
    /**
     * Choose, which IngDish to update.
     */
    where: IngDishWhereUniqueInput
  }

  /**
   * IngDish updateMany
   */
  export type IngDishUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update IngDishes.
     */
    data: XOR<IngDishUpdateManyMutationInput, IngDishUncheckedUpdateManyInput>
    /**
     * Filter which IngDishes to update
     */
    where?: IngDishWhereInput
  }

  /**
   * IngDish upsert
   */
  export type IngDishUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IngDish
     */
    select?: IngDishSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngDishInclude<ExtArgs> | null
    /**
     * The filter to search for the IngDish to update in case it exists.
     */
    where: IngDishWhereUniqueInput
    /**
     * In case the IngDish found by the `where` argument doesn't exist, create a new IngDish with this data.
     */
    create: XOR<IngDishCreateInput, IngDishUncheckedCreateInput>
    /**
     * In case the IngDish was found with the provided `where` argument, update it with this data.
     */
    update: XOR<IngDishUpdateInput, IngDishUncheckedUpdateInput>
  }

  /**
   * IngDish delete
   */
  export type IngDishDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IngDish
     */
    select?: IngDishSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngDishInclude<ExtArgs> | null
    /**
     * Filter which IngDish to delete.
     */
    where: IngDishWhereUniqueInput
  }

  /**
   * IngDish deleteMany
   */
  export type IngDishDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which IngDishes to delete
     */
    where?: IngDishWhereInput
  }

  /**
   * IngDish without action
   */
  export type IngDishDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IngDish
     */
    select?: IngDishSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngDishInclude<ExtArgs> | null
  }


  /**
   * Model DishRating
   */

  export type AggregateDishRating = {
    _count: DishRatingCountAggregateOutputType | null
    _avg: DishRatingAvgAggregateOutputType | null
    _sum: DishRatingSumAggregateOutputType | null
    _min: DishRatingMinAggregateOutputType | null
    _max: DishRatingMaxAggregateOutputType | null
  }

  export type DishRatingAvgAggregateOutputType = {
    id: number | null
    rating: number | null
    clientId: number | null
    dishId: number | null
  }

  export type DishRatingSumAggregateOutputType = {
    id: number | null
    rating: number | null
    clientId: number | null
    dishId: number | null
  }

  export type DishRatingMinAggregateOutputType = {
    id: number | null
    rating: number | null
    comment: string | null
    clientId: number | null
    dishId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DishRatingMaxAggregateOutputType = {
    id: number | null
    rating: number | null
    comment: string | null
    clientId: number | null
    dishId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DishRatingCountAggregateOutputType = {
    id: number
    rating: number
    comment: number
    clientId: number
    dishId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DishRatingAvgAggregateInputType = {
    id?: true
    rating?: true
    clientId?: true
    dishId?: true
  }

  export type DishRatingSumAggregateInputType = {
    id?: true
    rating?: true
    clientId?: true
    dishId?: true
  }

  export type DishRatingMinAggregateInputType = {
    id?: true
    rating?: true
    comment?: true
    clientId?: true
    dishId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DishRatingMaxAggregateInputType = {
    id?: true
    rating?: true
    comment?: true
    clientId?: true
    dishId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DishRatingCountAggregateInputType = {
    id?: true
    rating?: true
    comment?: true
    clientId?: true
    dishId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DishRatingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DishRating to aggregate.
     */
    where?: DishRatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DishRatings to fetch.
     */
    orderBy?: DishRatingOrderByWithRelationInput | DishRatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DishRatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DishRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DishRatings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DishRatings
    **/
    _count?: true | DishRatingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DishRatingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DishRatingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DishRatingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DishRatingMaxAggregateInputType
  }

  export type GetDishRatingAggregateType<T extends DishRatingAggregateArgs> = {
        [P in keyof T & keyof AggregateDishRating]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDishRating[P]>
      : GetScalarType<T[P], AggregateDishRating[P]>
  }




  export type DishRatingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DishRatingWhereInput
    orderBy?: DishRatingOrderByWithAggregationInput | DishRatingOrderByWithAggregationInput[]
    by: DishRatingScalarFieldEnum[] | DishRatingScalarFieldEnum
    having?: DishRatingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DishRatingCountAggregateInputType | true
    _avg?: DishRatingAvgAggregateInputType
    _sum?: DishRatingSumAggregateInputType
    _min?: DishRatingMinAggregateInputType
    _max?: DishRatingMaxAggregateInputType
  }

  export type DishRatingGroupByOutputType = {
    id: number
    rating: number
    comment: string | null
    clientId: number
    dishId: number
    createdAt: Date
    updatedAt: Date
    _count: DishRatingCountAggregateOutputType | null
    _avg: DishRatingAvgAggregateOutputType | null
    _sum: DishRatingSumAggregateOutputType | null
    _min: DishRatingMinAggregateOutputType | null
    _max: DishRatingMaxAggregateOutputType | null
  }

  type GetDishRatingGroupByPayload<T extends DishRatingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DishRatingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DishRatingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DishRatingGroupByOutputType[P]>
            : GetScalarType<T[P], DishRatingGroupByOutputType[P]>
        }
      >
    >


  export type DishRatingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rating?: boolean
    comment?: boolean
    clientId?: boolean
    dishId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
    dish?: boolean | DishDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dishRating"]>

  export type DishRatingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rating?: boolean
    comment?: boolean
    clientId?: boolean
    dishId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
    dish?: boolean | DishDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dishRating"]>

  export type DishRatingSelectScalar = {
    id?: boolean
    rating?: boolean
    comment?: boolean
    clientId?: boolean
    dishId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DishRatingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
    dish?: boolean | DishDefaultArgs<ExtArgs>
  }
  export type DishRatingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
    dish?: boolean | DishDefaultArgs<ExtArgs>
  }

  export type $DishRatingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DishRating"
    objects: {
      client: Prisma.$ClientPayload<ExtArgs>
      dish: Prisma.$DishPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      rating: number
      comment: string | null
      clientId: number
      dishId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["dishRating"]>
    composites: {}
  }

  type DishRatingGetPayload<S extends boolean | null | undefined | DishRatingDefaultArgs> = $Result.GetResult<Prisma.$DishRatingPayload, S>

  type DishRatingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DishRatingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DishRatingCountAggregateInputType | true
    }

  export interface DishRatingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DishRating'], meta: { name: 'DishRating' } }
    /**
     * Find zero or one DishRating that matches the filter.
     * @param {DishRatingFindUniqueArgs} args - Arguments to find a DishRating
     * @example
     * // Get one DishRating
     * const dishRating = await prisma.dishRating.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DishRatingFindUniqueArgs>(args: SelectSubset<T, DishRatingFindUniqueArgs<ExtArgs>>): Prisma__DishRatingClient<$Result.GetResult<Prisma.$DishRatingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DishRating that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DishRatingFindUniqueOrThrowArgs} args - Arguments to find a DishRating
     * @example
     * // Get one DishRating
     * const dishRating = await prisma.dishRating.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DishRatingFindUniqueOrThrowArgs>(args: SelectSubset<T, DishRatingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DishRatingClient<$Result.GetResult<Prisma.$DishRatingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DishRating that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DishRatingFindFirstArgs} args - Arguments to find a DishRating
     * @example
     * // Get one DishRating
     * const dishRating = await prisma.dishRating.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DishRatingFindFirstArgs>(args?: SelectSubset<T, DishRatingFindFirstArgs<ExtArgs>>): Prisma__DishRatingClient<$Result.GetResult<Prisma.$DishRatingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DishRating that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DishRatingFindFirstOrThrowArgs} args - Arguments to find a DishRating
     * @example
     * // Get one DishRating
     * const dishRating = await prisma.dishRating.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DishRatingFindFirstOrThrowArgs>(args?: SelectSubset<T, DishRatingFindFirstOrThrowArgs<ExtArgs>>): Prisma__DishRatingClient<$Result.GetResult<Prisma.$DishRatingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DishRatings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DishRatingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DishRatings
     * const dishRatings = await prisma.dishRating.findMany()
     * 
     * // Get first 10 DishRatings
     * const dishRatings = await prisma.dishRating.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dishRatingWithIdOnly = await prisma.dishRating.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DishRatingFindManyArgs>(args?: SelectSubset<T, DishRatingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DishRatingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DishRating.
     * @param {DishRatingCreateArgs} args - Arguments to create a DishRating.
     * @example
     * // Create one DishRating
     * const DishRating = await prisma.dishRating.create({
     *   data: {
     *     // ... data to create a DishRating
     *   }
     * })
     * 
     */
    create<T extends DishRatingCreateArgs>(args: SelectSubset<T, DishRatingCreateArgs<ExtArgs>>): Prisma__DishRatingClient<$Result.GetResult<Prisma.$DishRatingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DishRatings.
     * @param {DishRatingCreateManyArgs} args - Arguments to create many DishRatings.
     * @example
     * // Create many DishRatings
     * const dishRating = await prisma.dishRating.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DishRatingCreateManyArgs>(args?: SelectSubset<T, DishRatingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DishRatings and returns the data saved in the database.
     * @param {DishRatingCreateManyAndReturnArgs} args - Arguments to create many DishRatings.
     * @example
     * // Create many DishRatings
     * const dishRating = await prisma.dishRating.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DishRatings and only return the `id`
     * const dishRatingWithIdOnly = await prisma.dishRating.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DishRatingCreateManyAndReturnArgs>(args?: SelectSubset<T, DishRatingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DishRatingPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DishRating.
     * @param {DishRatingDeleteArgs} args - Arguments to delete one DishRating.
     * @example
     * // Delete one DishRating
     * const DishRating = await prisma.dishRating.delete({
     *   where: {
     *     // ... filter to delete one DishRating
     *   }
     * })
     * 
     */
    delete<T extends DishRatingDeleteArgs>(args: SelectSubset<T, DishRatingDeleteArgs<ExtArgs>>): Prisma__DishRatingClient<$Result.GetResult<Prisma.$DishRatingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DishRating.
     * @param {DishRatingUpdateArgs} args - Arguments to update one DishRating.
     * @example
     * // Update one DishRating
     * const dishRating = await prisma.dishRating.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DishRatingUpdateArgs>(args: SelectSubset<T, DishRatingUpdateArgs<ExtArgs>>): Prisma__DishRatingClient<$Result.GetResult<Prisma.$DishRatingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DishRatings.
     * @param {DishRatingDeleteManyArgs} args - Arguments to filter DishRatings to delete.
     * @example
     * // Delete a few DishRatings
     * const { count } = await prisma.dishRating.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DishRatingDeleteManyArgs>(args?: SelectSubset<T, DishRatingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DishRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DishRatingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DishRatings
     * const dishRating = await prisma.dishRating.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DishRatingUpdateManyArgs>(args: SelectSubset<T, DishRatingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DishRating.
     * @param {DishRatingUpsertArgs} args - Arguments to update or create a DishRating.
     * @example
     * // Update or create a DishRating
     * const dishRating = await prisma.dishRating.upsert({
     *   create: {
     *     // ... data to create a DishRating
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DishRating we want to update
     *   }
     * })
     */
    upsert<T extends DishRatingUpsertArgs>(args: SelectSubset<T, DishRatingUpsertArgs<ExtArgs>>): Prisma__DishRatingClient<$Result.GetResult<Prisma.$DishRatingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DishRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DishRatingCountArgs} args - Arguments to filter DishRatings to count.
     * @example
     * // Count the number of DishRatings
     * const count = await prisma.dishRating.count({
     *   where: {
     *     // ... the filter for the DishRatings we want to count
     *   }
     * })
    **/
    count<T extends DishRatingCountArgs>(
      args?: Subset<T, DishRatingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DishRatingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DishRating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DishRatingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DishRatingAggregateArgs>(args: Subset<T, DishRatingAggregateArgs>): Prisma.PrismaPromise<GetDishRatingAggregateType<T>>

    /**
     * Group by DishRating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DishRatingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DishRatingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DishRatingGroupByArgs['orderBy'] }
        : { orderBy?: DishRatingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DishRatingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDishRatingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DishRating model
   */
  readonly fields: DishRatingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DishRating.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DishRatingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    client<T extends ClientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClientDefaultArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    dish<T extends DishDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DishDefaultArgs<ExtArgs>>): Prisma__DishClient<$Result.GetResult<Prisma.$DishPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DishRating model
   */ 
  interface DishRatingFieldRefs {
    readonly id: FieldRef<"DishRating", 'Int'>
    readonly rating: FieldRef<"DishRating", 'Int'>
    readonly comment: FieldRef<"DishRating", 'String'>
    readonly clientId: FieldRef<"DishRating", 'Int'>
    readonly dishId: FieldRef<"DishRating", 'Int'>
    readonly createdAt: FieldRef<"DishRating", 'DateTime'>
    readonly updatedAt: FieldRef<"DishRating", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DishRating findUnique
   */
  export type DishRatingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DishRating
     */
    select?: DishRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DishRatingInclude<ExtArgs> | null
    /**
     * Filter, which DishRating to fetch.
     */
    where: DishRatingWhereUniqueInput
  }

  /**
   * DishRating findUniqueOrThrow
   */
  export type DishRatingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DishRating
     */
    select?: DishRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DishRatingInclude<ExtArgs> | null
    /**
     * Filter, which DishRating to fetch.
     */
    where: DishRatingWhereUniqueInput
  }

  /**
   * DishRating findFirst
   */
  export type DishRatingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DishRating
     */
    select?: DishRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DishRatingInclude<ExtArgs> | null
    /**
     * Filter, which DishRating to fetch.
     */
    where?: DishRatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DishRatings to fetch.
     */
    orderBy?: DishRatingOrderByWithRelationInput | DishRatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DishRatings.
     */
    cursor?: DishRatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DishRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DishRatings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DishRatings.
     */
    distinct?: DishRatingScalarFieldEnum | DishRatingScalarFieldEnum[]
  }

  /**
   * DishRating findFirstOrThrow
   */
  export type DishRatingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DishRating
     */
    select?: DishRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DishRatingInclude<ExtArgs> | null
    /**
     * Filter, which DishRating to fetch.
     */
    where?: DishRatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DishRatings to fetch.
     */
    orderBy?: DishRatingOrderByWithRelationInput | DishRatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DishRatings.
     */
    cursor?: DishRatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DishRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DishRatings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DishRatings.
     */
    distinct?: DishRatingScalarFieldEnum | DishRatingScalarFieldEnum[]
  }

  /**
   * DishRating findMany
   */
  export type DishRatingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DishRating
     */
    select?: DishRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DishRatingInclude<ExtArgs> | null
    /**
     * Filter, which DishRatings to fetch.
     */
    where?: DishRatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DishRatings to fetch.
     */
    orderBy?: DishRatingOrderByWithRelationInput | DishRatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DishRatings.
     */
    cursor?: DishRatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DishRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DishRatings.
     */
    skip?: number
    distinct?: DishRatingScalarFieldEnum | DishRatingScalarFieldEnum[]
  }

  /**
   * DishRating create
   */
  export type DishRatingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DishRating
     */
    select?: DishRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DishRatingInclude<ExtArgs> | null
    /**
     * The data needed to create a DishRating.
     */
    data: XOR<DishRatingCreateInput, DishRatingUncheckedCreateInput>
  }

  /**
   * DishRating createMany
   */
  export type DishRatingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DishRatings.
     */
    data: DishRatingCreateManyInput | DishRatingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DishRating createManyAndReturn
   */
  export type DishRatingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DishRating
     */
    select?: DishRatingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DishRatings.
     */
    data: DishRatingCreateManyInput | DishRatingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DishRatingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DishRating update
   */
  export type DishRatingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DishRating
     */
    select?: DishRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DishRatingInclude<ExtArgs> | null
    /**
     * The data needed to update a DishRating.
     */
    data: XOR<DishRatingUpdateInput, DishRatingUncheckedUpdateInput>
    /**
     * Choose, which DishRating to update.
     */
    where: DishRatingWhereUniqueInput
  }

  /**
   * DishRating updateMany
   */
  export type DishRatingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DishRatings.
     */
    data: XOR<DishRatingUpdateManyMutationInput, DishRatingUncheckedUpdateManyInput>
    /**
     * Filter which DishRatings to update
     */
    where?: DishRatingWhereInput
  }

  /**
   * DishRating upsert
   */
  export type DishRatingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DishRating
     */
    select?: DishRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DishRatingInclude<ExtArgs> | null
    /**
     * The filter to search for the DishRating to update in case it exists.
     */
    where: DishRatingWhereUniqueInput
    /**
     * In case the DishRating found by the `where` argument doesn't exist, create a new DishRating with this data.
     */
    create: XOR<DishRatingCreateInput, DishRatingUncheckedCreateInput>
    /**
     * In case the DishRating was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DishRatingUpdateInput, DishRatingUncheckedUpdateInput>
  }

  /**
   * DishRating delete
   */
  export type DishRatingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DishRating
     */
    select?: DishRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DishRatingInclude<ExtArgs> | null
    /**
     * Filter which DishRating to delete.
     */
    where: DishRatingWhereUniqueInput
  }

  /**
   * DishRating deleteMany
   */
  export type DishRatingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DishRatings to delete
     */
    where?: DishRatingWhereInput
  }

  /**
   * DishRating without action
   */
  export type DishRatingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DishRating
     */
    select?: DishRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DishRatingInclude<ExtArgs> | null
  }


  /**
   * Model Admin
   */

  export type AggregateAdmin = {
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  export type AdminAvgAggregateOutputType = {
    id: number | null
  }

  export type AdminSumAggregateOutputType = {
    id: number | null
  }

  export type AdminMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AdminMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AdminCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AdminAvgAggregateInputType = {
    id?: true
  }

  export type AdminSumAggregateInputType = {
    id?: true
  }

  export type AdminMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AdminMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AdminCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AdminAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admin to aggregate.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Admins
    **/
    _count?: true | AdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdminAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdminSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminMaxAggregateInputType
  }

  export type GetAdminAggregateType<T extends AdminAggregateArgs> = {
        [P in keyof T & keyof AggregateAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdmin[P]>
      : GetScalarType<T[P], AggregateAdmin[P]>
  }




  export type AdminGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminWhereInput
    orderBy?: AdminOrderByWithAggregationInput | AdminOrderByWithAggregationInput[]
    by: AdminScalarFieldEnum[] | AdminScalarFieldEnum
    having?: AdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminCountAggregateInputType | true
    _avg?: AdminAvgAggregateInputType
    _sum?: AdminSumAggregateInputType
    _min?: AdminMinAggregateInputType
    _max?: AdminMaxAggregateInputType
  }

  export type AdminGroupByOutputType = {
    id: number
    name: string
    email: string
    password: string
    createdAt: Date
    updatedAt: Date
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  type GetAdminGroupByPayload<T extends AdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminGroupByOutputType[P]>
            : GetScalarType<T[P], AdminGroupByOutputType[P]>
        }
      >
    >


  export type AdminSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $AdminPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Admin"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      password: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["admin"]>
    composites: {}
  }

  type AdminGetPayload<S extends boolean | null | undefined | AdminDefaultArgs> = $Result.GetResult<Prisma.$AdminPayload, S>

  type AdminCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AdminFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AdminCountAggregateInputType | true
    }

  export interface AdminDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Admin'], meta: { name: 'Admin' } }
    /**
     * Find zero or one Admin that matches the filter.
     * @param {AdminFindUniqueArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdminFindUniqueArgs>(args: SelectSubset<T, AdminFindUniqueArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Admin that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AdminFindUniqueOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdminFindUniqueOrThrowArgs>(args: SelectSubset<T, AdminFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Admin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdminFindFirstArgs>(args?: SelectSubset<T, AdminFindFirstArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Admin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdminFindFirstOrThrowArgs>(args?: SelectSubset<T, AdminFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Admins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Admins
     * const admins = await prisma.admin.findMany()
     * 
     * // Get first 10 Admins
     * const admins = await prisma.admin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminWithIdOnly = await prisma.admin.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AdminFindManyArgs>(args?: SelectSubset<T, AdminFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Admin.
     * @param {AdminCreateArgs} args - Arguments to create a Admin.
     * @example
     * // Create one Admin
     * const Admin = await prisma.admin.create({
     *   data: {
     *     // ... data to create a Admin
     *   }
     * })
     * 
     */
    create<T extends AdminCreateArgs>(args: SelectSubset<T, AdminCreateArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Admins.
     * @param {AdminCreateManyArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admin = await prisma.admin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdminCreateManyArgs>(args?: SelectSubset<T, AdminCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Admins and returns the data saved in the database.
     * @param {AdminCreateManyAndReturnArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admin = await prisma.admin.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Admins and only return the `id`
     * const adminWithIdOnly = await prisma.admin.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AdminCreateManyAndReturnArgs>(args?: SelectSubset<T, AdminCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Admin.
     * @param {AdminDeleteArgs} args - Arguments to delete one Admin.
     * @example
     * // Delete one Admin
     * const Admin = await prisma.admin.delete({
     *   where: {
     *     // ... filter to delete one Admin
     *   }
     * })
     * 
     */
    delete<T extends AdminDeleteArgs>(args: SelectSubset<T, AdminDeleteArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Admin.
     * @param {AdminUpdateArgs} args - Arguments to update one Admin.
     * @example
     * // Update one Admin
     * const admin = await prisma.admin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdminUpdateArgs>(args: SelectSubset<T, AdminUpdateArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Admins.
     * @param {AdminDeleteManyArgs} args - Arguments to filter Admins to delete.
     * @example
     * // Delete a few Admins
     * const { count } = await prisma.admin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdminDeleteManyArgs>(args?: SelectSubset<T, AdminDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdminUpdateManyArgs>(args: SelectSubset<T, AdminUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Admin.
     * @param {AdminUpsertArgs} args - Arguments to update or create a Admin.
     * @example
     * // Update or create a Admin
     * const admin = await prisma.admin.upsert({
     *   create: {
     *     // ... data to create a Admin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Admin we want to update
     *   }
     * })
     */
    upsert<T extends AdminUpsertArgs>(args: SelectSubset<T, AdminUpsertArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminCountArgs} args - Arguments to filter Admins to count.
     * @example
     * // Count the number of Admins
     * const count = await prisma.admin.count({
     *   where: {
     *     // ... the filter for the Admins we want to count
     *   }
     * })
    **/
    count<T extends AdminCountArgs>(
      args?: Subset<T, AdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminAggregateArgs>(args: Subset<T, AdminAggregateArgs>): Prisma.PrismaPromise<GetAdminAggregateType<T>>

    /**
     * Group by Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminGroupByArgs['orderBy'] }
        : { orderBy?: AdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Admin model
   */
  readonly fields: AdminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Admin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Admin model
   */ 
  interface AdminFieldRefs {
    readonly id: FieldRef<"Admin", 'Int'>
    readonly name: FieldRef<"Admin", 'String'>
    readonly email: FieldRef<"Admin", 'String'>
    readonly password: FieldRef<"Admin", 'String'>
    readonly createdAt: FieldRef<"Admin", 'DateTime'>
    readonly updatedAt: FieldRef<"Admin", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Admin findUnique
   */
  export type AdminFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findUniqueOrThrow
   */
  export type AdminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findFirst
   */
  export type AdminFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findFirstOrThrow
   */
  export type AdminFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findMany
   */
  export type AdminFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter, which Admins to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin create
   */
  export type AdminCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * The data needed to create a Admin.
     */
    data: XOR<AdminCreateInput, AdminUncheckedCreateInput>
  }

  /**
   * Admin createMany
   */
  export type AdminCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Admin createManyAndReturn
   */
  export type AdminCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Admin update
   */
  export type AdminUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * The data needed to update a Admin.
     */
    data: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
    /**
     * Choose, which Admin to update.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin updateMany
   */
  export type AdminUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
  }

  /**
   * Admin upsert
   */
  export type AdminUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * The filter to search for the Admin to update in case it exists.
     */
    where: AdminWhereUniqueInput
    /**
     * In case the Admin found by the `where` argument doesn't exist, create a new Admin with this data.
     */
    create: XOR<AdminCreateInput, AdminUncheckedCreateInput>
    /**
     * In case the Admin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
  }

  /**
   * Admin delete
   */
  export type AdminDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter which Admin to delete.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin deleteMany
   */
  export type AdminDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admins to delete
     */
    where?: AdminWhereInput
  }

  /**
   * Admin without action
   */
  export type AdminDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ClientScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    phoneNumber: 'phoneNumber',
    address: 'address',
    imageUrl: 'imageUrl',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ClientScalarFieldEnum = (typeof ClientScalarFieldEnum)[keyof typeof ClientScalarFieldEnum]


  export const ChiefScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    phoneNumber: 'phoneNumber',
    IDCard: 'IDCard',
    imageUrl: 'imageUrl',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ChiefScalarFieldEnum = (typeof ChiefScalarFieldEnum)[keyof typeof ChiefScalarFieldEnum]


  export const DeliveryBoyScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DeliveryBoyScalarFieldEnum = (typeof DeliveryBoyScalarFieldEnum)[keyof typeof DeliveryBoyScalarFieldEnum]


  export const DishScalarFieldEnum: {
    id: 'id',
    title: 'title',
    category: 'category',
    description: 'description',
    price: 'price',
    imageUrl: 'imageUrl',
    duration: 'duration',
    ChiefId: 'ChiefId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DishScalarFieldEnum = (typeof DishScalarFieldEnum)[keyof typeof DishScalarFieldEnum]


  export const IngredientsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    price: 'price',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type IngredientsScalarFieldEnum = (typeof IngredientsScalarFieldEnum)[keyof typeof IngredientsScalarFieldEnum]


  export const OrderScalarFieldEnum: {
    id: 'id',
    totalAmount: 'totalAmount',
    quantity: 'quantity',
    status: 'status',
    clientId: 'clientId',
    dishId: 'dishId',
    deliveryBoyId: 'deliveryBoyId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OrderScalarFieldEnum = (typeof OrderScalarFieldEnum)[keyof typeof OrderScalarFieldEnum]


  export const IngDishScalarFieldEnum: {
    id: 'id',
    dishId: 'dishId',
    ingredientId: 'ingredientId',
    orderId: 'orderId',
    added: 'added',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type IngDishScalarFieldEnum = (typeof IngDishScalarFieldEnum)[keyof typeof IngDishScalarFieldEnum]


  export const DishRatingScalarFieldEnum: {
    id: 'id',
    rating: 'rating',
    comment: 'comment',
    clientId: 'clientId',
    dishId: 'dishId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DishRatingScalarFieldEnum = (typeof DishRatingScalarFieldEnum)[keyof typeof DishRatingScalarFieldEnum]


  export const AdminScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AdminScalarFieldEnum = (typeof AdminScalarFieldEnum)[keyof typeof AdminScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'OrderStatus'
   */
  export type EnumOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderStatus'>
    


  /**
   * Reference to a field of type 'OrderStatus[]'
   */
  export type ListEnumOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderStatus[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    
  /**
   * Deep Input Types
   */


  export type ClientWhereInput = {
    AND?: ClientWhereInput | ClientWhereInput[]
    OR?: ClientWhereInput[]
    NOT?: ClientWhereInput | ClientWhereInput[]
    id?: IntFilter<"Client"> | number
    name?: StringFilter<"Client"> | string
    email?: StringFilter<"Client"> | string
    password?: StringFilter<"Client"> | string
    phoneNumber?: StringFilter<"Client"> | string
    address?: StringFilter<"Client"> | string
    imageUrl?: StringNullableFilter<"Client"> | string | null
    createdAt?: DateTimeFilter<"Client"> | Date | string
    updatedAt?: DateTimeFilter<"Client"> | Date | string
    orders?: OrderListRelationFilter
    dishRatings?: DishRatingListRelationFilter
    dishfavorites?: DishListRelationFilter
  }

  export type ClientOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    address?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    orders?: OrderOrderByRelationAggregateInput
    dishRatings?: DishRatingOrderByRelationAggregateInput
    dishfavorites?: DishOrderByRelationAggregateInput
  }

  export type ClientWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: ClientWhereInput | ClientWhereInput[]
    OR?: ClientWhereInput[]
    NOT?: ClientWhereInput | ClientWhereInput[]
    name?: StringFilter<"Client"> | string
    password?: StringFilter<"Client"> | string
    phoneNumber?: StringFilter<"Client"> | string
    address?: StringFilter<"Client"> | string
    imageUrl?: StringNullableFilter<"Client"> | string | null
    createdAt?: DateTimeFilter<"Client"> | Date | string
    updatedAt?: DateTimeFilter<"Client"> | Date | string
    orders?: OrderListRelationFilter
    dishRatings?: DishRatingListRelationFilter
    dishfavorites?: DishListRelationFilter
  }, "id" | "email">

  export type ClientOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    address?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ClientCountOrderByAggregateInput
    _avg?: ClientAvgOrderByAggregateInput
    _max?: ClientMaxOrderByAggregateInput
    _min?: ClientMinOrderByAggregateInput
    _sum?: ClientSumOrderByAggregateInput
  }

  export type ClientScalarWhereWithAggregatesInput = {
    AND?: ClientScalarWhereWithAggregatesInput | ClientScalarWhereWithAggregatesInput[]
    OR?: ClientScalarWhereWithAggregatesInput[]
    NOT?: ClientScalarWhereWithAggregatesInput | ClientScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Client"> | number
    name?: StringWithAggregatesFilter<"Client"> | string
    email?: StringWithAggregatesFilter<"Client"> | string
    password?: StringWithAggregatesFilter<"Client"> | string
    phoneNumber?: StringWithAggregatesFilter<"Client"> | string
    address?: StringWithAggregatesFilter<"Client"> | string
    imageUrl?: StringNullableWithAggregatesFilter<"Client"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Client"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Client"> | Date | string
  }

  export type ChiefWhereInput = {
    AND?: ChiefWhereInput | ChiefWhereInput[]
    OR?: ChiefWhereInput[]
    NOT?: ChiefWhereInput | ChiefWhereInput[]
    id?: IntFilter<"Chief"> | number
    name?: StringFilter<"Chief"> | string
    email?: StringFilter<"Chief"> | string
    password?: StringFilter<"Chief"> | string
    phoneNumber?: StringFilter<"Chief"> | string
    IDCard?: StringNullableListFilter<"Chief">
    imageUrl?: StringNullableFilter<"Chief"> | string | null
    createdAt?: DateTimeFilter<"Chief"> | Date | string
    updatedAt?: DateTimeFilter<"Chief"> | Date | string
    dishes?: DishListRelationFilter
  }

  export type ChiefOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    IDCard?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dishes?: DishOrderByRelationAggregateInput
  }

  export type ChiefWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: ChiefWhereInput | ChiefWhereInput[]
    OR?: ChiefWhereInput[]
    NOT?: ChiefWhereInput | ChiefWhereInput[]
    name?: StringFilter<"Chief"> | string
    password?: StringFilter<"Chief"> | string
    phoneNumber?: StringFilter<"Chief"> | string
    IDCard?: StringNullableListFilter<"Chief">
    imageUrl?: StringNullableFilter<"Chief"> | string | null
    createdAt?: DateTimeFilter<"Chief"> | Date | string
    updatedAt?: DateTimeFilter<"Chief"> | Date | string
    dishes?: DishListRelationFilter
  }, "id" | "email">

  export type ChiefOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    IDCard?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ChiefCountOrderByAggregateInput
    _avg?: ChiefAvgOrderByAggregateInput
    _max?: ChiefMaxOrderByAggregateInput
    _min?: ChiefMinOrderByAggregateInput
    _sum?: ChiefSumOrderByAggregateInput
  }

  export type ChiefScalarWhereWithAggregatesInput = {
    AND?: ChiefScalarWhereWithAggregatesInput | ChiefScalarWhereWithAggregatesInput[]
    OR?: ChiefScalarWhereWithAggregatesInput[]
    NOT?: ChiefScalarWhereWithAggregatesInput | ChiefScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Chief"> | number
    name?: StringWithAggregatesFilter<"Chief"> | string
    email?: StringWithAggregatesFilter<"Chief"> | string
    password?: StringWithAggregatesFilter<"Chief"> | string
    phoneNumber?: StringWithAggregatesFilter<"Chief"> | string
    IDCard?: StringNullableListFilter<"Chief">
    imageUrl?: StringNullableWithAggregatesFilter<"Chief"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Chief"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Chief"> | Date | string
  }

  export type DeliveryBoyWhereInput = {
    AND?: DeliveryBoyWhereInput | DeliveryBoyWhereInput[]
    OR?: DeliveryBoyWhereInput[]
    NOT?: DeliveryBoyWhereInput | DeliveryBoyWhereInput[]
    id?: IntFilter<"DeliveryBoy"> | number
    createdAt?: DateTimeFilter<"DeliveryBoy"> | Date | string
    updatedAt?: DateTimeFilter<"DeliveryBoy"> | Date | string
    orders?: OrderListRelationFilter
  }

  export type DeliveryBoyOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    orders?: OrderOrderByRelationAggregateInput
  }

  export type DeliveryBoyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DeliveryBoyWhereInput | DeliveryBoyWhereInput[]
    OR?: DeliveryBoyWhereInput[]
    NOT?: DeliveryBoyWhereInput | DeliveryBoyWhereInput[]
    createdAt?: DateTimeFilter<"DeliveryBoy"> | Date | string
    updatedAt?: DateTimeFilter<"DeliveryBoy"> | Date | string
    orders?: OrderListRelationFilter
  }, "id">

  export type DeliveryBoyOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DeliveryBoyCountOrderByAggregateInput
    _avg?: DeliveryBoyAvgOrderByAggregateInput
    _max?: DeliveryBoyMaxOrderByAggregateInput
    _min?: DeliveryBoyMinOrderByAggregateInput
    _sum?: DeliveryBoySumOrderByAggregateInput
  }

  export type DeliveryBoyScalarWhereWithAggregatesInput = {
    AND?: DeliveryBoyScalarWhereWithAggregatesInput | DeliveryBoyScalarWhereWithAggregatesInput[]
    OR?: DeliveryBoyScalarWhereWithAggregatesInput[]
    NOT?: DeliveryBoyScalarWhereWithAggregatesInput | DeliveryBoyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"DeliveryBoy"> | number
    createdAt?: DateTimeWithAggregatesFilter<"DeliveryBoy"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DeliveryBoy"> | Date | string
  }

  export type DishWhereInput = {
    AND?: DishWhereInput | DishWhereInput[]
    OR?: DishWhereInput[]
    NOT?: DishWhereInput | DishWhereInput[]
    id?: IntFilter<"Dish"> | number
    title?: StringFilter<"Dish"> | string
    category?: StringFilter<"Dish"> | string
    description?: StringFilter<"Dish"> | string
    price?: FloatFilter<"Dish"> | number
    imageUrl?: StringNullableListFilter<"Dish">
    duration?: FloatFilter<"Dish"> | number
    ChiefId?: IntFilter<"Dish"> | number
    createdAt?: DateTimeFilter<"Dish"> | Date | string
    updatedAt?: DateTimeFilter<"Dish"> | Date | string
    Chiefs?: XOR<ChiefRelationFilter, ChiefWhereInput>
    ratings?: DishRatingListRelationFilter
    Orders?: OrderListRelationFilter
    dishFavorite?: ClientListRelationFilter
    ingDishes?: IngDishListRelationFilter
  }

  export type DishOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    category?: SortOrder
    description?: SortOrder
    price?: SortOrder
    imageUrl?: SortOrder
    duration?: SortOrder
    ChiefId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Chiefs?: ChiefOrderByWithRelationInput
    ratings?: DishRatingOrderByRelationAggregateInput
    Orders?: OrderOrderByRelationAggregateInput
    dishFavorite?: ClientOrderByRelationAggregateInput
    ingDishes?: IngDishOrderByRelationAggregateInput
  }

  export type DishWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DishWhereInput | DishWhereInput[]
    OR?: DishWhereInput[]
    NOT?: DishWhereInput | DishWhereInput[]
    title?: StringFilter<"Dish"> | string
    category?: StringFilter<"Dish"> | string
    description?: StringFilter<"Dish"> | string
    price?: FloatFilter<"Dish"> | number
    imageUrl?: StringNullableListFilter<"Dish">
    duration?: FloatFilter<"Dish"> | number
    ChiefId?: IntFilter<"Dish"> | number
    createdAt?: DateTimeFilter<"Dish"> | Date | string
    updatedAt?: DateTimeFilter<"Dish"> | Date | string
    Chiefs?: XOR<ChiefRelationFilter, ChiefWhereInput>
    ratings?: DishRatingListRelationFilter
    Orders?: OrderListRelationFilter
    dishFavorite?: ClientListRelationFilter
    ingDishes?: IngDishListRelationFilter
  }, "id">

  export type DishOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    category?: SortOrder
    description?: SortOrder
    price?: SortOrder
    imageUrl?: SortOrder
    duration?: SortOrder
    ChiefId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DishCountOrderByAggregateInput
    _avg?: DishAvgOrderByAggregateInput
    _max?: DishMaxOrderByAggregateInput
    _min?: DishMinOrderByAggregateInput
    _sum?: DishSumOrderByAggregateInput
  }

  export type DishScalarWhereWithAggregatesInput = {
    AND?: DishScalarWhereWithAggregatesInput | DishScalarWhereWithAggregatesInput[]
    OR?: DishScalarWhereWithAggregatesInput[]
    NOT?: DishScalarWhereWithAggregatesInput | DishScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Dish"> | number
    title?: StringWithAggregatesFilter<"Dish"> | string
    category?: StringWithAggregatesFilter<"Dish"> | string
    description?: StringWithAggregatesFilter<"Dish"> | string
    price?: FloatWithAggregatesFilter<"Dish"> | number
    imageUrl?: StringNullableListFilter<"Dish">
    duration?: FloatWithAggregatesFilter<"Dish"> | number
    ChiefId?: IntWithAggregatesFilter<"Dish"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Dish"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Dish"> | Date | string
  }

  export type IngredientsWhereInput = {
    AND?: IngredientsWhereInput | IngredientsWhereInput[]
    OR?: IngredientsWhereInput[]
    NOT?: IngredientsWhereInput | IngredientsWhereInput[]
    id?: IntFilter<"Ingredients"> | number
    name?: StringFilter<"Ingredients"> | string
    price?: FloatFilter<"Ingredients"> | number
    createdAt?: DateTimeFilter<"Ingredients"> | Date | string
    updatedAt?: DateTimeFilter<"Ingredients"> | Date | string
    ingDishes?: IngDishListRelationFilter
  }

  export type IngredientsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ingDishes?: IngDishOrderByRelationAggregateInput
  }

  export type IngredientsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: IngredientsWhereInput | IngredientsWhereInput[]
    OR?: IngredientsWhereInput[]
    NOT?: IngredientsWhereInput | IngredientsWhereInput[]
    name?: StringFilter<"Ingredients"> | string
    price?: FloatFilter<"Ingredients"> | number
    createdAt?: DateTimeFilter<"Ingredients"> | Date | string
    updatedAt?: DateTimeFilter<"Ingredients"> | Date | string
    ingDishes?: IngDishListRelationFilter
  }, "id">

  export type IngredientsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: IngredientsCountOrderByAggregateInput
    _avg?: IngredientsAvgOrderByAggregateInput
    _max?: IngredientsMaxOrderByAggregateInput
    _min?: IngredientsMinOrderByAggregateInput
    _sum?: IngredientsSumOrderByAggregateInput
  }

  export type IngredientsScalarWhereWithAggregatesInput = {
    AND?: IngredientsScalarWhereWithAggregatesInput | IngredientsScalarWhereWithAggregatesInput[]
    OR?: IngredientsScalarWhereWithAggregatesInput[]
    NOT?: IngredientsScalarWhereWithAggregatesInput | IngredientsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Ingredients"> | number
    name?: StringWithAggregatesFilter<"Ingredients"> | string
    price?: FloatWithAggregatesFilter<"Ingredients"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Ingredients"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Ingredients"> | Date | string
  }

  export type OrderWhereInput = {
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    id?: IntFilter<"Order"> | number
    totalAmount?: FloatFilter<"Order"> | number
    quantity?: IntFilter<"Order"> | number
    status?: EnumOrderStatusFilter<"Order"> | $Enums.OrderStatus
    clientId?: IntFilter<"Order"> | number
    dishId?: IntFilter<"Order"> | number
    deliveryBoyId?: IntFilter<"Order"> | number
    createdAt?: DateTimeFilter<"Order"> | Date | string
    updatedAt?: DateTimeFilter<"Order"> | Date | string
    client?: XOR<ClientRelationFilter, ClientWhereInput>
    dish?: XOR<DishRelationFilter, DishWhereInput>
    deliveryBoy?: XOR<DeliveryBoyRelationFilter, DeliveryBoyWhereInput>
    ingDishes?: IngDishListRelationFilter
  }

  export type OrderOrderByWithRelationInput = {
    id?: SortOrder
    totalAmount?: SortOrder
    quantity?: SortOrder
    status?: SortOrder
    clientId?: SortOrder
    dishId?: SortOrder
    deliveryBoyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    client?: ClientOrderByWithRelationInput
    dish?: DishOrderByWithRelationInput
    deliveryBoy?: DeliveryBoyOrderByWithRelationInput
    ingDishes?: IngDishOrderByRelationAggregateInput
  }

  export type OrderWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    totalAmount?: FloatFilter<"Order"> | number
    quantity?: IntFilter<"Order"> | number
    status?: EnumOrderStatusFilter<"Order"> | $Enums.OrderStatus
    clientId?: IntFilter<"Order"> | number
    dishId?: IntFilter<"Order"> | number
    deliveryBoyId?: IntFilter<"Order"> | number
    createdAt?: DateTimeFilter<"Order"> | Date | string
    updatedAt?: DateTimeFilter<"Order"> | Date | string
    client?: XOR<ClientRelationFilter, ClientWhereInput>
    dish?: XOR<DishRelationFilter, DishWhereInput>
    deliveryBoy?: XOR<DeliveryBoyRelationFilter, DeliveryBoyWhereInput>
    ingDishes?: IngDishListRelationFilter
  }, "id">

  export type OrderOrderByWithAggregationInput = {
    id?: SortOrder
    totalAmount?: SortOrder
    quantity?: SortOrder
    status?: SortOrder
    clientId?: SortOrder
    dishId?: SortOrder
    deliveryBoyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: OrderCountOrderByAggregateInput
    _avg?: OrderAvgOrderByAggregateInput
    _max?: OrderMaxOrderByAggregateInput
    _min?: OrderMinOrderByAggregateInput
    _sum?: OrderSumOrderByAggregateInput
  }

  export type OrderScalarWhereWithAggregatesInput = {
    AND?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    OR?: OrderScalarWhereWithAggregatesInput[]
    NOT?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Order"> | number
    totalAmount?: FloatWithAggregatesFilter<"Order"> | number
    quantity?: IntWithAggregatesFilter<"Order"> | number
    status?: EnumOrderStatusWithAggregatesFilter<"Order"> | $Enums.OrderStatus
    clientId?: IntWithAggregatesFilter<"Order"> | number
    dishId?: IntWithAggregatesFilter<"Order"> | number
    deliveryBoyId?: IntWithAggregatesFilter<"Order"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Order"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Order"> | Date | string
  }

  export type IngDishWhereInput = {
    AND?: IngDishWhereInput | IngDishWhereInput[]
    OR?: IngDishWhereInput[]
    NOT?: IngDishWhereInput | IngDishWhereInput[]
    id?: IntFilter<"IngDish"> | number
    dishId?: IntFilter<"IngDish"> | number
    ingredientId?: IntFilter<"IngDish"> | number
    orderId?: IntFilter<"IngDish"> | number
    added?: BoolFilter<"IngDish"> | boolean
    createdAt?: DateTimeFilter<"IngDish"> | Date | string
    updatedAt?: DateTimeFilter<"IngDish"> | Date | string
    dish?: XOR<DishRelationFilter, DishWhereInput>
    ingredient?: XOR<IngredientsRelationFilter, IngredientsWhereInput>
    order?: XOR<OrderRelationFilter, OrderWhereInput>
  }

  export type IngDishOrderByWithRelationInput = {
    id?: SortOrder
    dishId?: SortOrder
    ingredientId?: SortOrder
    orderId?: SortOrder
    added?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dish?: DishOrderByWithRelationInput
    ingredient?: IngredientsOrderByWithRelationInput
    order?: OrderOrderByWithRelationInput
  }

  export type IngDishWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    dishId_ingredientId_orderId?: IngDishDishIdIngredientIdOrderIdCompoundUniqueInput
    AND?: IngDishWhereInput | IngDishWhereInput[]
    OR?: IngDishWhereInput[]
    NOT?: IngDishWhereInput | IngDishWhereInput[]
    dishId?: IntFilter<"IngDish"> | number
    ingredientId?: IntFilter<"IngDish"> | number
    orderId?: IntFilter<"IngDish"> | number
    added?: BoolFilter<"IngDish"> | boolean
    createdAt?: DateTimeFilter<"IngDish"> | Date | string
    updatedAt?: DateTimeFilter<"IngDish"> | Date | string
    dish?: XOR<DishRelationFilter, DishWhereInput>
    ingredient?: XOR<IngredientsRelationFilter, IngredientsWhereInput>
    order?: XOR<OrderRelationFilter, OrderWhereInput>
  }, "id" | "dishId_ingredientId_orderId">

  export type IngDishOrderByWithAggregationInput = {
    id?: SortOrder
    dishId?: SortOrder
    ingredientId?: SortOrder
    orderId?: SortOrder
    added?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: IngDishCountOrderByAggregateInput
    _avg?: IngDishAvgOrderByAggregateInput
    _max?: IngDishMaxOrderByAggregateInput
    _min?: IngDishMinOrderByAggregateInput
    _sum?: IngDishSumOrderByAggregateInput
  }

  export type IngDishScalarWhereWithAggregatesInput = {
    AND?: IngDishScalarWhereWithAggregatesInput | IngDishScalarWhereWithAggregatesInput[]
    OR?: IngDishScalarWhereWithAggregatesInput[]
    NOT?: IngDishScalarWhereWithAggregatesInput | IngDishScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"IngDish"> | number
    dishId?: IntWithAggregatesFilter<"IngDish"> | number
    ingredientId?: IntWithAggregatesFilter<"IngDish"> | number
    orderId?: IntWithAggregatesFilter<"IngDish"> | number
    added?: BoolWithAggregatesFilter<"IngDish"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"IngDish"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"IngDish"> | Date | string
  }

  export type DishRatingWhereInput = {
    AND?: DishRatingWhereInput | DishRatingWhereInput[]
    OR?: DishRatingWhereInput[]
    NOT?: DishRatingWhereInput | DishRatingWhereInput[]
    id?: IntFilter<"DishRating"> | number
    rating?: IntFilter<"DishRating"> | number
    comment?: StringNullableFilter<"DishRating"> | string | null
    clientId?: IntFilter<"DishRating"> | number
    dishId?: IntFilter<"DishRating"> | number
    createdAt?: DateTimeFilter<"DishRating"> | Date | string
    updatedAt?: DateTimeFilter<"DishRating"> | Date | string
    client?: XOR<ClientRelationFilter, ClientWhereInput>
    dish?: XOR<DishRelationFilter, DishWhereInput>
  }

  export type DishRatingOrderByWithRelationInput = {
    id?: SortOrder
    rating?: SortOrder
    comment?: SortOrderInput | SortOrder
    clientId?: SortOrder
    dishId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    client?: ClientOrderByWithRelationInput
    dish?: DishOrderByWithRelationInput
  }

  export type DishRatingWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DishRatingWhereInput | DishRatingWhereInput[]
    OR?: DishRatingWhereInput[]
    NOT?: DishRatingWhereInput | DishRatingWhereInput[]
    rating?: IntFilter<"DishRating"> | number
    comment?: StringNullableFilter<"DishRating"> | string | null
    clientId?: IntFilter<"DishRating"> | number
    dishId?: IntFilter<"DishRating"> | number
    createdAt?: DateTimeFilter<"DishRating"> | Date | string
    updatedAt?: DateTimeFilter<"DishRating"> | Date | string
    client?: XOR<ClientRelationFilter, ClientWhereInput>
    dish?: XOR<DishRelationFilter, DishWhereInput>
  }, "id">

  export type DishRatingOrderByWithAggregationInput = {
    id?: SortOrder
    rating?: SortOrder
    comment?: SortOrderInput | SortOrder
    clientId?: SortOrder
    dishId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DishRatingCountOrderByAggregateInput
    _avg?: DishRatingAvgOrderByAggregateInput
    _max?: DishRatingMaxOrderByAggregateInput
    _min?: DishRatingMinOrderByAggregateInput
    _sum?: DishRatingSumOrderByAggregateInput
  }

  export type DishRatingScalarWhereWithAggregatesInput = {
    AND?: DishRatingScalarWhereWithAggregatesInput | DishRatingScalarWhereWithAggregatesInput[]
    OR?: DishRatingScalarWhereWithAggregatesInput[]
    NOT?: DishRatingScalarWhereWithAggregatesInput | DishRatingScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"DishRating"> | number
    rating?: IntWithAggregatesFilter<"DishRating"> | number
    comment?: StringNullableWithAggregatesFilter<"DishRating"> | string | null
    clientId?: IntWithAggregatesFilter<"DishRating"> | number
    dishId?: IntWithAggregatesFilter<"DishRating"> | number
    createdAt?: DateTimeWithAggregatesFilter<"DishRating"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DishRating"> | Date | string
  }

  export type AdminWhereInput = {
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    id?: IntFilter<"Admin"> | number
    name?: StringFilter<"Admin"> | string
    email?: StringFilter<"Admin"> | string
    password?: StringFilter<"Admin"> | string
    createdAt?: DateTimeFilter<"Admin"> | Date | string
    updatedAt?: DateTimeFilter<"Admin"> | Date | string
  }

  export type AdminOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AdminWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    name?: StringFilter<"Admin"> | string
    password?: StringFilter<"Admin"> | string
    createdAt?: DateTimeFilter<"Admin"> | Date | string
    updatedAt?: DateTimeFilter<"Admin"> | Date | string
  }, "id" | "email">

  export type AdminOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AdminCountOrderByAggregateInput
    _avg?: AdminAvgOrderByAggregateInput
    _max?: AdminMaxOrderByAggregateInput
    _min?: AdminMinOrderByAggregateInput
    _sum?: AdminSumOrderByAggregateInput
  }

  export type AdminScalarWhereWithAggregatesInput = {
    AND?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    OR?: AdminScalarWhereWithAggregatesInput[]
    NOT?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Admin"> | number
    name?: StringWithAggregatesFilter<"Admin"> | string
    email?: StringWithAggregatesFilter<"Admin"> | string
    password?: StringWithAggregatesFilter<"Admin"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Admin"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Admin"> | Date | string
  }

  export type ClientCreateInput = {
    name: string
    email: string
    password: string
    phoneNumber: string
    address: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orders?: OrderCreateNestedManyWithoutClientInput
    dishRatings?: DishRatingCreateNestedManyWithoutClientInput
    dishfavorites?: DishCreateNestedManyWithoutDishFavoriteInput
  }

  export type ClientUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    password: string
    phoneNumber: string
    address: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orders?: OrderUncheckedCreateNestedManyWithoutClientInput
    dishRatings?: DishRatingUncheckedCreateNestedManyWithoutClientInput
    dishfavorites?: DishUncheckedCreateNestedManyWithoutDishFavoriteInput
  }

  export type ClientUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: OrderUpdateManyWithoutClientNestedInput
    dishRatings?: DishRatingUpdateManyWithoutClientNestedInput
    dishfavorites?: DishUpdateManyWithoutDishFavoriteNestedInput
  }

  export type ClientUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: OrderUncheckedUpdateManyWithoutClientNestedInput
    dishRatings?: DishRatingUncheckedUpdateManyWithoutClientNestedInput
    dishfavorites?: DishUncheckedUpdateManyWithoutDishFavoriteNestedInput
  }

  export type ClientCreateManyInput = {
    id?: number
    name: string
    email: string
    password: string
    phoneNumber: string
    address: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClientUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChiefCreateInput = {
    name: string
    email: string
    password: string
    phoneNumber: string
    IDCard?: ChiefCreateIDCardInput | string[]
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    dishes?: DishCreateNestedManyWithoutChiefsInput
  }

  export type ChiefUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    password: string
    phoneNumber: string
    IDCard?: ChiefCreateIDCardInput | string[]
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    dishes?: DishUncheckedCreateNestedManyWithoutChiefsInput
  }

  export type ChiefUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    IDCard?: ChiefUpdateIDCardInput | string[]
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dishes?: DishUpdateManyWithoutChiefsNestedInput
  }

  export type ChiefUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    IDCard?: ChiefUpdateIDCardInput | string[]
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dishes?: DishUncheckedUpdateManyWithoutChiefsNestedInput
  }

  export type ChiefCreateManyInput = {
    id?: number
    name: string
    email: string
    password: string
    phoneNumber: string
    IDCard?: ChiefCreateIDCardInput | string[]
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChiefUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    IDCard?: ChiefUpdateIDCardInput | string[]
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChiefUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    IDCard?: ChiefUpdateIDCardInput | string[]
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeliveryBoyCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    orders?: OrderCreateNestedManyWithoutDeliveryBoyInput
  }

  export type DeliveryBoyUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    orders?: OrderUncheckedCreateNestedManyWithoutDeliveryBoyInput
  }

  export type DeliveryBoyUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: OrderUpdateManyWithoutDeliveryBoyNestedInput
  }

  export type DeliveryBoyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: OrderUncheckedUpdateManyWithoutDeliveryBoyNestedInput
  }

  export type DeliveryBoyCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DeliveryBoyUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeliveryBoyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DishCreateInput = {
    title: string
    category: string
    description: string
    price: number
    imageUrl?: DishCreateimageUrlInput | string[]
    duration: number
    createdAt?: Date | string
    updatedAt?: Date | string
    Chiefs: ChiefCreateNestedOneWithoutDishesInput
    ratings?: DishRatingCreateNestedManyWithoutDishInput
    Orders?: OrderCreateNestedManyWithoutDishInput
    dishFavorite?: ClientCreateNestedManyWithoutDishfavoritesInput
    ingDishes?: IngDishCreateNestedManyWithoutDishInput
  }

  export type DishUncheckedCreateInput = {
    id?: number
    title: string
    category: string
    description: string
    price: number
    imageUrl?: DishCreateimageUrlInput | string[]
    duration: number
    ChiefId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    ratings?: DishRatingUncheckedCreateNestedManyWithoutDishInput
    Orders?: OrderUncheckedCreateNestedManyWithoutDishInput
    dishFavorite?: ClientUncheckedCreateNestedManyWithoutDishfavoritesInput
    ingDishes?: IngDishUncheckedCreateNestedManyWithoutDishInput
  }

  export type DishUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    imageUrl?: DishUpdateimageUrlInput | string[]
    duration?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Chiefs?: ChiefUpdateOneRequiredWithoutDishesNestedInput
    ratings?: DishRatingUpdateManyWithoutDishNestedInput
    Orders?: OrderUpdateManyWithoutDishNestedInput
    dishFavorite?: ClientUpdateManyWithoutDishfavoritesNestedInput
    ingDishes?: IngDishUpdateManyWithoutDishNestedInput
  }

  export type DishUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    imageUrl?: DishUpdateimageUrlInput | string[]
    duration?: FloatFieldUpdateOperationsInput | number
    ChiefId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ratings?: DishRatingUncheckedUpdateManyWithoutDishNestedInput
    Orders?: OrderUncheckedUpdateManyWithoutDishNestedInput
    dishFavorite?: ClientUncheckedUpdateManyWithoutDishfavoritesNestedInput
    ingDishes?: IngDishUncheckedUpdateManyWithoutDishNestedInput
  }

  export type DishCreateManyInput = {
    id?: number
    title: string
    category: string
    description: string
    price: number
    imageUrl?: DishCreateimageUrlInput | string[]
    duration: number
    ChiefId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DishUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    imageUrl?: DishUpdateimageUrlInput | string[]
    duration?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DishUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    imageUrl?: DishUpdateimageUrlInput | string[]
    duration?: FloatFieldUpdateOperationsInput | number
    ChiefId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IngredientsCreateInput = {
    name: string
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    ingDishes?: IngDishCreateNestedManyWithoutIngredientInput
  }

  export type IngredientsUncheckedCreateInput = {
    id?: number
    name: string
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    ingDishes?: IngDishUncheckedCreateNestedManyWithoutIngredientInput
  }

  export type IngredientsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ingDishes?: IngDishUpdateManyWithoutIngredientNestedInput
  }

  export type IngredientsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ingDishes?: IngDishUncheckedUpdateManyWithoutIngredientNestedInput
  }

  export type IngredientsCreateManyInput = {
    id?: number
    name: string
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type IngredientsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IngredientsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderCreateInput = {
    totalAmount: number
    quantity: number
    status: $Enums.OrderStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    client: ClientCreateNestedOneWithoutOrdersInput
    dish: DishCreateNestedOneWithoutOrdersInput
    deliveryBoy: DeliveryBoyCreateNestedOneWithoutOrdersInput
    ingDishes?: IngDishCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateInput = {
    id?: number
    totalAmount: number
    quantity: number
    status: $Enums.OrderStatus
    clientId: number
    dishId: number
    deliveryBoyId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    ingDishes?: IngDishUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderUpdateInput = {
    totalAmount?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: ClientUpdateOneRequiredWithoutOrdersNestedInput
    dish?: DishUpdateOneRequiredWithoutOrdersNestedInput
    deliveryBoy?: DeliveryBoyUpdateOneRequiredWithoutOrdersNestedInput
    ingDishes?: IngDishUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    totalAmount?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    clientId?: IntFieldUpdateOperationsInput | number
    dishId?: IntFieldUpdateOperationsInput | number
    deliveryBoyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ingDishes?: IngDishUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderCreateManyInput = {
    id?: number
    totalAmount: number
    quantity: number
    status: $Enums.OrderStatus
    clientId: number
    dishId: number
    deliveryBoyId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderUpdateManyMutationInput = {
    totalAmount?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    totalAmount?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    clientId?: IntFieldUpdateOperationsInput | number
    dishId?: IntFieldUpdateOperationsInput | number
    deliveryBoyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IngDishCreateInput = {
    added: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    dish: DishCreateNestedOneWithoutIngDishesInput
    ingredient: IngredientsCreateNestedOneWithoutIngDishesInput
    order: OrderCreateNestedOneWithoutIngDishesInput
  }

  export type IngDishUncheckedCreateInput = {
    id?: number
    dishId: number
    ingredientId: number
    orderId: number
    added: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type IngDishUpdateInput = {
    added?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dish?: DishUpdateOneRequiredWithoutIngDishesNestedInput
    ingredient?: IngredientsUpdateOneRequiredWithoutIngDishesNestedInput
    order?: OrderUpdateOneRequiredWithoutIngDishesNestedInput
  }

  export type IngDishUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    dishId?: IntFieldUpdateOperationsInput | number
    ingredientId?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    added?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IngDishCreateManyInput = {
    id?: number
    dishId: number
    ingredientId: number
    orderId: number
    added: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type IngDishUpdateManyMutationInput = {
    added?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IngDishUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    dishId?: IntFieldUpdateOperationsInput | number
    ingredientId?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    added?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DishRatingCreateInput = {
    rating: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    client: ClientCreateNestedOneWithoutDishRatingsInput
    dish: DishCreateNestedOneWithoutRatingsInput
  }

  export type DishRatingUncheckedCreateInput = {
    id?: number
    rating: number
    comment?: string | null
    clientId: number
    dishId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DishRatingUpdateInput = {
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: ClientUpdateOneRequiredWithoutDishRatingsNestedInput
    dish?: DishUpdateOneRequiredWithoutRatingsNestedInput
  }

  export type DishRatingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    clientId?: IntFieldUpdateOperationsInput | number
    dishId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DishRatingCreateManyInput = {
    id?: number
    rating: number
    comment?: string | null
    clientId: number
    dishId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DishRatingUpdateManyMutationInput = {
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DishRatingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    clientId?: IntFieldUpdateOperationsInput | number
    dishId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminCreateInput = {
    name: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AdminUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AdminUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminCreateManyInput = {
    id?: number
    name: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AdminUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type OrderListRelationFilter = {
    every?: OrderWhereInput
    some?: OrderWhereInput
    none?: OrderWhereInput
  }

  export type DishRatingListRelationFilter = {
    every?: DishRatingWhereInput
    some?: DishRatingWhereInput
    none?: DishRatingWhereInput
  }

  export type DishListRelationFilter = {
    every?: DishWhereInput
    some?: DishWhereInput
    none?: DishWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type OrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DishRatingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DishOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClientCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    address?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClientAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ClientMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    address?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClientMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    address?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClientSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type ChiefCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    IDCard?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChiefAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ChiefMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChiefMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChiefSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DeliveryBoyCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DeliveryBoyAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DeliveryBoyMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DeliveryBoyMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DeliveryBoySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type ChiefRelationFilter = {
    is?: ChiefWhereInput
    isNot?: ChiefWhereInput
  }

  export type ClientListRelationFilter = {
    every?: ClientWhereInput
    some?: ClientWhereInput
    none?: ClientWhereInput
  }

  export type IngDishListRelationFilter = {
    every?: IngDishWhereInput
    some?: IngDishWhereInput
    none?: IngDishWhereInput
  }

  export type ClientOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type IngDishOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DishCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    category?: SortOrder
    description?: SortOrder
    price?: SortOrder
    imageUrl?: SortOrder
    duration?: SortOrder
    ChiefId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DishAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    duration?: SortOrder
    ChiefId?: SortOrder
  }

  export type DishMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    category?: SortOrder
    description?: SortOrder
    price?: SortOrder
    duration?: SortOrder
    ChiefId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DishMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    category?: SortOrder
    description?: SortOrder
    price?: SortOrder
    duration?: SortOrder
    ChiefId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DishSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    duration?: SortOrder
    ChiefId?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type IngredientsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IngredientsAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
  }

  export type IngredientsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IngredientsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IngredientsSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
  }

  export type EnumOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusFilter<$PrismaModel> | $Enums.OrderStatus
  }

  export type ClientRelationFilter = {
    is?: ClientWhereInput
    isNot?: ClientWhereInput
  }

  export type DishRelationFilter = {
    is?: DishWhereInput
    isNot?: DishWhereInput
  }

  export type DeliveryBoyRelationFilter = {
    is?: DeliveryBoyWhereInput
    isNot?: DeliveryBoyWhereInput
  }

  export type OrderCountOrderByAggregateInput = {
    id?: SortOrder
    totalAmount?: SortOrder
    quantity?: SortOrder
    status?: SortOrder
    clientId?: SortOrder
    dishId?: SortOrder
    deliveryBoyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrderAvgOrderByAggregateInput = {
    id?: SortOrder
    totalAmount?: SortOrder
    quantity?: SortOrder
    clientId?: SortOrder
    dishId?: SortOrder
    deliveryBoyId?: SortOrder
  }

  export type OrderMaxOrderByAggregateInput = {
    id?: SortOrder
    totalAmount?: SortOrder
    quantity?: SortOrder
    status?: SortOrder
    clientId?: SortOrder
    dishId?: SortOrder
    deliveryBoyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrderMinOrderByAggregateInput = {
    id?: SortOrder
    totalAmount?: SortOrder
    quantity?: SortOrder
    status?: SortOrder
    clientId?: SortOrder
    dishId?: SortOrder
    deliveryBoyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrderSumOrderByAggregateInput = {
    id?: SortOrder
    totalAmount?: SortOrder
    quantity?: SortOrder
    clientId?: SortOrder
    dishId?: SortOrder
    deliveryBoyId?: SortOrder
  }

  export type EnumOrderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel> | $Enums.OrderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderStatusFilter<$PrismaModel>
    _max?: NestedEnumOrderStatusFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type IngredientsRelationFilter = {
    is?: IngredientsWhereInput
    isNot?: IngredientsWhereInput
  }

  export type OrderRelationFilter = {
    is?: OrderWhereInput
    isNot?: OrderWhereInput
  }

  export type IngDishDishIdIngredientIdOrderIdCompoundUniqueInput = {
    dishId: number
    ingredientId: number
    orderId: number
  }

  export type IngDishCountOrderByAggregateInput = {
    id?: SortOrder
    dishId?: SortOrder
    ingredientId?: SortOrder
    orderId?: SortOrder
    added?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IngDishAvgOrderByAggregateInput = {
    id?: SortOrder
    dishId?: SortOrder
    ingredientId?: SortOrder
    orderId?: SortOrder
  }

  export type IngDishMaxOrderByAggregateInput = {
    id?: SortOrder
    dishId?: SortOrder
    ingredientId?: SortOrder
    orderId?: SortOrder
    added?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IngDishMinOrderByAggregateInput = {
    id?: SortOrder
    dishId?: SortOrder
    ingredientId?: SortOrder
    orderId?: SortOrder
    added?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IngDishSumOrderByAggregateInput = {
    id?: SortOrder
    dishId?: SortOrder
    ingredientId?: SortOrder
    orderId?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DishRatingCountOrderByAggregateInput = {
    id?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    clientId?: SortOrder
    dishId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DishRatingAvgOrderByAggregateInput = {
    id?: SortOrder
    rating?: SortOrder
    clientId?: SortOrder
    dishId?: SortOrder
  }

  export type DishRatingMaxOrderByAggregateInput = {
    id?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    clientId?: SortOrder
    dishId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DishRatingMinOrderByAggregateInput = {
    id?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    clientId?: SortOrder
    dishId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DishRatingSumOrderByAggregateInput = {
    id?: SortOrder
    rating?: SortOrder
    clientId?: SortOrder
    dishId?: SortOrder
  }

  export type AdminCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AdminAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AdminMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AdminMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AdminSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type OrderCreateNestedManyWithoutClientInput = {
    create?: XOR<OrderCreateWithoutClientInput, OrderUncheckedCreateWithoutClientInput> | OrderCreateWithoutClientInput[] | OrderUncheckedCreateWithoutClientInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutClientInput | OrderCreateOrConnectWithoutClientInput[]
    createMany?: OrderCreateManyClientInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type DishRatingCreateNestedManyWithoutClientInput = {
    create?: XOR<DishRatingCreateWithoutClientInput, DishRatingUncheckedCreateWithoutClientInput> | DishRatingCreateWithoutClientInput[] | DishRatingUncheckedCreateWithoutClientInput[]
    connectOrCreate?: DishRatingCreateOrConnectWithoutClientInput | DishRatingCreateOrConnectWithoutClientInput[]
    createMany?: DishRatingCreateManyClientInputEnvelope
    connect?: DishRatingWhereUniqueInput | DishRatingWhereUniqueInput[]
  }

  export type DishCreateNestedManyWithoutDishFavoriteInput = {
    create?: XOR<DishCreateWithoutDishFavoriteInput, DishUncheckedCreateWithoutDishFavoriteInput> | DishCreateWithoutDishFavoriteInput[] | DishUncheckedCreateWithoutDishFavoriteInput[]
    connectOrCreate?: DishCreateOrConnectWithoutDishFavoriteInput | DishCreateOrConnectWithoutDishFavoriteInput[]
    connect?: DishWhereUniqueInput | DishWhereUniqueInput[]
  }

  export type OrderUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<OrderCreateWithoutClientInput, OrderUncheckedCreateWithoutClientInput> | OrderCreateWithoutClientInput[] | OrderUncheckedCreateWithoutClientInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutClientInput | OrderCreateOrConnectWithoutClientInput[]
    createMany?: OrderCreateManyClientInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type DishRatingUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<DishRatingCreateWithoutClientInput, DishRatingUncheckedCreateWithoutClientInput> | DishRatingCreateWithoutClientInput[] | DishRatingUncheckedCreateWithoutClientInput[]
    connectOrCreate?: DishRatingCreateOrConnectWithoutClientInput | DishRatingCreateOrConnectWithoutClientInput[]
    createMany?: DishRatingCreateManyClientInputEnvelope
    connect?: DishRatingWhereUniqueInput | DishRatingWhereUniqueInput[]
  }

  export type DishUncheckedCreateNestedManyWithoutDishFavoriteInput = {
    create?: XOR<DishCreateWithoutDishFavoriteInput, DishUncheckedCreateWithoutDishFavoriteInput> | DishCreateWithoutDishFavoriteInput[] | DishUncheckedCreateWithoutDishFavoriteInput[]
    connectOrCreate?: DishCreateOrConnectWithoutDishFavoriteInput | DishCreateOrConnectWithoutDishFavoriteInput[]
    connect?: DishWhereUniqueInput | DishWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type OrderUpdateManyWithoutClientNestedInput = {
    create?: XOR<OrderCreateWithoutClientInput, OrderUncheckedCreateWithoutClientInput> | OrderCreateWithoutClientInput[] | OrderUncheckedCreateWithoutClientInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutClientInput | OrderCreateOrConnectWithoutClientInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutClientInput | OrderUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: OrderCreateManyClientInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutClientInput | OrderUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutClientInput | OrderUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type DishRatingUpdateManyWithoutClientNestedInput = {
    create?: XOR<DishRatingCreateWithoutClientInput, DishRatingUncheckedCreateWithoutClientInput> | DishRatingCreateWithoutClientInput[] | DishRatingUncheckedCreateWithoutClientInput[]
    connectOrCreate?: DishRatingCreateOrConnectWithoutClientInput | DishRatingCreateOrConnectWithoutClientInput[]
    upsert?: DishRatingUpsertWithWhereUniqueWithoutClientInput | DishRatingUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: DishRatingCreateManyClientInputEnvelope
    set?: DishRatingWhereUniqueInput | DishRatingWhereUniqueInput[]
    disconnect?: DishRatingWhereUniqueInput | DishRatingWhereUniqueInput[]
    delete?: DishRatingWhereUniqueInput | DishRatingWhereUniqueInput[]
    connect?: DishRatingWhereUniqueInput | DishRatingWhereUniqueInput[]
    update?: DishRatingUpdateWithWhereUniqueWithoutClientInput | DishRatingUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: DishRatingUpdateManyWithWhereWithoutClientInput | DishRatingUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: DishRatingScalarWhereInput | DishRatingScalarWhereInput[]
  }

  export type DishUpdateManyWithoutDishFavoriteNestedInput = {
    create?: XOR<DishCreateWithoutDishFavoriteInput, DishUncheckedCreateWithoutDishFavoriteInput> | DishCreateWithoutDishFavoriteInput[] | DishUncheckedCreateWithoutDishFavoriteInput[]
    connectOrCreate?: DishCreateOrConnectWithoutDishFavoriteInput | DishCreateOrConnectWithoutDishFavoriteInput[]
    upsert?: DishUpsertWithWhereUniqueWithoutDishFavoriteInput | DishUpsertWithWhereUniqueWithoutDishFavoriteInput[]
    set?: DishWhereUniqueInput | DishWhereUniqueInput[]
    disconnect?: DishWhereUniqueInput | DishWhereUniqueInput[]
    delete?: DishWhereUniqueInput | DishWhereUniqueInput[]
    connect?: DishWhereUniqueInput | DishWhereUniqueInput[]
    update?: DishUpdateWithWhereUniqueWithoutDishFavoriteInput | DishUpdateWithWhereUniqueWithoutDishFavoriteInput[]
    updateMany?: DishUpdateManyWithWhereWithoutDishFavoriteInput | DishUpdateManyWithWhereWithoutDishFavoriteInput[]
    deleteMany?: DishScalarWhereInput | DishScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type OrderUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<OrderCreateWithoutClientInput, OrderUncheckedCreateWithoutClientInput> | OrderCreateWithoutClientInput[] | OrderUncheckedCreateWithoutClientInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutClientInput | OrderCreateOrConnectWithoutClientInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutClientInput | OrderUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: OrderCreateManyClientInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutClientInput | OrderUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutClientInput | OrderUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type DishRatingUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<DishRatingCreateWithoutClientInput, DishRatingUncheckedCreateWithoutClientInput> | DishRatingCreateWithoutClientInput[] | DishRatingUncheckedCreateWithoutClientInput[]
    connectOrCreate?: DishRatingCreateOrConnectWithoutClientInput | DishRatingCreateOrConnectWithoutClientInput[]
    upsert?: DishRatingUpsertWithWhereUniqueWithoutClientInput | DishRatingUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: DishRatingCreateManyClientInputEnvelope
    set?: DishRatingWhereUniqueInput | DishRatingWhereUniqueInput[]
    disconnect?: DishRatingWhereUniqueInput | DishRatingWhereUniqueInput[]
    delete?: DishRatingWhereUniqueInput | DishRatingWhereUniqueInput[]
    connect?: DishRatingWhereUniqueInput | DishRatingWhereUniqueInput[]
    update?: DishRatingUpdateWithWhereUniqueWithoutClientInput | DishRatingUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: DishRatingUpdateManyWithWhereWithoutClientInput | DishRatingUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: DishRatingScalarWhereInput | DishRatingScalarWhereInput[]
  }

  export type DishUncheckedUpdateManyWithoutDishFavoriteNestedInput = {
    create?: XOR<DishCreateWithoutDishFavoriteInput, DishUncheckedCreateWithoutDishFavoriteInput> | DishCreateWithoutDishFavoriteInput[] | DishUncheckedCreateWithoutDishFavoriteInput[]
    connectOrCreate?: DishCreateOrConnectWithoutDishFavoriteInput | DishCreateOrConnectWithoutDishFavoriteInput[]
    upsert?: DishUpsertWithWhereUniqueWithoutDishFavoriteInput | DishUpsertWithWhereUniqueWithoutDishFavoriteInput[]
    set?: DishWhereUniqueInput | DishWhereUniqueInput[]
    disconnect?: DishWhereUniqueInput | DishWhereUniqueInput[]
    delete?: DishWhereUniqueInput | DishWhereUniqueInput[]
    connect?: DishWhereUniqueInput | DishWhereUniqueInput[]
    update?: DishUpdateWithWhereUniqueWithoutDishFavoriteInput | DishUpdateWithWhereUniqueWithoutDishFavoriteInput[]
    updateMany?: DishUpdateManyWithWhereWithoutDishFavoriteInput | DishUpdateManyWithWhereWithoutDishFavoriteInput[]
    deleteMany?: DishScalarWhereInput | DishScalarWhereInput[]
  }

  export type ChiefCreateIDCardInput = {
    set: string[]
  }

  export type DishCreateNestedManyWithoutChiefsInput = {
    create?: XOR<DishCreateWithoutChiefsInput, DishUncheckedCreateWithoutChiefsInput> | DishCreateWithoutChiefsInput[] | DishUncheckedCreateWithoutChiefsInput[]
    connectOrCreate?: DishCreateOrConnectWithoutChiefsInput | DishCreateOrConnectWithoutChiefsInput[]
    createMany?: DishCreateManyChiefsInputEnvelope
    connect?: DishWhereUniqueInput | DishWhereUniqueInput[]
  }

  export type DishUncheckedCreateNestedManyWithoutChiefsInput = {
    create?: XOR<DishCreateWithoutChiefsInput, DishUncheckedCreateWithoutChiefsInput> | DishCreateWithoutChiefsInput[] | DishUncheckedCreateWithoutChiefsInput[]
    connectOrCreate?: DishCreateOrConnectWithoutChiefsInput | DishCreateOrConnectWithoutChiefsInput[]
    createMany?: DishCreateManyChiefsInputEnvelope
    connect?: DishWhereUniqueInput | DishWhereUniqueInput[]
  }

  export type ChiefUpdateIDCardInput = {
    set?: string[]
    push?: string | string[]
  }

  export type DishUpdateManyWithoutChiefsNestedInput = {
    create?: XOR<DishCreateWithoutChiefsInput, DishUncheckedCreateWithoutChiefsInput> | DishCreateWithoutChiefsInput[] | DishUncheckedCreateWithoutChiefsInput[]
    connectOrCreate?: DishCreateOrConnectWithoutChiefsInput | DishCreateOrConnectWithoutChiefsInput[]
    upsert?: DishUpsertWithWhereUniqueWithoutChiefsInput | DishUpsertWithWhereUniqueWithoutChiefsInput[]
    createMany?: DishCreateManyChiefsInputEnvelope
    set?: DishWhereUniqueInput | DishWhereUniqueInput[]
    disconnect?: DishWhereUniqueInput | DishWhereUniqueInput[]
    delete?: DishWhereUniqueInput | DishWhereUniqueInput[]
    connect?: DishWhereUniqueInput | DishWhereUniqueInput[]
    update?: DishUpdateWithWhereUniqueWithoutChiefsInput | DishUpdateWithWhereUniqueWithoutChiefsInput[]
    updateMany?: DishUpdateManyWithWhereWithoutChiefsInput | DishUpdateManyWithWhereWithoutChiefsInput[]
    deleteMany?: DishScalarWhereInput | DishScalarWhereInput[]
  }

  export type DishUncheckedUpdateManyWithoutChiefsNestedInput = {
    create?: XOR<DishCreateWithoutChiefsInput, DishUncheckedCreateWithoutChiefsInput> | DishCreateWithoutChiefsInput[] | DishUncheckedCreateWithoutChiefsInput[]
    connectOrCreate?: DishCreateOrConnectWithoutChiefsInput | DishCreateOrConnectWithoutChiefsInput[]
    upsert?: DishUpsertWithWhereUniqueWithoutChiefsInput | DishUpsertWithWhereUniqueWithoutChiefsInput[]
    createMany?: DishCreateManyChiefsInputEnvelope
    set?: DishWhereUniqueInput | DishWhereUniqueInput[]
    disconnect?: DishWhereUniqueInput | DishWhereUniqueInput[]
    delete?: DishWhereUniqueInput | DishWhereUniqueInput[]
    connect?: DishWhereUniqueInput | DishWhereUniqueInput[]
    update?: DishUpdateWithWhereUniqueWithoutChiefsInput | DishUpdateWithWhereUniqueWithoutChiefsInput[]
    updateMany?: DishUpdateManyWithWhereWithoutChiefsInput | DishUpdateManyWithWhereWithoutChiefsInput[]
    deleteMany?: DishScalarWhereInput | DishScalarWhereInput[]
  }

  export type OrderCreateNestedManyWithoutDeliveryBoyInput = {
    create?: XOR<OrderCreateWithoutDeliveryBoyInput, OrderUncheckedCreateWithoutDeliveryBoyInput> | OrderCreateWithoutDeliveryBoyInput[] | OrderUncheckedCreateWithoutDeliveryBoyInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutDeliveryBoyInput | OrderCreateOrConnectWithoutDeliveryBoyInput[]
    createMany?: OrderCreateManyDeliveryBoyInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type OrderUncheckedCreateNestedManyWithoutDeliveryBoyInput = {
    create?: XOR<OrderCreateWithoutDeliveryBoyInput, OrderUncheckedCreateWithoutDeliveryBoyInput> | OrderCreateWithoutDeliveryBoyInput[] | OrderUncheckedCreateWithoutDeliveryBoyInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutDeliveryBoyInput | OrderCreateOrConnectWithoutDeliveryBoyInput[]
    createMany?: OrderCreateManyDeliveryBoyInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type OrderUpdateManyWithoutDeliveryBoyNestedInput = {
    create?: XOR<OrderCreateWithoutDeliveryBoyInput, OrderUncheckedCreateWithoutDeliveryBoyInput> | OrderCreateWithoutDeliveryBoyInput[] | OrderUncheckedCreateWithoutDeliveryBoyInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutDeliveryBoyInput | OrderCreateOrConnectWithoutDeliveryBoyInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutDeliveryBoyInput | OrderUpsertWithWhereUniqueWithoutDeliveryBoyInput[]
    createMany?: OrderCreateManyDeliveryBoyInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutDeliveryBoyInput | OrderUpdateWithWhereUniqueWithoutDeliveryBoyInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutDeliveryBoyInput | OrderUpdateManyWithWhereWithoutDeliveryBoyInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type OrderUncheckedUpdateManyWithoutDeliveryBoyNestedInput = {
    create?: XOR<OrderCreateWithoutDeliveryBoyInput, OrderUncheckedCreateWithoutDeliveryBoyInput> | OrderCreateWithoutDeliveryBoyInput[] | OrderUncheckedCreateWithoutDeliveryBoyInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutDeliveryBoyInput | OrderCreateOrConnectWithoutDeliveryBoyInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutDeliveryBoyInput | OrderUpsertWithWhereUniqueWithoutDeliveryBoyInput[]
    createMany?: OrderCreateManyDeliveryBoyInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutDeliveryBoyInput | OrderUpdateWithWhereUniqueWithoutDeliveryBoyInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutDeliveryBoyInput | OrderUpdateManyWithWhereWithoutDeliveryBoyInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type DishCreateimageUrlInput = {
    set: string[]
  }

  export type ChiefCreateNestedOneWithoutDishesInput = {
    create?: XOR<ChiefCreateWithoutDishesInput, ChiefUncheckedCreateWithoutDishesInput>
    connectOrCreate?: ChiefCreateOrConnectWithoutDishesInput
    connect?: ChiefWhereUniqueInput
  }

  export type DishRatingCreateNestedManyWithoutDishInput = {
    create?: XOR<DishRatingCreateWithoutDishInput, DishRatingUncheckedCreateWithoutDishInput> | DishRatingCreateWithoutDishInput[] | DishRatingUncheckedCreateWithoutDishInput[]
    connectOrCreate?: DishRatingCreateOrConnectWithoutDishInput | DishRatingCreateOrConnectWithoutDishInput[]
    createMany?: DishRatingCreateManyDishInputEnvelope
    connect?: DishRatingWhereUniqueInput | DishRatingWhereUniqueInput[]
  }

  export type OrderCreateNestedManyWithoutDishInput = {
    create?: XOR<OrderCreateWithoutDishInput, OrderUncheckedCreateWithoutDishInput> | OrderCreateWithoutDishInput[] | OrderUncheckedCreateWithoutDishInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutDishInput | OrderCreateOrConnectWithoutDishInput[]
    createMany?: OrderCreateManyDishInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type ClientCreateNestedManyWithoutDishfavoritesInput = {
    create?: XOR<ClientCreateWithoutDishfavoritesInput, ClientUncheckedCreateWithoutDishfavoritesInput> | ClientCreateWithoutDishfavoritesInput[] | ClientUncheckedCreateWithoutDishfavoritesInput[]
    connectOrCreate?: ClientCreateOrConnectWithoutDishfavoritesInput | ClientCreateOrConnectWithoutDishfavoritesInput[]
    connect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
  }

  export type IngDishCreateNestedManyWithoutDishInput = {
    create?: XOR<IngDishCreateWithoutDishInput, IngDishUncheckedCreateWithoutDishInput> | IngDishCreateWithoutDishInput[] | IngDishUncheckedCreateWithoutDishInput[]
    connectOrCreate?: IngDishCreateOrConnectWithoutDishInput | IngDishCreateOrConnectWithoutDishInput[]
    createMany?: IngDishCreateManyDishInputEnvelope
    connect?: IngDishWhereUniqueInput | IngDishWhereUniqueInput[]
  }

  export type DishRatingUncheckedCreateNestedManyWithoutDishInput = {
    create?: XOR<DishRatingCreateWithoutDishInput, DishRatingUncheckedCreateWithoutDishInput> | DishRatingCreateWithoutDishInput[] | DishRatingUncheckedCreateWithoutDishInput[]
    connectOrCreate?: DishRatingCreateOrConnectWithoutDishInput | DishRatingCreateOrConnectWithoutDishInput[]
    createMany?: DishRatingCreateManyDishInputEnvelope
    connect?: DishRatingWhereUniqueInput | DishRatingWhereUniqueInput[]
  }

  export type OrderUncheckedCreateNestedManyWithoutDishInput = {
    create?: XOR<OrderCreateWithoutDishInput, OrderUncheckedCreateWithoutDishInput> | OrderCreateWithoutDishInput[] | OrderUncheckedCreateWithoutDishInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutDishInput | OrderCreateOrConnectWithoutDishInput[]
    createMany?: OrderCreateManyDishInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type ClientUncheckedCreateNestedManyWithoutDishfavoritesInput = {
    create?: XOR<ClientCreateWithoutDishfavoritesInput, ClientUncheckedCreateWithoutDishfavoritesInput> | ClientCreateWithoutDishfavoritesInput[] | ClientUncheckedCreateWithoutDishfavoritesInput[]
    connectOrCreate?: ClientCreateOrConnectWithoutDishfavoritesInput | ClientCreateOrConnectWithoutDishfavoritesInput[]
    connect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
  }

  export type IngDishUncheckedCreateNestedManyWithoutDishInput = {
    create?: XOR<IngDishCreateWithoutDishInput, IngDishUncheckedCreateWithoutDishInput> | IngDishCreateWithoutDishInput[] | IngDishUncheckedCreateWithoutDishInput[]
    connectOrCreate?: IngDishCreateOrConnectWithoutDishInput | IngDishCreateOrConnectWithoutDishInput[]
    createMany?: IngDishCreateManyDishInputEnvelope
    connect?: IngDishWhereUniqueInput | IngDishWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DishUpdateimageUrlInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ChiefUpdateOneRequiredWithoutDishesNestedInput = {
    create?: XOR<ChiefCreateWithoutDishesInput, ChiefUncheckedCreateWithoutDishesInput>
    connectOrCreate?: ChiefCreateOrConnectWithoutDishesInput
    upsert?: ChiefUpsertWithoutDishesInput
    connect?: ChiefWhereUniqueInput
    update?: XOR<XOR<ChiefUpdateToOneWithWhereWithoutDishesInput, ChiefUpdateWithoutDishesInput>, ChiefUncheckedUpdateWithoutDishesInput>
  }

  export type DishRatingUpdateManyWithoutDishNestedInput = {
    create?: XOR<DishRatingCreateWithoutDishInput, DishRatingUncheckedCreateWithoutDishInput> | DishRatingCreateWithoutDishInput[] | DishRatingUncheckedCreateWithoutDishInput[]
    connectOrCreate?: DishRatingCreateOrConnectWithoutDishInput | DishRatingCreateOrConnectWithoutDishInput[]
    upsert?: DishRatingUpsertWithWhereUniqueWithoutDishInput | DishRatingUpsertWithWhereUniqueWithoutDishInput[]
    createMany?: DishRatingCreateManyDishInputEnvelope
    set?: DishRatingWhereUniqueInput | DishRatingWhereUniqueInput[]
    disconnect?: DishRatingWhereUniqueInput | DishRatingWhereUniqueInput[]
    delete?: DishRatingWhereUniqueInput | DishRatingWhereUniqueInput[]
    connect?: DishRatingWhereUniqueInput | DishRatingWhereUniqueInput[]
    update?: DishRatingUpdateWithWhereUniqueWithoutDishInput | DishRatingUpdateWithWhereUniqueWithoutDishInput[]
    updateMany?: DishRatingUpdateManyWithWhereWithoutDishInput | DishRatingUpdateManyWithWhereWithoutDishInput[]
    deleteMany?: DishRatingScalarWhereInput | DishRatingScalarWhereInput[]
  }

  export type OrderUpdateManyWithoutDishNestedInput = {
    create?: XOR<OrderCreateWithoutDishInput, OrderUncheckedCreateWithoutDishInput> | OrderCreateWithoutDishInput[] | OrderUncheckedCreateWithoutDishInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutDishInput | OrderCreateOrConnectWithoutDishInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutDishInput | OrderUpsertWithWhereUniqueWithoutDishInput[]
    createMany?: OrderCreateManyDishInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutDishInput | OrderUpdateWithWhereUniqueWithoutDishInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutDishInput | OrderUpdateManyWithWhereWithoutDishInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type ClientUpdateManyWithoutDishfavoritesNestedInput = {
    create?: XOR<ClientCreateWithoutDishfavoritesInput, ClientUncheckedCreateWithoutDishfavoritesInput> | ClientCreateWithoutDishfavoritesInput[] | ClientUncheckedCreateWithoutDishfavoritesInput[]
    connectOrCreate?: ClientCreateOrConnectWithoutDishfavoritesInput | ClientCreateOrConnectWithoutDishfavoritesInput[]
    upsert?: ClientUpsertWithWhereUniqueWithoutDishfavoritesInput | ClientUpsertWithWhereUniqueWithoutDishfavoritesInput[]
    set?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    disconnect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    delete?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    connect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    update?: ClientUpdateWithWhereUniqueWithoutDishfavoritesInput | ClientUpdateWithWhereUniqueWithoutDishfavoritesInput[]
    updateMany?: ClientUpdateManyWithWhereWithoutDishfavoritesInput | ClientUpdateManyWithWhereWithoutDishfavoritesInput[]
    deleteMany?: ClientScalarWhereInput | ClientScalarWhereInput[]
  }

  export type IngDishUpdateManyWithoutDishNestedInput = {
    create?: XOR<IngDishCreateWithoutDishInput, IngDishUncheckedCreateWithoutDishInput> | IngDishCreateWithoutDishInput[] | IngDishUncheckedCreateWithoutDishInput[]
    connectOrCreate?: IngDishCreateOrConnectWithoutDishInput | IngDishCreateOrConnectWithoutDishInput[]
    upsert?: IngDishUpsertWithWhereUniqueWithoutDishInput | IngDishUpsertWithWhereUniqueWithoutDishInput[]
    createMany?: IngDishCreateManyDishInputEnvelope
    set?: IngDishWhereUniqueInput | IngDishWhereUniqueInput[]
    disconnect?: IngDishWhereUniqueInput | IngDishWhereUniqueInput[]
    delete?: IngDishWhereUniqueInput | IngDishWhereUniqueInput[]
    connect?: IngDishWhereUniqueInput | IngDishWhereUniqueInput[]
    update?: IngDishUpdateWithWhereUniqueWithoutDishInput | IngDishUpdateWithWhereUniqueWithoutDishInput[]
    updateMany?: IngDishUpdateManyWithWhereWithoutDishInput | IngDishUpdateManyWithWhereWithoutDishInput[]
    deleteMany?: IngDishScalarWhereInput | IngDishScalarWhereInput[]
  }

  export type DishRatingUncheckedUpdateManyWithoutDishNestedInput = {
    create?: XOR<DishRatingCreateWithoutDishInput, DishRatingUncheckedCreateWithoutDishInput> | DishRatingCreateWithoutDishInput[] | DishRatingUncheckedCreateWithoutDishInput[]
    connectOrCreate?: DishRatingCreateOrConnectWithoutDishInput | DishRatingCreateOrConnectWithoutDishInput[]
    upsert?: DishRatingUpsertWithWhereUniqueWithoutDishInput | DishRatingUpsertWithWhereUniqueWithoutDishInput[]
    createMany?: DishRatingCreateManyDishInputEnvelope
    set?: DishRatingWhereUniqueInput | DishRatingWhereUniqueInput[]
    disconnect?: DishRatingWhereUniqueInput | DishRatingWhereUniqueInput[]
    delete?: DishRatingWhereUniqueInput | DishRatingWhereUniqueInput[]
    connect?: DishRatingWhereUniqueInput | DishRatingWhereUniqueInput[]
    update?: DishRatingUpdateWithWhereUniqueWithoutDishInput | DishRatingUpdateWithWhereUniqueWithoutDishInput[]
    updateMany?: DishRatingUpdateManyWithWhereWithoutDishInput | DishRatingUpdateManyWithWhereWithoutDishInput[]
    deleteMany?: DishRatingScalarWhereInput | DishRatingScalarWhereInput[]
  }

  export type OrderUncheckedUpdateManyWithoutDishNestedInput = {
    create?: XOR<OrderCreateWithoutDishInput, OrderUncheckedCreateWithoutDishInput> | OrderCreateWithoutDishInput[] | OrderUncheckedCreateWithoutDishInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutDishInput | OrderCreateOrConnectWithoutDishInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutDishInput | OrderUpsertWithWhereUniqueWithoutDishInput[]
    createMany?: OrderCreateManyDishInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutDishInput | OrderUpdateWithWhereUniqueWithoutDishInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutDishInput | OrderUpdateManyWithWhereWithoutDishInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type ClientUncheckedUpdateManyWithoutDishfavoritesNestedInput = {
    create?: XOR<ClientCreateWithoutDishfavoritesInput, ClientUncheckedCreateWithoutDishfavoritesInput> | ClientCreateWithoutDishfavoritesInput[] | ClientUncheckedCreateWithoutDishfavoritesInput[]
    connectOrCreate?: ClientCreateOrConnectWithoutDishfavoritesInput | ClientCreateOrConnectWithoutDishfavoritesInput[]
    upsert?: ClientUpsertWithWhereUniqueWithoutDishfavoritesInput | ClientUpsertWithWhereUniqueWithoutDishfavoritesInput[]
    set?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    disconnect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    delete?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    connect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    update?: ClientUpdateWithWhereUniqueWithoutDishfavoritesInput | ClientUpdateWithWhereUniqueWithoutDishfavoritesInput[]
    updateMany?: ClientUpdateManyWithWhereWithoutDishfavoritesInput | ClientUpdateManyWithWhereWithoutDishfavoritesInput[]
    deleteMany?: ClientScalarWhereInput | ClientScalarWhereInput[]
  }

  export type IngDishUncheckedUpdateManyWithoutDishNestedInput = {
    create?: XOR<IngDishCreateWithoutDishInput, IngDishUncheckedCreateWithoutDishInput> | IngDishCreateWithoutDishInput[] | IngDishUncheckedCreateWithoutDishInput[]
    connectOrCreate?: IngDishCreateOrConnectWithoutDishInput | IngDishCreateOrConnectWithoutDishInput[]
    upsert?: IngDishUpsertWithWhereUniqueWithoutDishInput | IngDishUpsertWithWhereUniqueWithoutDishInput[]
    createMany?: IngDishCreateManyDishInputEnvelope
    set?: IngDishWhereUniqueInput | IngDishWhereUniqueInput[]
    disconnect?: IngDishWhereUniqueInput | IngDishWhereUniqueInput[]
    delete?: IngDishWhereUniqueInput | IngDishWhereUniqueInput[]
    connect?: IngDishWhereUniqueInput | IngDishWhereUniqueInput[]
    update?: IngDishUpdateWithWhereUniqueWithoutDishInput | IngDishUpdateWithWhereUniqueWithoutDishInput[]
    updateMany?: IngDishUpdateManyWithWhereWithoutDishInput | IngDishUpdateManyWithWhereWithoutDishInput[]
    deleteMany?: IngDishScalarWhereInput | IngDishScalarWhereInput[]
  }

  export type IngDishCreateNestedManyWithoutIngredientInput = {
    create?: XOR<IngDishCreateWithoutIngredientInput, IngDishUncheckedCreateWithoutIngredientInput> | IngDishCreateWithoutIngredientInput[] | IngDishUncheckedCreateWithoutIngredientInput[]
    connectOrCreate?: IngDishCreateOrConnectWithoutIngredientInput | IngDishCreateOrConnectWithoutIngredientInput[]
    createMany?: IngDishCreateManyIngredientInputEnvelope
    connect?: IngDishWhereUniqueInput | IngDishWhereUniqueInput[]
  }

  export type IngDishUncheckedCreateNestedManyWithoutIngredientInput = {
    create?: XOR<IngDishCreateWithoutIngredientInput, IngDishUncheckedCreateWithoutIngredientInput> | IngDishCreateWithoutIngredientInput[] | IngDishUncheckedCreateWithoutIngredientInput[]
    connectOrCreate?: IngDishCreateOrConnectWithoutIngredientInput | IngDishCreateOrConnectWithoutIngredientInput[]
    createMany?: IngDishCreateManyIngredientInputEnvelope
    connect?: IngDishWhereUniqueInput | IngDishWhereUniqueInput[]
  }

  export type IngDishUpdateManyWithoutIngredientNestedInput = {
    create?: XOR<IngDishCreateWithoutIngredientInput, IngDishUncheckedCreateWithoutIngredientInput> | IngDishCreateWithoutIngredientInput[] | IngDishUncheckedCreateWithoutIngredientInput[]
    connectOrCreate?: IngDishCreateOrConnectWithoutIngredientInput | IngDishCreateOrConnectWithoutIngredientInput[]
    upsert?: IngDishUpsertWithWhereUniqueWithoutIngredientInput | IngDishUpsertWithWhereUniqueWithoutIngredientInput[]
    createMany?: IngDishCreateManyIngredientInputEnvelope
    set?: IngDishWhereUniqueInput | IngDishWhereUniqueInput[]
    disconnect?: IngDishWhereUniqueInput | IngDishWhereUniqueInput[]
    delete?: IngDishWhereUniqueInput | IngDishWhereUniqueInput[]
    connect?: IngDishWhereUniqueInput | IngDishWhereUniqueInput[]
    update?: IngDishUpdateWithWhereUniqueWithoutIngredientInput | IngDishUpdateWithWhereUniqueWithoutIngredientInput[]
    updateMany?: IngDishUpdateManyWithWhereWithoutIngredientInput | IngDishUpdateManyWithWhereWithoutIngredientInput[]
    deleteMany?: IngDishScalarWhereInput | IngDishScalarWhereInput[]
  }

  export type IngDishUncheckedUpdateManyWithoutIngredientNestedInput = {
    create?: XOR<IngDishCreateWithoutIngredientInput, IngDishUncheckedCreateWithoutIngredientInput> | IngDishCreateWithoutIngredientInput[] | IngDishUncheckedCreateWithoutIngredientInput[]
    connectOrCreate?: IngDishCreateOrConnectWithoutIngredientInput | IngDishCreateOrConnectWithoutIngredientInput[]
    upsert?: IngDishUpsertWithWhereUniqueWithoutIngredientInput | IngDishUpsertWithWhereUniqueWithoutIngredientInput[]
    createMany?: IngDishCreateManyIngredientInputEnvelope
    set?: IngDishWhereUniqueInput | IngDishWhereUniqueInput[]
    disconnect?: IngDishWhereUniqueInput | IngDishWhereUniqueInput[]
    delete?: IngDishWhereUniqueInput | IngDishWhereUniqueInput[]
    connect?: IngDishWhereUniqueInput | IngDishWhereUniqueInput[]
    update?: IngDishUpdateWithWhereUniqueWithoutIngredientInput | IngDishUpdateWithWhereUniqueWithoutIngredientInput[]
    updateMany?: IngDishUpdateManyWithWhereWithoutIngredientInput | IngDishUpdateManyWithWhereWithoutIngredientInput[]
    deleteMany?: IngDishScalarWhereInput | IngDishScalarWhereInput[]
  }

  export type ClientCreateNestedOneWithoutOrdersInput = {
    create?: XOR<ClientCreateWithoutOrdersInput, ClientUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: ClientCreateOrConnectWithoutOrdersInput
    connect?: ClientWhereUniqueInput
  }

  export type DishCreateNestedOneWithoutOrdersInput = {
    create?: XOR<DishCreateWithoutOrdersInput, DishUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: DishCreateOrConnectWithoutOrdersInput
    connect?: DishWhereUniqueInput
  }

  export type DeliveryBoyCreateNestedOneWithoutOrdersInput = {
    create?: XOR<DeliveryBoyCreateWithoutOrdersInput, DeliveryBoyUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: DeliveryBoyCreateOrConnectWithoutOrdersInput
    connect?: DeliveryBoyWhereUniqueInput
  }

  export type IngDishCreateNestedManyWithoutOrderInput = {
    create?: XOR<IngDishCreateWithoutOrderInput, IngDishUncheckedCreateWithoutOrderInput> | IngDishCreateWithoutOrderInput[] | IngDishUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: IngDishCreateOrConnectWithoutOrderInput | IngDishCreateOrConnectWithoutOrderInput[]
    createMany?: IngDishCreateManyOrderInputEnvelope
    connect?: IngDishWhereUniqueInput | IngDishWhereUniqueInput[]
  }

  export type IngDishUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<IngDishCreateWithoutOrderInput, IngDishUncheckedCreateWithoutOrderInput> | IngDishCreateWithoutOrderInput[] | IngDishUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: IngDishCreateOrConnectWithoutOrderInput | IngDishCreateOrConnectWithoutOrderInput[]
    createMany?: IngDishCreateManyOrderInputEnvelope
    connect?: IngDishWhereUniqueInput | IngDishWhereUniqueInput[]
  }

  export type EnumOrderStatusFieldUpdateOperationsInput = {
    set?: $Enums.OrderStatus
  }

  export type ClientUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<ClientCreateWithoutOrdersInput, ClientUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: ClientCreateOrConnectWithoutOrdersInput
    upsert?: ClientUpsertWithoutOrdersInput
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutOrdersInput, ClientUpdateWithoutOrdersInput>, ClientUncheckedUpdateWithoutOrdersInput>
  }

  export type DishUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<DishCreateWithoutOrdersInput, DishUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: DishCreateOrConnectWithoutOrdersInput
    upsert?: DishUpsertWithoutOrdersInput
    connect?: DishWhereUniqueInput
    update?: XOR<XOR<DishUpdateToOneWithWhereWithoutOrdersInput, DishUpdateWithoutOrdersInput>, DishUncheckedUpdateWithoutOrdersInput>
  }

  export type DeliveryBoyUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<DeliveryBoyCreateWithoutOrdersInput, DeliveryBoyUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: DeliveryBoyCreateOrConnectWithoutOrdersInput
    upsert?: DeliveryBoyUpsertWithoutOrdersInput
    connect?: DeliveryBoyWhereUniqueInput
    update?: XOR<XOR<DeliveryBoyUpdateToOneWithWhereWithoutOrdersInput, DeliveryBoyUpdateWithoutOrdersInput>, DeliveryBoyUncheckedUpdateWithoutOrdersInput>
  }

  export type IngDishUpdateManyWithoutOrderNestedInput = {
    create?: XOR<IngDishCreateWithoutOrderInput, IngDishUncheckedCreateWithoutOrderInput> | IngDishCreateWithoutOrderInput[] | IngDishUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: IngDishCreateOrConnectWithoutOrderInput | IngDishCreateOrConnectWithoutOrderInput[]
    upsert?: IngDishUpsertWithWhereUniqueWithoutOrderInput | IngDishUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: IngDishCreateManyOrderInputEnvelope
    set?: IngDishWhereUniqueInput | IngDishWhereUniqueInput[]
    disconnect?: IngDishWhereUniqueInput | IngDishWhereUniqueInput[]
    delete?: IngDishWhereUniqueInput | IngDishWhereUniqueInput[]
    connect?: IngDishWhereUniqueInput | IngDishWhereUniqueInput[]
    update?: IngDishUpdateWithWhereUniqueWithoutOrderInput | IngDishUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: IngDishUpdateManyWithWhereWithoutOrderInput | IngDishUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: IngDishScalarWhereInput | IngDishScalarWhereInput[]
  }

  export type IngDishUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<IngDishCreateWithoutOrderInput, IngDishUncheckedCreateWithoutOrderInput> | IngDishCreateWithoutOrderInput[] | IngDishUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: IngDishCreateOrConnectWithoutOrderInput | IngDishCreateOrConnectWithoutOrderInput[]
    upsert?: IngDishUpsertWithWhereUniqueWithoutOrderInput | IngDishUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: IngDishCreateManyOrderInputEnvelope
    set?: IngDishWhereUniqueInput | IngDishWhereUniqueInput[]
    disconnect?: IngDishWhereUniqueInput | IngDishWhereUniqueInput[]
    delete?: IngDishWhereUniqueInput | IngDishWhereUniqueInput[]
    connect?: IngDishWhereUniqueInput | IngDishWhereUniqueInput[]
    update?: IngDishUpdateWithWhereUniqueWithoutOrderInput | IngDishUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: IngDishUpdateManyWithWhereWithoutOrderInput | IngDishUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: IngDishScalarWhereInput | IngDishScalarWhereInput[]
  }

  export type DishCreateNestedOneWithoutIngDishesInput = {
    create?: XOR<DishCreateWithoutIngDishesInput, DishUncheckedCreateWithoutIngDishesInput>
    connectOrCreate?: DishCreateOrConnectWithoutIngDishesInput
    connect?: DishWhereUniqueInput
  }

  export type IngredientsCreateNestedOneWithoutIngDishesInput = {
    create?: XOR<IngredientsCreateWithoutIngDishesInput, IngredientsUncheckedCreateWithoutIngDishesInput>
    connectOrCreate?: IngredientsCreateOrConnectWithoutIngDishesInput
    connect?: IngredientsWhereUniqueInput
  }

  export type OrderCreateNestedOneWithoutIngDishesInput = {
    create?: XOR<OrderCreateWithoutIngDishesInput, OrderUncheckedCreateWithoutIngDishesInput>
    connectOrCreate?: OrderCreateOrConnectWithoutIngDishesInput
    connect?: OrderWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DishUpdateOneRequiredWithoutIngDishesNestedInput = {
    create?: XOR<DishCreateWithoutIngDishesInput, DishUncheckedCreateWithoutIngDishesInput>
    connectOrCreate?: DishCreateOrConnectWithoutIngDishesInput
    upsert?: DishUpsertWithoutIngDishesInput
    connect?: DishWhereUniqueInput
    update?: XOR<XOR<DishUpdateToOneWithWhereWithoutIngDishesInput, DishUpdateWithoutIngDishesInput>, DishUncheckedUpdateWithoutIngDishesInput>
  }

  export type IngredientsUpdateOneRequiredWithoutIngDishesNestedInput = {
    create?: XOR<IngredientsCreateWithoutIngDishesInput, IngredientsUncheckedCreateWithoutIngDishesInput>
    connectOrCreate?: IngredientsCreateOrConnectWithoutIngDishesInput
    upsert?: IngredientsUpsertWithoutIngDishesInput
    connect?: IngredientsWhereUniqueInput
    update?: XOR<XOR<IngredientsUpdateToOneWithWhereWithoutIngDishesInput, IngredientsUpdateWithoutIngDishesInput>, IngredientsUncheckedUpdateWithoutIngDishesInput>
  }

  export type OrderUpdateOneRequiredWithoutIngDishesNestedInput = {
    create?: XOR<OrderCreateWithoutIngDishesInput, OrderUncheckedCreateWithoutIngDishesInput>
    connectOrCreate?: OrderCreateOrConnectWithoutIngDishesInput
    upsert?: OrderUpsertWithoutIngDishesInput
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutIngDishesInput, OrderUpdateWithoutIngDishesInput>, OrderUncheckedUpdateWithoutIngDishesInput>
  }

  export type ClientCreateNestedOneWithoutDishRatingsInput = {
    create?: XOR<ClientCreateWithoutDishRatingsInput, ClientUncheckedCreateWithoutDishRatingsInput>
    connectOrCreate?: ClientCreateOrConnectWithoutDishRatingsInput
    connect?: ClientWhereUniqueInput
  }

  export type DishCreateNestedOneWithoutRatingsInput = {
    create?: XOR<DishCreateWithoutRatingsInput, DishUncheckedCreateWithoutRatingsInput>
    connectOrCreate?: DishCreateOrConnectWithoutRatingsInput
    connect?: DishWhereUniqueInput
  }

  export type ClientUpdateOneRequiredWithoutDishRatingsNestedInput = {
    create?: XOR<ClientCreateWithoutDishRatingsInput, ClientUncheckedCreateWithoutDishRatingsInput>
    connectOrCreate?: ClientCreateOrConnectWithoutDishRatingsInput
    upsert?: ClientUpsertWithoutDishRatingsInput
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutDishRatingsInput, ClientUpdateWithoutDishRatingsInput>, ClientUncheckedUpdateWithoutDishRatingsInput>
  }

  export type DishUpdateOneRequiredWithoutRatingsNestedInput = {
    create?: XOR<DishCreateWithoutRatingsInput, DishUncheckedCreateWithoutRatingsInput>
    connectOrCreate?: DishCreateOrConnectWithoutRatingsInput
    upsert?: DishUpsertWithoutRatingsInput
    connect?: DishWhereUniqueInput
    update?: XOR<XOR<DishUpdateToOneWithWhereWithoutRatingsInput, DishUpdateWithoutRatingsInput>, DishUncheckedUpdateWithoutRatingsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusFilter<$PrismaModel> | $Enums.OrderStatus
  }

  export type NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel> | $Enums.OrderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderStatusFilter<$PrismaModel>
    _max?: NestedEnumOrderStatusFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type OrderCreateWithoutClientInput = {
    totalAmount: number
    quantity: number
    status: $Enums.OrderStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    dish: DishCreateNestedOneWithoutOrdersInput
    deliveryBoy: DeliveryBoyCreateNestedOneWithoutOrdersInput
    ingDishes?: IngDishCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutClientInput = {
    id?: number
    totalAmount: number
    quantity: number
    status: $Enums.OrderStatus
    dishId: number
    deliveryBoyId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    ingDishes?: IngDishUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutClientInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutClientInput, OrderUncheckedCreateWithoutClientInput>
  }

  export type OrderCreateManyClientInputEnvelope = {
    data: OrderCreateManyClientInput | OrderCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type DishRatingCreateWithoutClientInput = {
    rating: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    dish: DishCreateNestedOneWithoutRatingsInput
  }

  export type DishRatingUncheckedCreateWithoutClientInput = {
    id?: number
    rating: number
    comment?: string | null
    dishId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DishRatingCreateOrConnectWithoutClientInput = {
    where: DishRatingWhereUniqueInput
    create: XOR<DishRatingCreateWithoutClientInput, DishRatingUncheckedCreateWithoutClientInput>
  }

  export type DishRatingCreateManyClientInputEnvelope = {
    data: DishRatingCreateManyClientInput | DishRatingCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type DishCreateWithoutDishFavoriteInput = {
    title: string
    category: string
    description: string
    price: number
    imageUrl?: DishCreateimageUrlInput | string[]
    duration: number
    createdAt?: Date | string
    updatedAt?: Date | string
    Chiefs: ChiefCreateNestedOneWithoutDishesInput
    ratings?: DishRatingCreateNestedManyWithoutDishInput
    Orders?: OrderCreateNestedManyWithoutDishInput
    ingDishes?: IngDishCreateNestedManyWithoutDishInput
  }

  export type DishUncheckedCreateWithoutDishFavoriteInput = {
    id?: number
    title: string
    category: string
    description: string
    price: number
    imageUrl?: DishCreateimageUrlInput | string[]
    duration: number
    ChiefId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    ratings?: DishRatingUncheckedCreateNestedManyWithoutDishInput
    Orders?: OrderUncheckedCreateNestedManyWithoutDishInput
    ingDishes?: IngDishUncheckedCreateNestedManyWithoutDishInput
  }

  export type DishCreateOrConnectWithoutDishFavoriteInput = {
    where: DishWhereUniqueInput
    create: XOR<DishCreateWithoutDishFavoriteInput, DishUncheckedCreateWithoutDishFavoriteInput>
  }

  export type OrderUpsertWithWhereUniqueWithoutClientInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutClientInput, OrderUncheckedUpdateWithoutClientInput>
    create: XOR<OrderCreateWithoutClientInput, OrderUncheckedCreateWithoutClientInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutClientInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutClientInput, OrderUncheckedUpdateWithoutClientInput>
  }

  export type OrderUpdateManyWithWhereWithoutClientInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutClientInput>
  }

  export type OrderScalarWhereInput = {
    AND?: OrderScalarWhereInput | OrderScalarWhereInput[]
    OR?: OrderScalarWhereInput[]
    NOT?: OrderScalarWhereInput | OrderScalarWhereInput[]
    id?: IntFilter<"Order"> | number
    totalAmount?: FloatFilter<"Order"> | number
    quantity?: IntFilter<"Order"> | number
    status?: EnumOrderStatusFilter<"Order"> | $Enums.OrderStatus
    clientId?: IntFilter<"Order"> | number
    dishId?: IntFilter<"Order"> | number
    deliveryBoyId?: IntFilter<"Order"> | number
    createdAt?: DateTimeFilter<"Order"> | Date | string
    updatedAt?: DateTimeFilter<"Order"> | Date | string
  }

  export type DishRatingUpsertWithWhereUniqueWithoutClientInput = {
    where: DishRatingWhereUniqueInput
    update: XOR<DishRatingUpdateWithoutClientInput, DishRatingUncheckedUpdateWithoutClientInput>
    create: XOR<DishRatingCreateWithoutClientInput, DishRatingUncheckedCreateWithoutClientInput>
  }

  export type DishRatingUpdateWithWhereUniqueWithoutClientInput = {
    where: DishRatingWhereUniqueInput
    data: XOR<DishRatingUpdateWithoutClientInput, DishRatingUncheckedUpdateWithoutClientInput>
  }

  export type DishRatingUpdateManyWithWhereWithoutClientInput = {
    where: DishRatingScalarWhereInput
    data: XOR<DishRatingUpdateManyMutationInput, DishRatingUncheckedUpdateManyWithoutClientInput>
  }

  export type DishRatingScalarWhereInput = {
    AND?: DishRatingScalarWhereInput | DishRatingScalarWhereInput[]
    OR?: DishRatingScalarWhereInput[]
    NOT?: DishRatingScalarWhereInput | DishRatingScalarWhereInput[]
    id?: IntFilter<"DishRating"> | number
    rating?: IntFilter<"DishRating"> | number
    comment?: StringNullableFilter<"DishRating"> | string | null
    clientId?: IntFilter<"DishRating"> | number
    dishId?: IntFilter<"DishRating"> | number
    createdAt?: DateTimeFilter<"DishRating"> | Date | string
    updatedAt?: DateTimeFilter<"DishRating"> | Date | string
  }

  export type DishUpsertWithWhereUniqueWithoutDishFavoriteInput = {
    where: DishWhereUniqueInput
    update: XOR<DishUpdateWithoutDishFavoriteInput, DishUncheckedUpdateWithoutDishFavoriteInput>
    create: XOR<DishCreateWithoutDishFavoriteInput, DishUncheckedCreateWithoutDishFavoriteInput>
  }

  export type DishUpdateWithWhereUniqueWithoutDishFavoriteInput = {
    where: DishWhereUniqueInput
    data: XOR<DishUpdateWithoutDishFavoriteInput, DishUncheckedUpdateWithoutDishFavoriteInput>
  }

  export type DishUpdateManyWithWhereWithoutDishFavoriteInput = {
    where: DishScalarWhereInput
    data: XOR<DishUpdateManyMutationInput, DishUncheckedUpdateManyWithoutDishFavoriteInput>
  }

  export type DishScalarWhereInput = {
    AND?: DishScalarWhereInput | DishScalarWhereInput[]
    OR?: DishScalarWhereInput[]
    NOT?: DishScalarWhereInput | DishScalarWhereInput[]
    id?: IntFilter<"Dish"> | number
    title?: StringFilter<"Dish"> | string
    category?: StringFilter<"Dish"> | string
    description?: StringFilter<"Dish"> | string
    price?: FloatFilter<"Dish"> | number
    imageUrl?: StringNullableListFilter<"Dish">
    duration?: FloatFilter<"Dish"> | number
    ChiefId?: IntFilter<"Dish"> | number
    createdAt?: DateTimeFilter<"Dish"> | Date | string
    updatedAt?: DateTimeFilter<"Dish"> | Date | string
  }

  export type DishCreateWithoutChiefsInput = {
    title: string
    category: string
    description: string
    price: number
    imageUrl?: DishCreateimageUrlInput | string[]
    duration: number
    createdAt?: Date | string
    updatedAt?: Date | string
    ratings?: DishRatingCreateNestedManyWithoutDishInput
    Orders?: OrderCreateNestedManyWithoutDishInput
    dishFavorite?: ClientCreateNestedManyWithoutDishfavoritesInput
    ingDishes?: IngDishCreateNestedManyWithoutDishInput
  }

  export type DishUncheckedCreateWithoutChiefsInput = {
    id?: number
    title: string
    category: string
    description: string
    price: number
    imageUrl?: DishCreateimageUrlInput | string[]
    duration: number
    createdAt?: Date | string
    updatedAt?: Date | string
    ratings?: DishRatingUncheckedCreateNestedManyWithoutDishInput
    Orders?: OrderUncheckedCreateNestedManyWithoutDishInput
    dishFavorite?: ClientUncheckedCreateNestedManyWithoutDishfavoritesInput
    ingDishes?: IngDishUncheckedCreateNestedManyWithoutDishInput
  }

  export type DishCreateOrConnectWithoutChiefsInput = {
    where: DishWhereUniqueInput
    create: XOR<DishCreateWithoutChiefsInput, DishUncheckedCreateWithoutChiefsInput>
  }

  export type DishCreateManyChiefsInputEnvelope = {
    data: DishCreateManyChiefsInput | DishCreateManyChiefsInput[]
    skipDuplicates?: boolean
  }

  export type DishUpsertWithWhereUniqueWithoutChiefsInput = {
    where: DishWhereUniqueInput
    update: XOR<DishUpdateWithoutChiefsInput, DishUncheckedUpdateWithoutChiefsInput>
    create: XOR<DishCreateWithoutChiefsInput, DishUncheckedCreateWithoutChiefsInput>
  }

  export type DishUpdateWithWhereUniqueWithoutChiefsInput = {
    where: DishWhereUniqueInput
    data: XOR<DishUpdateWithoutChiefsInput, DishUncheckedUpdateWithoutChiefsInput>
  }

  export type DishUpdateManyWithWhereWithoutChiefsInput = {
    where: DishScalarWhereInput
    data: XOR<DishUpdateManyMutationInput, DishUncheckedUpdateManyWithoutChiefsInput>
  }

  export type OrderCreateWithoutDeliveryBoyInput = {
    totalAmount: number
    quantity: number
    status: $Enums.OrderStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    client: ClientCreateNestedOneWithoutOrdersInput
    dish: DishCreateNestedOneWithoutOrdersInput
    ingDishes?: IngDishCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutDeliveryBoyInput = {
    id?: number
    totalAmount: number
    quantity: number
    status: $Enums.OrderStatus
    clientId: number
    dishId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    ingDishes?: IngDishUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutDeliveryBoyInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutDeliveryBoyInput, OrderUncheckedCreateWithoutDeliveryBoyInput>
  }

  export type OrderCreateManyDeliveryBoyInputEnvelope = {
    data: OrderCreateManyDeliveryBoyInput | OrderCreateManyDeliveryBoyInput[]
    skipDuplicates?: boolean
  }

  export type OrderUpsertWithWhereUniqueWithoutDeliveryBoyInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutDeliveryBoyInput, OrderUncheckedUpdateWithoutDeliveryBoyInput>
    create: XOR<OrderCreateWithoutDeliveryBoyInput, OrderUncheckedCreateWithoutDeliveryBoyInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutDeliveryBoyInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutDeliveryBoyInput, OrderUncheckedUpdateWithoutDeliveryBoyInput>
  }

  export type OrderUpdateManyWithWhereWithoutDeliveryBoyInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutDeliveryBoyInput>
  }

  export type ChiefCreateWithoutDishesInput = {
    name: string
    email: string
    password: string
    phoneNumber: string
    IDCard?: ChiefCreateIDCardInput | string[]
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChiefUncheckedCreateWithoutDishesInput = {
    id?: number
    name: string
    email: string
    password: string
    phoneNumber: string
    IDCard?: ChiefCreateIDCardInput | string[]
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChiefCreateOrConnectWithoutDishesInput = {
    where: ChiefWhereUniqueInput
    create: XOR<ChiefCreateWithoutDishesInput, ChiefUncheckedCreateWithoutDishesInput>
  }

  export type DishRatingCreateWithoutDishInput = {
    rating: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    client: ClientCreateNestedOneWithoutDishRatingsInput
  }

  export type DishRatingUncheckedCreateWithoutDishInput = {
    id?: number
    rating: number
    comment?: string | null
    clientId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DishRatingCreateOrConnectWithoutDishInput = {
    where: DishRatingWhereUniqueInput
    create: XOR<DishRatingCreateWithoutDishInput, DishRatingUncheckedCreateWithoutDishInput>
  }

  export type DishRatingCreateManyDishInputEnvelope = {
    data: DishRatingCreateManyDishInput | DishRatingCreateManyDishInput[]
    skipDuplicates?: boolean
  }

  export type OrderCreateWithoutDishInput = {
    totalAmount: number
    quantity: number
    status: $Enums.OrderStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    client: ClientCreateNestedOneWithoutOrdersInput
    deliveryBoy: DeliveryBoyCreateNestedOneWithoutOrdersInput
    ingDishes?: IngDishCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutDishInput = {
    id?: number
    totalAmount: number
    quantity: number
    status: $Enums.OrderStatus
    clientId: number
    deliveryBoyId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    ingDishes?: IngDishUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutDishInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutDishInput, OrderUncheckedCreateWithoutDishInput>
  }

  export type OrderCreateManyDishInputEnvelope = {
    data: OrderCreateManyDishInput | OrderCreateManyDishInput[]
    skipDuplicates?: boolean
  }

  export type ClientCreateWithoutDishfavoritesInput = {
    name: string
    email: string
    password: string
    phoneNumber: string
    address: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orders?: OrderCreateNestedManyWithoutClientInput
    dishRatings?: DishRatingCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutDishfavoritesInput = {
    id?: number
    name: string
    email: string
    password: string
    phoneNumber: string
    address: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orders?: OrderUncheckedCreateNestedManyWithoutClientInput
    dishRatings?: DishRatingUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutDishfavoritesInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutDishfavoritesInput, ClientUncheckedCreateWithoutDishfavoritesInput>
  }

  export type IngDishCreateWithoutDishInput = {
    added: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    ingredient: IngredientsCreateNestedOneWithoutIngDishesInput
    order: OrderCreateNestedOneWithoutIngDishesInput
  }

  export type IngDishUncheckedCreateWithoutDishInput = {
    id?: number
    ingredientId: number
    orderId: number
    added: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type IngDishCreateOrConnectWithoutDishInput = {
    where: IngDishWhereUniqueInput
    create: XOR<IngDishCreateWithoutDishInput, IngDishUncheckedCreateWithoutDishInput>
  }

  export type IngDishCreateManyDishInputEnvelope = {
    data: IngDishCreateManyDishInput | IngDishCreateManyDishInput[]
    skipDuplicates?: boolean
  }

  export type ChiefUpsertWithoutDishesInput = {
    update: XOR<ChiefUpdateWithoutDishesInput, ChiefUncheckedUpdateWithoutDishesInput>
    create: XOR<ChiefCreateWithoutDishesInput, ChiefUncheckedCreateWithoutDishesInput>
    where?: ChiefWhereInput
  }

  export type ChiefUpdateToOneWithWhereWithoutDishesInput = {
    where?: ChiefWhereInput
    data: XOR<ChiefUpdateWithoutDishesInput, ChiefUncheckedUpdateWithoutDishesInput>
  }

  export type ChiefUpdateWithoutDishesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    IDCard?: ChiefUpdateIDCardInput | string[]
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChiefUncheckedUpdateWithoutDishesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    IDCard?: ChiefUpdateIDCardInput | string[]
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DishRatingUpsertWithWhereUniqueWithoutDishInput = {
    where: DishRatingWhereUniqueInput
    update: XOR<DishRatingUpdateWithoutDishInput, DishRatingUncheckedUpdateWithoutDishInput>
    create: XOR<DishRatingCreateWithoutDishInput, DishRatingUncheckedCreateWithoutDishInput>
  }

  export type DishRatingUpdateWithWhereUniqueWithoutDishInput = {
    where: DishRatingWhereUniqueInput
    data: XOR<DishRatingUpdateWithoutDishInput, DishRatingUncheckedUpdateWithoutDishInput>
  }

  export type DishRatingUpdateManyWithWhereWithoutDishInput = {
    where: DishRatingScalarWhereInput
    data: XOR<DishRatingUpdateManyMutationInput, DishRatingUncheckedUpdateManyWithoutDishInput>
  }

  export type OrderUpsertWithWhereUniqueWithoutDishInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutDishInput, OrderUncheckedUpdateWithoutDishInput>
    create: XOR<OrderCreateWithoutDishInput, OrderUncheckedCreateWithoutDishInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutDishInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutDishInput, OrderUncheckedUpdateWithoutDishInput>
  }

  export type OrderUpdateManyWithWhereWithoutDishInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutDishInput>
  }

  export type ClientUpsertWithWhereUniqueWithoutDishfavoritesInput = {
    where: ClientWhereUniqueInput
    update: XOR<ClientUpdateWithoutDishfavoritesInput, ClientUncheckedUpdateWithoutDishfavoritesInput>
    create: XOR<ClientCreateWithoutDishfavoritesInput, ClientUncheckedCreateWithoutDishfavoritesInput>
  }

  export type ClientUpdateWithWhereUniqueWithoutDishfavoritesInput = {
    where: ClientWhereUniqueInput
    data: XOR<ClientUpdateWithoutDishfavoritesInput, ClientUncheckedUpdateWithoutDishfavoritesInput>
  }

  export type ClientUpdateManyWithWhereWithoutDishfavoritesInput = {
    where: ClientScalarWhereInput
    data: XOR<ClientUpdateManyMutationInput, ClientUncheckedUpdateManyWithoutDishfavoritesInput>
  }

  export type ClientScalarWhereInput = {
    AND?: ClientScalarWhereInput | ClientScalarWhereInput[]
    OR?: ClientScalarWhereInput[]
    NOT?: ClientScalarWhereInput | ClientScalarWhereInput[]
    id?: IntFilter<"Client"> | number
    name?: StringFilter<"Client"> | string
    email?: StringFilter<"Client"> | string
    password?: StringFilter<"Client"> | string
    phoneNumber?: StringFilter<"Client"> | string
    address?: StringFilter<"Client"> | string
    imageUrl?: StringNullableFilter<"Client"> | string | null
    createdAt?: DateTimeFilter<"Client"> | Date | string
    updatedAt?: DateTimeFilter<"Client"> | Date | string
  }

  export type IngDishUpsertWithWhereUniqueWithoutDishInput = {
    where: IngDishWhereUniqueInput
    update: XOR<IngDishUpdateWithoutDishInput, IngDishUncheckedUpdateWithoutDishInput>
    create: XOR<IngDishCreateWithoutDishInput, IngDishUncheckedCreateWithoutDishInput>
  }

  export type IngDishUpdateWithWhereUniqueWithoutDishInput = {
    where: IngDishWhereUniqueInput
    data: XOR<IngDishUpdateWithoutDishInput, IngDishUncheckedUpdateWithoutDishInput>
  }

  export type IngDishUpdateManyWithWhereWithoutDishInput = {
    where: IngDishScalarWhereInput
    data: XOR<IngDishUpdateManyMutationInput, IngDishUncheckedUpdateManyWithoutDishInput>
  }

  export type IngDishScalarWhereInput = {
    AND?: IngDishScalarWhereInput | IngDishScalarWhereInput[]
    OR?: IngDishScalarWhereInput[]
    NOT?: IngDishScalarWhereInput | IngDishScalarWhereInput[]
    id?: IntFilter<"IngDish"> | number
    dishId?: IntFilter<"IngDish"> | number
    ingredientId?: IntFilter<"IngDish"> | number
    orderId?: IntFilter<"IngDish"> | number
    added?: BoolFilter<"IngDish"> | boolean
    createdAt?: DateTimeFilter<"IngDish"> | Date | string
    updatedAt?: DateTimeFilter<"IngDish"> | Date | string
  }

  export type IngDishCreateWithoutIngredientInput = {
    added: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    dish: DishCreateNestedOneWithoutIngDishesInput
    order: OrderCreateNestedOneWithoutIngDishesInput
  }

  export type IngDishUncheckedCreateWithoutIngredientInput = {
    id?: number
    dishId: number
    orderId: number
    added: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type IngDishCreateOrConnectWithoutIngredientInput = {
    where: IngDishWhereUniqueInput
    create: XOR<IngDishCreateWithoutIngredientInput, IngDishUncheckedCreateWithoutIngredientInput>
  }

  export type IngDishCreateManyIngredientInputEnvelope = {
    data: IngDishCreateManyIngredientInput | IngDishCreateManyIngredientInput[]
    skipDuplicates?: boolean
  }

  export type IngDishUpsertWithWhereUniqueWithoutIngredientInput = {
    where: IngDishWhereUniqueInput
    update: XOR<IngDishUpdateWithoutIngredientInput, IngDishUncheckedUpdateWithoutIngredientInput>
    create: XOR<IngDishCreateWithoutIngredientInput, IngDishUncheckedCreateWithoutIngredientInput>
  }

  export type IngDishUpdateWithWhereUniqueWithoutIngredientInput = {
    where: IngDishWhereUniqueInput
    data: XOR<IngDishUpdateWithoutIngredientInput, IngDishUncheckedUpdateWithoutIngredientInput>
  }

  export type IngDishUpdateManyWithWhereWithoutIngredientInput = {
    where: IngDishScalarWhereInput
    data: XOR<IngDishUpdateManyMutationInput, IngDishUncheckedUpdateManyWithoutIngredientInput>
  }

  export type ClientCreateWithoutOrdersInput = {
    name: string
    email: string
    password: string
    phoneNumber: string
    address: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    dishRatings?: DishRatingCreateNestedManyWithoutClientInput
    dishfavorites?: DishCreateNestedManyWithoutDishFavoriteInput
  }

  export type ClientUncheckedCreateWithoutOrdersInput = {
    id?: number
    name: string
    email: string
    password: string
    phoneNumber: string
    address: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    dishRatings?: DishRatingUncheckedCreateNestedManyWithoutClientInput
    dishfavorites?: DishUncheckedCreateNestedManyWithoutDishFavoriteInput
  }

  export type ClientCreateOrConnectWithoutOrdersInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutOrdersInput, ClientUncheckedCreateWithoutOrdersInput>
  }

  export type DishCreateWithoutOrdersInput = {
    title: string
    category: string
    description: string
    price: number
    imageUrl?: DishCreateimageUrlInput | string[]
    duration: number
    createdAt?: Date | string
    updatedAt?: Date | string
    Chiefs: ChiefCreateNestedOneWithoutDishesInput
    ratings?: DishRatingCreateNestedManyWithoutDishInput
    dishFavorite?: ClientCreateNestedManyWithoutDishfavoritesInput
    ingDishes?: IngDishCreateNestedManyWithoutDishInput
  }

  export type DishUncheckedCreateWithoutOrdersInput = {
    id?: number
    title: string
    category: string
    description: string
    price: number
    imageUrl?: DishCreateimageUrlInput | string[]
    duration: number
    ChiefId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    ratings?: DishRatingUncheckedCreateNestedManyWithoutDishInput
    dishFavorite?: ClientUncheckedCreateNestedManyWithoutDishfavoritesInput
    ingDishes?: IngDishUncheckedCreateNestedManyWithoutDishInput
  }

  export type DishCreateOrConnectWithoutOrdersInput = {
    where: DishWhereUniqueInput
    create: XOR<DishCreateWithoutOrdersInput, DishUncheckedCreateWithoutOrdersInput>
  }

  export type DeliveryBoyCreateWithoutOrdersInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DeliveryBoyUncheckedCreateWithoutOrdersInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DeliveryBoyCreateOrConnectWithoutOrdersInput = {
    where: DeliveryBoyWhereUniqueInput
    create: XOR<DeliveryBoyCreateWithoutOrdersInput, DeliveryBoyUncheckedCreateWithoutOrdersInput>
  }

  export type IngDishCreateWithoutOrderInput = {
    added: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    dish: DishCreateNestedOneWithoutIngDishesInput
    ingredient: IngredientsCreateNestedOneWithoutIngDishesInput
  }

  export type IngDishUncheckedCreateWithoutOrderInput = {
    id?: number
    dishId: number
    ingredientId: number
    added: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type IngDishCreateOrConnectWithoutOrderInput = {
    where: IngDishWhereUniqueInput
    create: XOR<IngDishCreateWithoutOrderInput, IngDishUncheckedCreateWithoutOrderInput>
  }

  export type IngDishCreateManyOrderInputEnvelope = {
    data: IngDishCreateManyOrderInput | IngDishCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type ClientUpsertWithoutOrdersInput = {
    update: XOR<ClientUpdateWithoutOrdersInput, ClientUncheckedUpdateWithoutOrdersInput>
    create: XOR<ClientCreateWithoutOrdersInput, ClientUncheckedCreateWithoutOrdersInput>
    where?: ClientWhereInput
  }

  export type ClientUpdateToOneWithWhereWithoutOrdersInput = {
    where?: ClientWhereInput
    data: XOR<ClientUpdateWithoutOrdersInput, ClientUncheckedUpdateWithoutOrdersInput>
  }

  export type ClientUpdateWithoutOrdersInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dishRatings?: DishRatingUpdateManyWithoutClientNestedInput
    dishfavorites?: DishUpdateManyWithoutDishFavoriteNestedInput
  }

  export type ClientUncheckedUpdateWithoutOrdersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dishRatings?: DishRatingUncheckedUpdateManyWithoutClientNestedInput
    dishfavorites?: DishUncheckedUpdateManyWithoutDishFavoriteNestedInput
  }

  export type DishUpsertWithoutOrdersInput = {
    update: XOR<DishUpdateWithoutOrdersInput, DishUncheckedUpdateWithoutOrdersInput>
    create: XOR<DishCreateWithoutOrdersInput, DishUncheckedCreateWithoutOrdersInput>
    where?: DishWhereInput
  }

  export type DishUpdateToOneWithWhereWithoutOrdersInput = {
    where?: DishWhereInput
    data: XOR<DishUpdateWithoutOrdersInput, DishUncheckedUpdateWithoutOrdersInput>
  }

  export type DishUpdateWithoutOrdersInput = {
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    imageUrl?: DishUpdateimageUrlInput | string[]
    duration?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Chiefs?: ChiefUpdateOneRequiredWithoutDishesNestedInput
    ratings?: DishRatingUpdateManyWithoutDishNestedInput
    dishFavorite?: ClientUpdateManyWithoutDishfavoritesNestedInput
    ingDishes?: IngDishUpdateManyWithoutDishNestedInput
  }

  export type DishUncheckedUpdateWithoutOrdersInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    imageUrl?: DishUpdateimageUrlInput | string[]
    duration?: FloatFieldUpdateOperationsInput | number
    ChiefId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ratings?: DishRatingUncheckedUpdateManyWithoutDishNestedInput
    dishFavorite?: ClientUncheckedUpdateManyWithoutDishfavoritesNestedInput
    ingDishes?: IngDishUncheckedUpdateManyWithoutDishNestedInput
  }

  export type DeliveryBoyUpsertWithoutOrdersInput = {
    update: XOR<DeliveryBoyUpdateWithoutOrdersInput, DeliveryBoyUncheckedUpdateWithoutOrdersInput>
    create: XOR<DeliveryBoyCreateWithoutOrdersInput, DeliveryBoyUncheckedCreateWithoutOrdersInput>
    where?: DeliveryBoyWhereInput
  }

  export type DeliveryBoyUpdateToOneWithWhereWithoutOrdersInput = {
    where?: DeliveryBoyWhereInput
    data: XOR<DeliveryBoyUpdateWithoutOrdersInput, DeliveryBoyUncheckedUpdateWithoutOrdersInput>
  }

  export type DeliveryBoyUpdateWithoutOrdersInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeliveryBoyUncheckedUpdateWithoutOrdersInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IngDishUpsertWithWhereUniqueWithoutOrderInput = {
    where: IngDishWhereUniqueInput
    update: XOR<IngDishUpdateWithoutOrderInput, IngDishUncheckedUpdateWithoutOrderInput>
    create: XOR<IngDishCreateWithoutOrderInput, IngDishUncheckedCreateWithoutOrderInput>
  }

  export type IngDishUpdateWithWhereUniqueWithoutOrderInput = {
    where: IngDishWhereUniqueInput
    data: XOR<IngDishUpdateWithoutOrderInput, IngDishUncheckedUpdateWithoutOrderInput>
  }

  export type IngDishUpdateManyWithWhereWithoutOrderInput = {
    where: IngDishScalarWhereInput
    data: XOR<IngDishUpdateManyMutationInput, IngDishUncheckedUpdateManyWithoutOrderInput>
  }

  export type DishCreateWithoutIngDishesInput = {
    title: string
    category: string
    description: string
    price: number
    imageUrl?: DishCreateimageUrlInput | string[]
    duration: number
    createdAt?: Date | string
    updatedAt?: Date | string
    Chiefs: ChiefCreateNestedOneWithoutDishesInput
    ratings?: DishRatingCreateNestedManyWithoutDishInput
    Orders?: OrderCreateNestedManyWithoutDishInput
    dishFavorite?: ClientCreateNestedManyWithoutDishfavoritesInput
  }

  export type DishUncheckedCreateWithoutIngDishesInput = {
    id?: number
    title: string
    category: string
    description: string
    price: number
    imageUrl?: DishCreateimageUrlInput | string[]
    duration: number
    ChiefId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    ratings?: DishRatingUncheckedCreateNestedManyWithoutDishInput
    Orders?: OrderUncheckedCreateNestedManyWithoutDishInput
    dishFavorite?: ClientUncheckedCreateNestedManyWithoutDishfavoritesInput
  }

  export type DishCreateOrConnectWithoutIngDishesInput = {
    where: DishWhereUniqueInput
    create: XOR<DishCreateWithoutIngDishesInput, DishUncheckedCreateWithoutIngDishesInput>
  }

  export type IngredientsCreateWithoutIngDishesInput = {
    name: string
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type IngredientsUncheckedCreateWithoutIngDishesInput = {
    id?: number
    name: string
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type IngredientsCreateOrConnectWithoutIngDishesInput = {
    where: IngredientsWhereUniqueInput
    create: XOR<IngredientsCreateWithoutIngDishesInput, IngredientsUncheckedCreateWithoutIngDishesInput>
  }

  export type OrderCreateWithoutIngDishesInput = {
    totalAmount: number
    quantity: number
    status: $Enums.OrderStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    client: ClientCreateNestedOneWithoutOrdersInput
    dish: DishCreateNestedOneWithoutOrdersInput
    deliveryBoy: DeliveryBoyCreateNestedOneWithoutOrdersInput
  }

  export type OrderUncheckedCreateWithoutIngDishesInput = {
    id?: number
    totalAmount: number
    quantity: number
    status: $Enums.OrderStatus
    clientId: number
    dishId: number
    deliveryBoyId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderCreateOrConnectWithoutIngDishesInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutIngDishesInput, OrderUncheckedCreateWithoutIngDishesInput>
  }

  export type DishUpsertWithoutIngDishesInput = {
    update: XOR<DishUpdateWithoutIngDishesInput, DishUncheckedUpdateWithoutIngDishesInput>
    create: XOR<DishCreateWithoutIngDishesInput, DishUncheckedCreateWithoutIngDishesInput>
    where?: DishWhereInput
  }

  export type DishUpdateToOneWithWhereWithoutIngDishesInput = {
    where?: DishWhereInput
    data: XOR<DishUpdateWithoutIngDishesInput, DishUncheckedUpdateWithoutIngDishesInput>
  }

  export type DishUpdateWithoutIngDishesInput = {
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    imageUrl?: DishUpdateimageUrlInput | string[]
    duration?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Chiefs?: ChiefUpdateOneRequiredWithoutDishesNestedInput
    ratings?: DishRatingUpdateManyWithoutDishNestedInput
    Orders?: OrderUpdateManyWithoutDishNestedInput
    dishFavorite?: ClientUpdateManyWithoutDishfavoritesNestedInput
  }

  export type DishUncheckedUpdateWithoutIngDishesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    imageUrl?: DishUpdateimageUrlInput | string[]
    duration?: FloatFieldUpdateOperationsInput | number
    ChiefId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ratings?: DishRatingUncheckedUpdateManyWithoutDishNestedInput
    Orders?: OrderUncheckedUpdateManyWithoutDishNestedInput
    dishFavorite?: ClientUncheckedUpdateManyWithoutDishfavoritesNestedInput
  }

  export type IngredientsUpsertWithoutIngDishesInput = {
    update: XOR<IngredientsUpdateWithoutIngDishesInput, IngredientsUncheckedUpdateWithoutIngDishesInput>
    create: XOR<IngredientsCreateWithoutIngDishesInput, IngredientsUncheckedCreateWithoutIngDishesInput>
    where?: IngredientsWhereInput
  }

  export type IngredientsUpdateToOneWithWhereWithoutIngDishesInput = {
    where?: IngredientsWhereInput
    data: XOR<IngredientsUpdateWithoutIngDishesInput, IngredientsUncheckedUpdateWithoutIngDishesInput>
  }

  export type IngredientsUpdateWithoutIngDishesInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IngredientsUncheckedUpdateWithoutIngDishesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderUpsertWithoutIngDishesInput = {
    update: XOR<OrderUpdateWithoutIngDishesInput, OrderUncheckedUpdateWithoutIngDishesInput>
    create: XOR<OrderCreateWithoutIngDishesInput, OrderUncheckedCreateWithoutIngDishesInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutIngDishesInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutIngDishesInput, OrderUncheckedUpdateWithoutIngDishesInput>
  }

  export type OrderUpdateWithoutIngDishesInput = {
    totalAmount?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: ClientUpdateOneRequiredWithoutOrdersNestedInput
    dish?: DishUpdateOneRequiredWithoutOrdersNestedInput
    deliveryBoy?: DeliveryBoyUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type OrderUncheckedUpdateWithoutIngDishesInput = {
    id?: IntFieldUpdateOperationsInput | number
    totalAmount?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    clientId?: IntFieldUpdateOperationsInput | number
    dishId?: IntFieldUpdateOperationsInput | number
    deliveryBoyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientCreateWithoutDishRatingsInput = {
    name: string
    email: string
    password: string
    phoneNumber: string
    address: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orders?: OrderCreateNestedManyWithoutClientInput
    dishfavorites?: DishCreateNestedManyWithoutDishFavoriteInput
  }

  export type ClientUncheckedCreateWithoutDishRatingsInput = {
    id?: number
    name: string
    email: string
    password: string
    phoneNumber: string
    address: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orders?: OrderUncheckedCreateNestedManyWithoutClientInput
    dishfavorites?: DishUncheckedCreateNestedManyWithoutDishFavoriteInput
  }

  export type ClientCreateOrConnectWithoutDishRatingsInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutDishRatingsInput, ClientUncheckedCreateWithoutDishRatingsInput>
  }

  export type DishCreateWithoutRatingsInput = {
    title: string
    category: string
    description: string
    price: number
    imageUrl?: DishCreateimageUrlInput | string[]
    duration: number
    createdAt?: Date | string
    updatedAt?: Date | string
    Chiefs: ChiefCreateNestedOneWithoutDishesInput
    Orders?: OrderCreateNestedManyWithoutDishInput
    dishFavorite?: ClientCreateNestedManyWithoutDishfavoritesInput
    ingDishes?: IngDishCreateNestedManyWithoutDishInput
  }

  export type DishUncheckedCreateWithoutRatingsInput = {
    id?: number
    title: string
    category: string
    description: string
    price: number
    imageUrl?: DishCreateimageUrlInput | string[]
    duration: number
    ChiefId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    Orders?: OrderUncheckedCreateNestedManyWithoutDishInput
    dishFavorite?: ClientUncheckedCreateNestedManyWithoutDishfavoritesInput
    ingDishes?: IngDishUncheckedCreateNestedManyWithoutDishInput
  }

  export type DishCreateOrConnectWithoutRatingsInput = {
    where: DishWhereUniqueInput
    create: XOR<DishCreateWithoutRatingsInput, DishUncheckedCreateWithoutRatingsInput>
  }

  export type ClientUpsertWithoutDishRatingsInput = {
    update: XOR<ClientUpdateWithoutDishRatingsInput, ClientUncheckedUpdateWithoutDishRatingsInput>
    create: XOR<ClientCreateWithoutDishRatingsInput, ClientUncheckedCreateWithoutDishRatingsInput>
    where?: ClientWhereInput
  }

  export type ClientUpdateToOneWithWhereWithoutDishRatingsInput = {
    where?: ClientWhereInput
    data: XOR<ClientUpdateWithoutDishRatingsInput, ClientUncheckedUpdateWithoutDishRatingsInput>
  }

  export type ClientUpdateWithoutDishRatingsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: OrderUpdateManyWithoutClientNestedInput
    dishfavorites?: DishUpdateManyWithoutDishFavoriteNestedInput
  }

  export type ClientUncheckedUpdateWithoutDishRatingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: OrderUncheckedUpdateManyWithoutClientNestedInput
    dishfavorites?: DishUncheckedUpdateManyWithoutDishFavoriteNestedInput
  }

  export type DishUpsertWithoutRatingsInput = {
    update: XOR<DishUpdateWithoutRatingsInput, DishUncheckedUpdateWithoutRatingsInput>
    create: XOR<DishCreateWithoutRatingsInput, DishUncheckedCreateWithoutRatingsInput>
    where?: DishWhereInput
  }

  export type DishUpdateToOneWithWhereWithoutRatingsInput = {
    where?: DishWhereInput
    data: XOR<DishUpdateWithoutRatingsInput, DishUncheckedUpdateWithoutRatingsInput>
  }

  export type DishUpdateWithoutRatingsInput = {
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    imageUrl?: DishUpdateimageUrlInput | string[]
    duration?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Chiefs?: ChiefUpdateOneRequiredWithoutDishesNestedInput
    Orders?: OrderUpdateManyWithoutDishNestedInput
    dishFavorite?: ClientUpdateManyWithoutDishfavoritesNestedInput
    ingDishes?: IngDishUpdateManyWithoutDishNestedInput
  }

  export type DishUncheckedUpdateWithoutRatingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    imageUrl?: DishUpdateimageUrlInput | string[]
    duration?: FloatFieldUpdateOperationsInput | number
    ChiefId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Orders?: OrderUncheckedUpdateManyWithoutDishNestedInput
    dishFavorite?: ClientUncheckedUpdateManyWithoutDishfavoritesNestedInput
    ingDishes?: IngDishUncheckedUpdateManyWithoutDishNestedInput
  }

  export type OrderCreateManyClientInput = {
    id?: number
    totalAmount: number
    quantity: number
    status: $Enums.OrderStatus
    dishId: number
    deliveryBoyId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DishRatingCreateManyClientInput = {
    id?: number
    rating: number
    comment?: string | null
    dishId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderUpdateWithoutClientInput = {
    totalAmount?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dish?: DishUpdateOneRequiredWithoutOrdersNestedInput
    deliveryBoy?: DeliveryBoyUpdateOneRequiredWithoutOrdersNestedInput
    ingDishes?: IngDishUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    totalAmount?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    dishId?: IntFieldUpdateOperationsInput | number
    deliveryBoyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ingDishes?: IngDishUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateManyWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    totalAmount?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    dishId?: IntFieldUpdateOperationsInput | number
    deliveryBoyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DishRatingUpdateWithoutClientInput = {
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dish?: DishUpdateOneRequiredWithoutRatingsNestedInput
  }

  export type DishRatingUncheckedUpdateWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    dishId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DishRatingUncheckedUpdateManyWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    dishId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DishUpdateWithoutDishFavoriteInput = {
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    imageUrl?: DishUpdateimageUrlInput | string[]
    duration?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Chiefs?: ChiefUpdateOneRequiredWithoutDishesNestedInput
    ratings?: DishRatingUpdateManyWithoutDishNestedInput
    Orders?: OrderUpdateManyWithoutDishNestedInput
    ingDishes?: IngDishUpdateManyWithoutDishNestedInput
  }

  export type DishUncheckedUpdateWithoutDishFavoriteInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    imageUrl?: DishUpdateimageUrlInput | string[]
    duration?: FloatFieldUpdateOperationsInput | number
    ChiefId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ratings?: DishRatingUncheckedUpdateManyWithoutDishNestedInput
    Orders?: OrderUncheckedUpdateManyWithoutDishNestedInput
    ingDishes?: IngDishUncheckedUpdateManyWithoutDishNestedInput
  }

  export type DishUncheckedUpdateManyWithoutDishFavoriteInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    imageUrl?: DishUpdateimageUrlInput | string[]
    duration?: FloatFieldUpdateOperationsInput | number
    ChiefId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DishCreateManyChiefsInput = {
    id?: number
    title: string
    category: string
    description: string
    price: number
    imageUrl?: DishCreateimageUrlInput | string[]
    duration: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DishUpdateWithoutChiefsInput = {
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    imageUrl?: DishUpdateimageUrlInput | string[]
    duration?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ratings?: DishRatingUpdateManyWithoutDishNestedInput
    Orders?: OrderUpdateManyWithoutDishNestedInput
    dishFavorite?: ClientUpdateManyWithoutDishfavoritesNestedInput
    ingDishes?: IngDishUpdateManyWithoutDishNestedInput
  }

  export type DishUncheckedUpdateWithoutChiefsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    imageUrl?: DishUpdateimageUrlInput | string[]
    duration?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ratings?: DishRatingUncheckedUpdateManyWithoutDishNestedInput
    Orders?: OrderUncheckedUpdateManyWithoutDishNestedInput
    dishFavorite?: ClientUncheckedUpdateManyWithoutDishfavoritesNestedInput
    ingDishes?: IngDishUncheckedUpdateManyWithoutDishNestedInput
  }

  export type DishUncheckedUpdateManyWithoutChiefsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    imageUrl?: DishUpdateimageUrlInput | string[]
    duration?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderCreateManyDeliveryBoyInput = {
    id?: number
    totalAmount: number
    quantity: number
    status: $Enums.OrderStatus
    clientId: number
    dishId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderUpdateWithoutDeliveryBoyInput = {
    totalAmount?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: ClientUpdateOneRequiredWithoutOrdersNestedInput
    dish?: DishUpdateOneRequiredWithoutOrdersNestedInput
    ingDishes?: IngDishUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutDeliveryBoyInput = {
    id?: IntFieldUpdateOperationsInput | number
    totalAmount?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    clientId?: IntFieldUpdateOperationsInput | number
    dishId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ingDishes?: IngDishUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateManyWithoutDeliveryBoyInput = {
    id?: IntFieldUpdateOperationsInput | number
    totalAmount?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    clientId?: IntFieldUpdateOperationsInput | number
    dishId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DishRatingCreateManyDishInput = {
    id?: number
    rating: number
    comment?: string | null
    clientId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderCreateManyDishInput = {
    id?: number
    totalAmount: number
    quantity: number
    status: $Enums.OrderStatus
    clientId: number
    deliveryBoyId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type IngDishCreateManyDishInput = {
    id?: number
    ingredientId: number
    orderId: number
    added: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DishRatingUpdateWithoutDishInput = {
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: ClientUpdateOneRequiredWithoutDishRatingsNestedInput
  }

  export type DishRatingUncheckedUpdateWithoutDishInput = {
    id?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    clientId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DishRatingUncheckedUpdateManyWithoutDishInput = {
    id?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    clientId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderUpdateWithoutDishInput = {
    totalAmount?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: ClientUpdateOneRequiredWithoutOrdersNestedInput
    deliveryBoy?: DeliveryBoyUpdateOneRequiredWithoutOrdersNestedInput
    ingDishes?: IngDishUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutDishInput = {
    id?: IntFieldUpdateOperationsInput | number
    totalAmount?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    clientId?: IntFieldUpdateOperationsInput | number
    deliveryBoyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ingDishes?: IngDishUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateManyWithoutDishInput = {
    id?: IntFieldUpdateOperationsInput | number
    totalAmount?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    clientId?: IntFieldUpdateOperationsInput | number
    deliveryBoyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientUpdateWithoutDishfavoritesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: OrderUpdateManyWithoutClientNestedInput
    dishRatings?: DishRatingUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutDishfavoritesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: OrderUncheckedUpdateManyWithoutClientNestedInput
    dishRatings?: DishRatingUncheckedUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateManyWithoutDishfavoritesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IngDishUpdateWithoutDishInput = {
    added?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ingredient?: IngredientsUpdateOneRequiredWithoutIngDishesNestedInput
    order?: OrderUpdateOneRequiredWithoutIngDishesNestedInput
  }

  export type IngDishUncheckedUpdateWithoutDishInput = {
    id?: IntFieldUpdateOperationsInput | number
    ingredientId?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    added?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IngDishUncheckedUpdateManyWithoutDishInput = {
    id?: IntFieldUpdateOperationsInput | number
    ingredientId?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    added?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IngDishCreateManyIngredientInput = {
    id?: number
    dishId: number
    orderId: number
    added: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type IngDishUpdateWithoutIngredientInput = {
    added?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dish?: DishUpdateOneRequiredWithoutIngDishesNestedInput
    order?: OrderUpdateOneRequiredWithoutIngDishesNestedInput
  }

  export type IngDishUncheckedUpdateWithoutIngredientInput = {
    id?: IntFieldUpdateOperationsInput | number
    dishId?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    added?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IngDishUncheckedUpdateManyWithoutIngredientInput = {
    id?: IntFieldUpdateOperationsInput | number
    dishId?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    added?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IngDishCreateManyOrderInput = {
    id?: number
    dishId: number
    ingredientId: number
    added: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type IngDishUpdateWithoutOrderInput = {
    added?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dish?: DishUpdateOneRequiredWithoutIngDishesNestedInput
    ingredient?: IngredientsUpdateOneRequiredWithoutIngDishesNestedInput
  }

  export type IngDishUncheckedUpdateWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    dishId?: IntFieldUpdateOperationsInput | number
    ingredientId?: IntFieldUpdateOperationsInput | number
    added?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IngDishUncheckedUpdateManyWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    dishId?: IntFieldUpdateOperationsInput | number
    ingredientId?: IntFieldUpdateOperationsInput | number
    added?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use ClientCountOutputTypeDefaultArgs instead
     */
    export type ClientCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClientCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChiefCountOutputTypeDefaultArgs instead
     */
    export type ChiefCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChiefCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DeliveryBoyCountOutputTypeDefaultArgs instead
     */
    export type DeliveryBoyCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DeliveryBoyCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DishCountOutputTypeDefaultArgs instead
     */
    export type DishCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DishCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use IngredientsCountOutputTypeDefaultArgs instead
     */
    export type IngredientsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = IngredientsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrderCountOutputTypeDefaultArgs instead
     */
    export type OrderCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrderCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClientDefaultArgs instead
     */
    export type ClientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClientDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChiefDefaultArgs instead
     */
    export type ChiefArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChiefDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DeliveryBoyDefaultArgs instead
     */
    export type DeliveryBoyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DeliveryBoyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DishDefaultArgs instead
     */
    export type DishArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DishDefaultArgs<ExtArgs>
    /**
     * @deprecated Use IngredientsDefaultArgs instead
     */
    export type IngredientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = IngredientsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrderDefaultArgs instead
     */
    export type OrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrderDefaultArgs<ExtArgs>
    /**
     * @deprecated Use IngDishDefaultArgs instead
     */
    export type IngDishArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = IngDishDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DishRatingDefaultArgs instead
     */
    export type DishRatingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DishRatingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AdminDefaultArgs instead
     */
    export type AdminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AdminDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}